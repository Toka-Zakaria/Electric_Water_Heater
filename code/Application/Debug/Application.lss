
Application.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000038ea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011c  00800060  000038ea  0000397e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  0080017c  0080017c  00003a9a  2**0
                  ALLOC
  3 .stab         00003024  00000000  00000000  00003a9c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000014e7  00000000  00000000  00006ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00007fa7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00008147  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00008339  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000a744  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000baca  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000cca0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000ce60  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000d156  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000dac4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 e9 0c 	jmp	0x19d2	; 0x19d2 <__vector_1>
       8:	0c 94 1c 0d 	jmp	0x1a38	; 0x1a38 <__vector_2>
       c:	0c 94 28 14 	jmp	0x2850	; 0x2850 <__vector_3>
      10:	0c 94 e9 13 	jmp	0x27d2	; 0x27d2 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 6b 13 	jmp	0x26d6	; 0x26d6 <__vector_6>
      1c:	0c 94 aa 13 	jmp	0x2754	; 0x2754 <__vector_7>
      20:	0c 94 2c 13 	jmp	0x2658	; 0x2658 <__vector_8>
      24:	0c 94 ae 12 	jmp	0x255c	; 0x255c <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 4f 0d 	jmp	0x1a9e	; 0x1a9e <__vector_18>
      4c:	0c 94 ed 12 	jmp	0x25da	; 0x25da <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ee       	ldi	r30, 0xEA	; 234
      68:	f8 e3       	ldi	r31, 0x38	; 56
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 37       	cpi	r26, 0x7C	; 124
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e7       	ldi	r26, 0x7C	; 124
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 38       	cpi	r26, 0x8C	; 140
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 49 0f 	call	0x1e92	; 0x1e92 <main>
      8a:	0c 94 73 1c 	jmp	0x38e6	; 0x38e6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 3c 1c 	jmp	0x3878	; 0x3878 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 58 1c 	jmp	0x38b0	; 0x38b0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 48 1c 	jmp	0x3890	; 0x3890 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 64 1c 	jmp	0x38c8	; 0x38c8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 48 1c 	jmp	0x3890	; 0x3890 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 64 1c 	jmp	0x38c8	; 0x38c8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 3c 1c 	jmp	0x3878	; 0x3878 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 58 1c 	jmp	0x38b0	; 0x38b0 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 44 1c 	jmp	0x3888	; 0x3888 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 60 1c 	jmp	0x38c0	; 0x38c0 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 48 1c 	jmp	0x3890	; 0x3890 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 64 1c 	jmp	0x38c8	; 0x38c8 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 48 1c 	jmp	0x3890	; 0x3890 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 64 1c 	jmp	0x38c8	; 0x38c8 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 48 1c 	jmp	0x3890	; 0x3890 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 64 1c 	jmp	0x38c8	; 0x38c8 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 4c 1c 	jmp	0x3898	; 0x3898 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 68 1c 	jmp	0x38d0	; 0x38d0 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 44 1c 	jmp	0x3888	; 0x3888 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 60 1c 	jmp	0x38c0	; 0x38c0 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <DC_motor_Init>:
#include"DCmotor.h"



void DC_motor_Init(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
	DC_MOTOR_DIRECTION_PORT = SET_BIT(DC_MOTOR_DIRECTION_PORT , DC_MOTOR_PIN_IN1);
     e36:	27 e3       	ldi	r18, 0x37	; 55
     e38:	30 e0       	ldi	r19, 0x00	; 0
     e3a:	a7 e3       	ldi	r26, 0x37	; 55
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	e7 e3       	ldi	r30, 0x37	; 55
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	80 61       	ori	r24, 0x10	; 16
     e46:	8c 93       	st	X, r24
     e48:	8c 91       	ld	r24, X
     e4a:	f9 01       	movw	r30, r18
     e4c:	80 83       	st	Z, r24
	DC_MOTOR_DIRECTION_PORT = SET_BIT(DC_MOTOR_DIRECTION_PORT , DC_MOTOR_PIN_IN2);
     e4e:	27 e3       	ldi	r18, 0x37	; 55
     e50:	30 e0       	ldi	r19, 0x00	; 0
     e52:	a7 e3       	ldi	r26, 0x37	; 55
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	e7 e3       	ldi	r30, 0x37	; 55
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	80 62       	ori	r24, 0x20	; 32
     e5e:	8c 93       	st	X, r24
     e60:	8c 91       	ld	r24, X
     e62:	f9 01       	movw	r30, r18
     e64:	80 83       	st	Z, r24

#if ENABLE_PIN_CONNECTED_TO_MICRO

	DC_MOTOR_ENABLE_DIRECTION_PORT = SET_BIT(DC_MOTOR_ENABLE_DIRECTION_PORT , DC_MOTOR_PIN_EN1);
#endif
}
     e66:	cf 91       	pop	r28
     e68:	df 91       	pop	r29
     e6a:	08 95       	ret

00000e6c <DC_motor_on_ClockWise>:
 *
 * [Returns]:      NONE
 ***************************************************************************************************/

void DC_motor_on_ClockWise(void)
{
     e6c:	df 93       	push	r29
     e6e:	cf 93       	push	r28
     e70:	cd b7       	in	r28, 0x3d	; 61
     e72:	de b7       	in	r29, 0x3e	; 62
	DC_MOTOR_DATA_PORT = CLEAR_BIT(DC_MOTOR_DATA_PORT , DC_MOTOR_PIN_IN1);
     e74:	28 e3       	ldi	r18, 0x38	; 56
     e76:	30 e0       	ldi	r19, 0x00	; 0
     e78:	a8 e3       	ldi	r26, 0x38	; 56
     e7a:	b0 e0       	ldi	r27, 0x00	; 0
     e7c:	e8 e3       	ldi	r30, 0x38	; 56
     e7e:	f0 e0       	ldi	r31, 0x00	; 0
     e80:	80 81       	ld	r24, Z
     e82:	8f 7e       	andi	r24, 0xEF	; 239
     e84:	8c 93       	st	X, r24
     e86:	8c 91       	ld	r24, X
     e88:	f9 01       	movw	r30, r18
     e8a:	80 83       	st	Z, r24
	DC_MOTOR_DATA_PORT = SET_BIT(DC_MOTOR_DATA_PORT , DC_MOTOR_PIN_IN2);
     e8c:	28 e3       	ldi	r18, 0x38	; 56
     e8e:	30 e0       	ldi	r19, 0x00	; 0
     e90:	a8 e3       	ldi	r26, 0x38	; 56
     e92:	b0 e0       	ldi	r27, 0x00	; 0
     e94:	e8 e3       	ldi	r30, 0x38	; 56
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	80 62       	ori	r24, 0x20	; 32
     e9c:	8c 93       	st	X, r24
     e9e:	8c 91       	ld	r24, X
     ea0:	f9 01       	movw	r30, r18
     ea2:	80 83       	st	Z, r24

}/*End of motor_onClockWise*/
     ea4:	cf 91       	pop	r28
     ea6:	df 91       	pop	r29
     ea8:	08 95       	ret

00000eaa <DC_motor_onAnti_ClockWise>:
 *
 * [Returns]:      NONE
 ***************************************************************************************************/

void DC_motor_onAnti_ClockWise(void)
{
     eaa:	df 93       	push	r29
     eac:	cf 93       	push	r28
     eae:	cd b7       	in	r28, 0x3d	; 61
     eb0:	de b7       	in	r29, 0x3e	; 62
	DC_MOTOR_DATA_PORT = CLEAR_BIT( DC_MOTOR_DATA_PORT, DC_MOTOR_PIN_IN2);
     eb2:	28 e3       	ldi	r18, 0x38	; 56
     eb4:	30 e0       	ldi	r19, 0x00	; 0
     eb6:	a8 e3       	ldi	r26, 0x38	; 56
     eb8:	b0 e0       	ldi	r27, 0x00	; 0
     eba:	e8 e3       	ldi	r30, 0x38	; 56
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	80 81       	ld	r24, Z
     ec0:	8f 7d       	andi	r24, 0xDF	; 223
     ec2:	8c 93       	st	X, r24
     ec4:	8c 91       	ld	r24, X
     ec6:	f9 01       	movw	r30, r18
     ec8:	80 83       	st	Z, r24
	DC_MOTOR_DATA_PORT = SET_BIT (DC_MOTOR_DATA_PORT, DC_MOTOR_PIN_IN1);
     eca:	28 e3       	ldi	r18, 0x38	; 56
     ecc:	30 e0       	ldi	r19, 0x00	; 0
     ece:	a8 e3       	ldi	r26, 0x38	; 56
     ed0:	b0 e0       	ldi	r27, 0x00	; 0
     ed2:	e8 e3       	ldi	r30, 0x38	; 56
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	80 81       	ld	r24, Z
     ed8:	80 61       	ori	r24, 0x10	; 16
     eda:	8c 93       	st	X, r24
     edc:	8c 91       	ld	r24, X
     ede:	f9 01       	movw	r30, r18
     ee0:	80 83       	st	Z, r24

}/*End of motor_onClockWise*/
     ee2:	cf 91       	pop	r28
     ee4:	df 91       	pop	r29
     ee6:	08 95       	ret

00000ee8 <DC_motor_on_Stop>:
 * [Out]           NONE
 *
 * [Returns]:      NONE
 ***************************************************************************************************/
void DC_motor_on_Stop(void)
{
     ee8:	df 93       	push	r29
     eea:	cf 93       	push	r28
     eec:	cd b7       	in	r28, 0x3d	; 61
     eee:	de b7       	in	r29, 0x3e	; 62
	DC_MOTOR_DATA_PORT = CLEAR_BIT(DC_MOTOR_DATA_PORT , DC_MOTOR_PIN_IN2);
     ef0:	28 e3       	ldi	r18, 0x38	; 56
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	a8 e3       	ldi	r26, 0x38	; 56
     ef6:	b0 e0       	ldi	r27, 0x00	; 0
     ef8:	e8 e3       	ldi	r30, 0x38	; 56
     efa:	f0 e0       	ldi	r31, 0x00	; 0
     efc:	80 81       	ld	r24, Z
     efe:	8f 7d       	andi	r24, 0xDF	; 223
     f00:	8c 93       	st	X, r24
     f02:	8c 91       	ld	r24, X
     f04:	f9 01       	movw	r30, r18
     f06:	80 83       	st	Z, r24
	DC_MOTOR_DATA_PORT = CLEAR_BIT( DC_MOTOR_DATA_PORT, DC_MOTOR_PIN_IN1);
     f08:	28 e3       	ldi	r18, 0x38	; 56
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	a8 e3       	ldi	r26, 0x38	; 56
     f0e:	b0 e0       	ldi	r27, 0x00	; 0
     f10:	e8 e3       	ldi	r30, 0x38	; 56
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	80 81       	ld	r24, Z
     f16:	8f 7e       	andi	r24, 0xEF	; 239
     f18:	8c 93       	st	X, r24
     f1a:	8c 91       	ld	r24, X
     f1c:	f9 01       	movw	r30, r18
     f1e:	80 83       	st	Z, r24

}/*End of motor_onClockWise*/
     f20:	cf 91       	pop	r28
     f22:	df 91       	pop	r29
     f24:	08 95       	ret

00000f26 <LED_Init>:
 * [Out]:          NONE
 *
 * [Returns]:      NONE
 **********************************************************************************/
void LED_Init(void)
{
     f26:	df 93       	push	r29
     f28:	cf 93       	push	r28
     f2a:	cd b7       	in	r28, 0x3d	; 61
     f2c:	de b7       	in	r29, 0x3e	; 62


#elif NUMBER_OF_LEDS == 2

	/*configure the led as output pin*/
	LED1_DIRECTION_PORT = SET_BIT(LED1_DIRECTION_PORT, LED1_OUTPUT_PIN);
     f2e:	21 e3       	ldi	r18, 0x31	; 49
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	a1 e3       	ldi	r26, 0x31	; 49
     f34:	b0 e0       	ldi	r27, 0x00	; 0
     f36:	e1 e3       	ldi	r30, 0x31	; 49
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	80 81       	ld	r24, Z
     f3c:	80 62       	ori	r24, 0x20	; 32
     f3e:	8c 93       	st	X, r24
     f40:	8c 91       	ld	r24, X
     f42:	f9 01       	movw	r30, r18
     f44:	80 83       	st	Z, r24
	/*configure the led as output pin*/
	LED2_DIRECTION_PORT = SET_BIT(LED2_DIRECTION_PORT, LED2_OUTPUT_PIN);
     f46:	21 e3       	ldi	r18, 0x31	; 49
     f48:	30 e0       	ldi	r19, 0x00	; 0
     f4a:	a1 e3       	ldi	r26, 0x31	; 49
     f4c:	b0 e0       	ldi	r27, 0x00	; 0
     f4e:	e1 e3       	ldi	r30, 0x31	; 49
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	80 81       	ld	r24, Z
     f54:	80 64       	ori	r24, 0x40	; 64
     f56:	8c 93       	st	X, r24
     f58:	8c 91       	ld	r24, X
     f5a:	f9 01       	movw	r30, r18
     f5c:	80 83       	st	Z, r24
	/*configure the led as output pin*/
	LED3_DIRECTION_PORT = SET_BIT(LED3_DIRECTION_PORT, LED3_OUTPUT_PIN);

#endif

}/*end of Led_Init*/
     f5e:	cf 91       	pop	r28
     f60:	df 91       	pop	r29
     f62:	08 95       	ret

00000f64 <LED_ON>:
 * [Out]:              NONE
 *
 * [Returns]:          NONE
 **********************************************************************************/
void LED_ON(uint8 ledNumber)
{
     f64:	df 93       	push	r29
     f66:	cf 93       	push	r28
     f68:	00 d0       	rcall	.+0      	; 0xf6a <LED_ON+0x6>
     f6a:	0f 92       	push	r0
     f6c:	cd b7       	in	r28, 0x3d	; 61
     f6e:	de b7       	in	r29, 0x3e	; 62
     f70:	89 83       	std	Y+1, r24	; 0x01

	switch (ledNumber)
     f72:	89 81       	ldd	r24, Y+1	; 0x01
     f74:	28 2f       	mov	r18, r24
     f76:	30 e0       	ldi	r19, 0x00	; 0
     f78:	3b 83       	std	Y+3, r19	; 0x03
     f7a:	2a 83       	std	Y+2, r18	; 0x02
     f7c:	8a 81       	ldd	r24, Y+2	; 0x02
     f7e:	9b 81       	ldd	r25, Y+3	; 0x03
     f80:	00 97       	sbiw	r24, 0x00	; 0
     f82:	31 f0       	breq	.+12     	; 0xf90 <LED_ON+0x2c>
     f84:	ea 81       	ldd	r30, Y+2	; 0x02
     f86:	fb 81       	ldd	r31, Y+3	; 0x03
     f88:	e1 30       	cpi	r30, 0x01	; 1
     f8a:	f1 05       	cpc	r31, r1
     f8c:	71 f0       	breq	.+28     	; 0xfaa <LED_ON+0x46>
     f8e:	19 c0       	rjmp	.+50     	; 0xfc2 <LED_ON+0x5e>

	case LED1:

#if LED1_LOGIC == POSITIVE

		LED1_DATA_PORT = SET_BIT(LED1_DATA_PORT, LED1_OUTPUT_PIN);
     f90:	22 e3       	ldi	r18, 0x32	; 50
     f92:	30 e0       	ldi	r19, 0x00	; 0
     f94:	a2 e3       	ldi	r26, 0x32	; 50
     f96:	b0 e0       	ldi	r27, 0x00	; 0
     f98:	e2 e3       	ldi	r30, 0x32	; 50
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	80 81       	ld	r24, Z
     f9e:	80 62       	ori	r24, 0x20	; 32
     fa0:	8c 93       	st	X, r24
     fa2:	8c 91       	ld	r24, X
     fa4:	f9 01       	movw	r30, r18
     fa6:	80 83       	st	Z, r24
     fa8:	0c c0       	rjmp	.+24     	; 0xfc2 <LED_ON+0x5e>
		break;

	case LED2:
#if LED2_LOGIC == POSITIVE

		LED2_DATA_PORT = SET_BIT(LED2_DATA_PORT, LED2_OUTPUT_PIN);
     faa:	22 e3       	ldi	r18, 0x32	; 50
     fac:	30 e0       	ldi	r19, 0x00	; 0
     fae:	a2 e3       	ldi	r26, 0x32	; 50
     fb0:	b0 e0       	ldi	r27, 0x00	; 0
     fb2:	e2 e3       	ldi	r30, 0x32	; 50
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	80 81       	ld	r24, Z
     fb8:	80 64       	ori	r24, 0x40	; 64
     fba:	8c 93       	st	X, r24
     fbc:	8c 91       	ld	r24, X
     fbe:	f9 01       	movw	r30, r18
     fc0:	80 83       	st	Z, r24
#endif
		break;
#endif

	}/*end of switch code*/
}/*end of LED_ON function*/
     fc2:	0f 90       	pop	r0
     fc4:	0f 90       	pop	r0
     fc6:	0f 90       	pop	r0
     fc8:	cf 91       	pop	r28
     fca:	df 91       	pop	r29
     fcc:	08 95       	ret

00000fce <LED_OFF>:
 * [Out]:              NONE
 *
 * [Returns]:          NONE
 **********************************************************************************/
void LED_OFF(uint8 ledNumber)
{
     fce:	df 93       	push	r29
     fd0:	cf 93       	push	r28
     fd2:	00 d0       	rcall	.+0      	; 0xfd4 <LED_OFF+0x6>
     fd4:	0f 92       	push	r0
     fd6:	cd b7       	in	r28, 0x3d	; 61
     fd8:	de b7       	in	r29, 0x3e	; 62
     fda:	89 83       	std	Y+1, r24	; 0x01

	switch (ledNumber)
     fdc:	89 81       	ldd	r24, Y+1	; 0x01
     fde:	28 2f       	mov	r18, r24
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	3b 83       	std	Y+3, r19	; 0x03
     fe4:	2a 83       	std	Y+2, r18	; 0x02
     fe6:	8a 81       	ldd	r24, Y+2	; 0x02
     fe8:	9b 81       	ldd	r25, Y+3	; 0x03
     fea:	00 97       	sbiw	r24, 0x00	; 0
     fec:	31 f0       	breq	.+12     	; 0xffa <LED_OFF+0x2c>
     fee:	ea 81       	ldd	r30, Y+2	; 0x02
     ff0:	fb 81       	ldd	r31, Y+3	; 0x03
     ff2:	e1 30       	cpi	r30, 0x01	; 1
     ff4:	f1 05       	cpc	r31, r1
     ff6:	71 f0       	breq	.+28     	; 0x1014 <LED_OFF+0x46>
     ff8:	19 c0       	rjmp	.+50     	; 0x102c <LED_OFF+0x5e>

	case LED1:

#if LED1_LOGIC == POSITIVE

		LED1_DATA_PORT = CLEAR_BIT(LED1_DATA_PORT, LED1_OUTPUT_PIN);
     ffa:	22 e3       	ldi	r18, 0x32	; 50
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	a2 e3       	ldi	r26, 0x32	; 50
    1000:	b0 e0       	ldi	r27, 0x00	; 0
    1002:	e2 e3       	ldi	r30, 0x32	; 50
    1004:	f0 e0       	ldi	r31, 0x00	; 0
    1006:	80 81       	ld	r24, Z
    1008:	8f 7d       	andi	r24, 0xDF	; 223
    100a:	8c 93       	st	X, r24
    100c:	8c 91       	ld	r24, X
    100e:	f9 01       	movw	r30, r18
    1010:	80 83       	st	Z, r24
    1012:	0c c0       	rjmp	.+24     	; 0x102c <LED_OFF+0x5e>
		break;

	case LED2:
#if LED2_LOGIC == POSITIVE

		LED2_DATA_PORT = CLEAR_BIT(LED2_DATA_PORT, LED2_OUTPUT_PIN);
    1014:	22 e3       	ldi	r18, 0x32	; 50
    1016:	30 e0       	ldi	r19, 0x00	; 0
    1018:	a2 e3       	ldi	r26, 0x32	; 50
    101a:	b0 e0       	ldi	r27, 0x00	; 0
    101c:	e2 e3       	ldi	r30, 0x32	; 50
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	80 81       	ld	r24, Z
    1022:	8f 7b       	andi	r24, 0xBF	; 191
    1024:	8c 93       	st	X, r24
    1026:	8c 91       	ld	r24, X
    1028:	f9 01       	movw	r30, r18
    102a:	80 83       	st	Z, r24
#endif
		break;
#endif

	}/*end of switch code*/
}/*end of LED_ON function*/
    102c:	0f 90       	pop	r0
    102e:	0f 90       	pop	r0
    1030:	0f 90       	pop	r0
    1032:	cf 91       	pop	r28
    1034:	df 91       	pop	r29
    1036:	08 95       	ret

00001038 <ADC_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void ADC_init(void)
{
    1038:	df 93       	push	r29
    103a:	cf 93       	push	r28
    103c:	cd b7       	in	r28, 0x3d	; 61
    103e:	de b7       	in	r29, 0x3e	; 62
	/* ADMUX Register Bits Description:
	 * REFS1:0 = 00 to choose to connect external reference voltage by input this voltage through AREF pin
	 * ADLAR   = 0 right adjusted
	 * MUX4:0  = 00000 to choose channel 0 as initialization
	 */
	ADMUX = 0;
    1040:	e7 e2       	ldi	r30, 0x27	; 39
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	10 82       	st	Z, r1
	/* ADCSRA Register Bits Description:
	 * ADEN    = 1 Enable ADC
	 * ADIE    = 0 Disable ADC Interrupt
	 * ADPS2:0 = 011 to choose ADC_Clock=F_CPU/8=1Mhz/8=125Khz --> ADC must operate in range 50-200Khz
	 */
	ADCSRA = (1<<ADEN) | (1<<ADPS1) | (1<<ADPS0);
    1046:	e6 e2       	ldi	r30, 0x26	; 38
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	83 e8       	ldi	r24, 0x83	; 131
    104c:	80 83       	st	Z, r24
}
    104e:	cf 91       	pop	r28
    1050:	df 91       	pop	r29
    1052:	08 95       	ret

00001054 <ADC_readChannel>:

uint16 ADC_readChannel(uint8 channel_num)
{
    1054:	df 93       	push	r29
    1056:	cf 93       	push	r28
    1058:	0f 92       	push	r0
    105a:	cd b7       	in	r28, 0x3d	; 61
    105c:	de b7       	in	r29, 0x3e	; 62
    105e:	89 83       	std	Y+1, r24	; 0x01
	channel_num &= 0x07; /* channel number must be from 0 --> 7 */
    1060:	89 81       	ldd	r24, Y+1	; 0x01
    1062:	87 70       	andi	r24, 0x07	; 7
    1064:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &= 0xE0; /* clear first 5 bits in the ADMUX (channel number MUX4:0 bits) before set the required channel */
    1066:	a7 e2       	ldi	r26, 0x27	; 39
    1068:	b0 e0       	ldi	r27, 0x00	; 0
    106a:	e7 e2       	ldi	r30, 0x27	; 39
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	80 81       	ld	r24, Z
    1070:	80 7e       	andi	r24, 0xE0	; 224
    1072:	8c 93       	st	X, r24
	ADMUX = ADMUX | channel_num; /* choose the correct channel by setting the channel number in MUX4:0 bits */
    1074:	a7 e2       	ldi	r26, 0x27	; 39
    1076:	b0 e0       	ldi	r27, 0x00	; 0
    1078:	e7 e2       	ldi	r30, 0x27	; 39
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	90 81       	ld	r25, Z
    107e:	89 81       	ldd	r24, Y+1	; 0x01
    1080:	89 2b       	or	r24, r25
    1082:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADSC); /* start conversion write '1' to ADSC */
    1084:	a6 e2       	ldi	r26, 0x26	; 38
    1086:	b0 e0       	ldi	r27, 0x00	; 0
    1088:	e6 e2       	ldi	r30, 0x26	; 38
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	80 81       	ld	r24, Z
    108e:	80 64       	ori	r24, 0x40	; 64
    1090:	8c 93       	st	X, r24
	while(BIT_IS_CLEAR(ADCSRA,ADIF)); /* wait for conversion to complete ADIF becomes '1' */
    1092:	e6 e2       	ldi	r30, 0x26	; 38
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	80 81       	ld	r24, Z
    1098:	88 2f       	mov	r24, r24
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	80 71       	andi	r24, 0x10	; 16
    109e:	90 70       	andi	r25, 0x00	; 0
    10a0:	00 97       	sbiw	r24, 0x00	; 0
    10a2:	b9 f3       	breq	.-18     	; 0x1092 <ADC_readChannel+0x3e>
	SET_BIT(ADCSRA,ADIF); /* clear ADIF by write '1' to it :) */
    10a4:	a6 e2       	ldi	r26, 0x26	; 38
    10a6:	b0 e0       	ldi	r27, 0x00	; 0
    10a8:	e6 e2       	ldi	r30, 0x26	; 38
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	80 81       	ld	r24, Z
    10ae:	80 61       	ori	r24, 0x10	; 16
    10b0:	8c 93       	st	X, r24
	return ADC; /* return the data register */
    10b2:	e4 e2       	ldi	r30, 0x24	; 36
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	80 81       	ld	r24, Z
    10b8:	91 81       	ldd	r25, Z+1	; 0x01
}
    10ba:	0f 90       	pop	r0
    10bc:	cf 91       	pop	r28
    10be:	df 91       	pop	r29
    10c0:	08 95       	ret

000010c2 <read_currentTemperature>:
 *
 * [Returns]:      the value of the current temperature which is read from
 *                 temperature sensor
 **********************************************************************************/
uint32 read_currentTemperature(void)
{
    10c2:	df 93       	push	r29
    10c4:	cf 93       	push	r28
    10c6:	00 d0       	rcall	.+0      	; 0x10c8 <read_currentTemperature+0x6>
    10c8:	00 d0       	rcall	.+0      	; 0x10ca <read_currentTemperature+0x8>
    10ca:	cd b7       	in	r28, 0x3d	; 61
    10cc:	de b7       	in	r29, 0x3e	; 62

	/*
	 * Read channel two where the temperature sensor is connect
	 * the current value of the water temperature
	 */
	temp = ADC_readChannel(CHANNEL_NUMBER);
    10ce:	80 e0       	ldi	r24, 0x00	; 0
    10d0:	0e 94 2a 08 	call	0x1054	; 0x1054 <ADC_readChannel>
    10d4:	cc 01       	movw	r24, r24
    10d6:	a0 e0       	ldi	r26, 0x00	; 0
    10d8:	b0 e0       	ldi	r27, 0x00	; 0
    10da:	89 83       	std	Y+1, r24	; 0x01
    10dc:	9a 83       	std	Y+2, r25	; 0x02
    10de:	ab 83       	std	Y+3, r26	; 0x03
    10e0:	bc 83       	std	Y+4, r27	; 0x04
	/*
	 * Calculate the temperature from the ADC value
	 */
	temp = (uint32)((temp*150*5)/(1023*1.5));
    10e2:	89 81       	ldd	r24, Y+1	; 0x01
    10e4:	9a 81       	ldd	r25, Y+2	; 0x02
    10e6:	ab 81       	ldd	r26, Y+3	; 0x03
    10e8:	bc 81       	ldd	r27, Y+4	; 0x04
    10ea:	2e ee       	ldi	r18, 0xEE	; 238
    10ec:	32 e0       	ldi	r19, 0x02	; 2
    10ee:	40 e0       	ldi	r20, 0x00	; 0
    10f0:	50 e0       	ldi	r21, 0x00	; 0
    10f2:	bc 01       	movw	r22, r24
    10f4:	cd 01       	movw	r24, r26
    10f6:	0e 94 fb 1b 	call	0x37f6	; 0x37f6 <__mulsi3>
    10fa:	dc 01       	movw	r26, r24
    10fc:	cb 01       	movw	r24, r22
    10fe:	bc 01       	movw	r22, r24
    1100:	cd 01       	movw	r24, r26
    1102:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1106:	dc 01       	movw	r26, r24
    1108:	cb 01       	movw	r24, r22
    110a:	bc 01       	movw	r22, r24
    110c:	cd 01       	movw	r24, r26
    110e:	20 e0       	ldi	r18, 0x00	; 0
    1110:	30 ed       	ldi	r19, 0xD0	; 208
    1112:	4f eb       	ldi	r20, 0xBF	; 191
    1114:	54 e4       	ldi	r21, 0x44	; 68
    1116:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    111a:	dc 01       	movw	r26, r24
    111c:	cb 01       	movw	r24, r22
    111e:	bc 01       	movw	r22, r24
    1120:	cd 01       	movw	r24, r26
    1122:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1126:	dc 01       	movw	r26, r24
    1128:	cb 01       	movw	r24, r22
    112a:	89 83       	std	Y+1, r24	; 0x01
    112c:	9a 83       	std	Y+2, r25	; 0x02
    112e:	ab 83       	std	Y+3, r26	; 0x03
    1130:	bc 83       	std	Y+4, r27	; 0x04

	return temp;
    1132:	89 81       	ldd	r24, Y+1	; 0x01
    1134:	9a 81       	ldd	r25, Y+2	; 0x02
    1136:	ab 81       	ldd	r26, Y+3	; 0x03
    1138:	bc 81       	ldd	r27, Y+4	; 0x04

}/*end of read temperature function*/
    113a:	bc 01       	movw	r22, r24
    113c:	cd 01       	movw	r24, r26
    113e:	0f 90       	pop	r0
    1140:	0f 90       	pop	r0
    1142:	0f 90       	pop	r0
    1144:	0f 90       	pop	r0
    1146:	cf 91       	pop	r28
    1148:	df 91       	pop	r29
    114a:	08 95       	ret

0000114c <displayTemperature>:
 * [Out]:                NONE
 *
 * [Returns]:            NONE
 **********************************************************************************/
void displayTemperature(uint32 currentTemp)
{
    114c:	ff 92       	push	r15
    114e:	0f 93       	push	r16
    1150:	1f 93       	push	r17
    1152:	df 93       	push	r29
    1154:	cf 93       	push	r28
    1156:	cd b7       	in	r28, 0x3d	; 61
    1158:	de b7       	in	r29, 0x3e	; 62
    115a:	a0 97       	sbiw	r28, 0x20	; 32
    115c:	0f b6       	in	r0, 0x3f	; 63
    115e:	f8 94       	cli
    1160:	de bf       	out	0x3e, r29	; 62
    1162:	0f be       	out	0x3f, r0	; 63
    1164:	cd bf       	out	0x3d, r28	; 61
    1166:	6d 8f       	std	Y+29, r22	; 0x1d
    1168:	7e 8f       	std	Y+30, r23	; 0x1e
    116a:	8f 8f       	std	Y+31, r24	; 0x1f
    116c:	98 a3       	std	Y+32, r25	; 0x20
	/*
	 * Enable Control selection lines of the segments
	 */
	SEGMENTS_CTRL_PORT_REG = (SEGMENTS_CTRL_PORT_REG & SEGMENTS_CTRL_MASK) | FIRST_SEGMENT_ENABLE_CTRL;
    116e:	a2 e3       	ldi	r26, 0x32	; 50
    1170:	b0 e0       	ldi	r27, 0x00	; 0
    1172:	e2 e3       	ldi	r30, 0x32	; 50
    1174:	f0 e0       	ldi	r31, 0x00	; 0
    1176:	80 81       	ld	r24, Z
    1178:	8c 7f       	andi	r24, 0xFC	; 252
    117a:	81 60       	ori	r24, 0x01	; 1
    117c:	8c 93       	st	X, r24
	SEGMENTS_PORT_REG =   (SEGMENTS_PORT_REG & SEGMENTS_MASK) | (((uint32)(currentTemp))%10);
    117e:	08 e3       	ldi	r16, 0x38	; 56
    1180:	10 e0       	ldi	r17, 0x00	; 0
    1182:	e8 e3       	ldi	r30, 0x38	; 56
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	80 81       	ld	r24, Z
    1188:	0f 2e       	mov	r0, r31
    118a:	f0 ef       	ldi	r31, 0xF0	; 240
    118c:	ff 2e       	mov	r15, r31
    118e:	f0 2d       	mov	r31, r0
    1190:	f8 22       	and	r15, r24
    1192:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1194:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1196:	af 8d       	ldd	r26, Y+31	; 0x1f
    1198:	b8 a1       	ldd	r27, Y+32	; 0x20
    119a:	2a e0       	ldi	r18, 0x0A	; 10
    119c:	30 e0       	ldi	r19, 0x00	; 0
    119e:	40 e0       	ldi	r20, 0x00	; 0
    11a0:	50 e0       	ldi	r21, 0x00	; 0
    11a2:	bc 01       	movw	r22, r24
    11a4:	cd 01       	movw	r24, r26
    11a6:	0e 94 1a 1c 	call	0x3834	; 0x3834 <__udivmodsi4>
    11aa:	dc 01       	movw	r26, r24
    11ac:	cb 01       	movw	r24, r22
    11ae:	8f 29       	or	r24, r15
    11b0:	f8 01       	movw	r30, r16
    11b2:	80 83       	st	Z, r24
    11b4:	80 e0       	ldi	r24, 0x00	; 0
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	a0 e4       	ldi	r26, 0x40	; 64
    11ba:	b1 e4       	ldi	r27, 0x41	; 65
    11bc:	89 8f       	std	Y+25, r24	; 0x19
    11be:	9a 8f       	std	Y+26, r25	; 0x1a
    11c0:	ab 8f       	std	Y+27, r26	; 0x1b
    11c2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11c4:	69 8d       	ldd	r22, Y+25	; 0x19
    11c6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    11c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    11cc:	20 e0       	ldi	r18, 0x00	; 0
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	4a e7       	ldi	r20, 0x7A	; 122
    11d2:	53 e4       	ldi	r21, 0x43	; 67
    11d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11d8:	dc 01       	movw	r26, r24
    11da:	cb 01       	movw	r24, r22
    11dc:	8d 8b       	std	Y+21, r24	; 0x15
    11de:	9e 8b       	std	Y+22, r25	; 0x16
    11e0:	af 8b       	std	Y+23, r26	; 0x17
    11e2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    11e4:	6d 89       	ldd	r22, Y+21	; 0x15
    11e6:	7e 89       	ldd	r23, Y+22	; 0x16
    11e8:	8f 89       	ldd	r24, Y+23	; 0x17
    11ea:	98 8d       	ldd	r25, Y+24	; 0x18
    11ec:	20 e0       	ldi	r18, 0x00	; 0
    11ee:	30 e0       	ldi	r19, 0x00	; 0
    11f0:	40 e8       	ldi	r20, 0x80	; 128
    11f2:	5f e3       	ldi	r21, 0x3F	; 63
    11f4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    11f8:	88 23       	and	r24, r24
    11fa:	2c f4       	brge	.+10     	; 0x1206 <displayTemperature+0xba>
		__ticks = 1;
    11fc:	81 e0       	ldi	r24, 0x01	; 1
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	9c 8b       	std	Y+20, r25	; 0x14
    1202:	8b 8b       	std	Y+19, r24	; 0x13
    1204:	3f c0       	rjmp	.+126    	; 0x1284 <displayTemperature+0x138>
	else if (__tmp > 65535)
    1206:	6d 89       	ldd	r22, Y+21	; 0x15
    1208:	7e 89       	ldd	r23, Y+22	; 0x16
    120a:	8f 89       	ldd	r24, Y+23	; 0x17
    120c:	98 8d       	ldd	r25, Y+24	; 0x18
    120e:	20 e0       	ldi	r18, 0x00	; 0
    1210:	3f ef       	ldi	r19, 0xFF	; 255
    1212:	4f e7       	ldi	r20, 0x7F	; 127
    1214:	57 e4       	ldi	r21, 0x47	; 71
    1216:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    121a:	18 16       	cp	r1, r24
    121c:	4c f5       	brge	.+82     	; 0x1270 <displayTemperature+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    121e:	69 8d       	ldd	r22, Y+25	; 0x19
    1220:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1222:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1224:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1226:	20 e0       	ldi	r18, 0x00	; 0
    1228:	30 e0       	ldi	r19, 0x00	; 0
    122a:	40 e2       	ldi	r20, 0x20	; 32
    122c:	51 e4       	ldi	r21, 0x41	; 65
    122e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1232:	dc 01       	movw	r26, r24
    1234:	cb 01       	movw	r24, r22
    1236:	bc 01       	movw	r22, r24
    1238:	cd 01       	movw	r24, r26
    123a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    123e:	dc 01       	movw	r26, r24
    1240:	cb 01       	movw	r24, r22
    1242:	9c 8b       	std	Y+20, r25	; 0x14
    1244:	8b 8b       	std	Y+19, r24	; 0x13
    1246:	0f c0       	rjmp	.+30     	; 0x1266 <displayTemperature+0x11a>
    1248:	89 e1       	ldi	r24, 0x19	; 25
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	9a 8b       	std	Y+18, r25	; 0x12
    124e:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1250:	89 89       	ldd	r24, Y+17	; 0x11
    1252:	9a 89       	ldd	r25, Y+18	; 0x12
    1254:	01 97       	sbiw	r24, 0x01	; 1
    1256:	f1 f7       	brne	.-4      	; 0x1254 <displayTemperature+0x108>
    1258:	9a 8b       	std	Y+18, r25	; 0x12
    125a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    125c:	8b 89       	ldd	r24, Y+19	; 0x13
    125e:	9c 89       	ldd	r25, Y+20	; 0x14
    1260:	01 97       	sbiw	r24, 0x01	; 1
    1262:	9c 8b       	std	Y+20, r25	; 0x14
    1264:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1266:	8b 89       	ldd	r24, Y+19	; 0x13
    1268:	9c 89       	ldd	r25, Y+20	; 0x14
    126a:	00 97       	sbiw	r24, 0x00	; 0
    126c:	69 f7       	brne	.-38     	; 0x1248 <displayTemperature+0xfc>
    126e:	14 c0       	rjmp	.+40     	; 0x1298 <displayTemperature+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1270:	6d 89       	ldd	r22, Y+21	; 0x15
    1272:	7e 89       	ldd	r23, Y+22	; 0x16
    1274:	8f 89       	ldd	r24, Y+23	; 0x17
    1276:	98 8d       	ldd	r25, Y+24	; 0x18
    1278:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    127c:	dc 01       	movw	r26, r24
    127e:	cb 01       	movw	r24, r22
    1280:	9c 8b       	std	Y+20, r25	; 0x14
    1282:	8b 8b       	std	Y+19, r24	; 0x13
    1284:	8b 89       	ldd	r24, Y+19	; 0x13
    1286:	9c 89       	ldd	r25, Y+20	; 0x14
    1288:	98 8b       	std	Y+16, r25	; 0x10
    128a:	8f 87       	std	Y+15, r24	; 0x0f
    128c:	8f 85       	ldd	r24, Y+15	; 0x0f
    128e:	98 89       	ldd	r25, Y+16	; 0x10
    1290:	01 97       	sbiw	r24, 0x01	; 1
    1292:	f1 f7       	brne	.-4      	; 0x1290 <displayTemperature+0x144>
    1294:	98 8b       	std	Y+16, r25	; 0x10
    1296:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(SEGMENTS_CTRL_TIME);

	SEGMENTS_CTRL_PORT_REG = (SEGMENTS_CTRL_PORT_REG & SEGMENTS_CTRL_MASK) | SECOND_SEGMENT_ENABLE_CTRL;
    1298:	a2 e3       	ldi	r26, 0x32	; 50
    129a:	b0 e0       	ldi	r27, 0x00	; 0
    129c:	e2 e3       	ldi	r30, 0x32	; 50
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	80 81       	ld	r24, Z
    12a2:	8c 7f       	andi	r24, 0xFC	; 252
    12a4:	82 60       	ori	r24, 0x02	; 2
    12a6:	8c 93       	st	X, r24
	SEGMENTS_PORT_REG =   (SEGMENTS_PORT_REG & SEGMENTS_MASK) | (((uint32)(currentTemp))/10);
    12a8:	08 e3       	ldi	r16, 0x38	; 56
    12aa:	10 e0       	ldi	r17, 0x00	; 0
    12ac:	e8 e3       	ldi	r30, 0x38	; 56
    12ae:	f0 e0       	ldi	r31, 0x00	; 0
    12b0:	80 81       	ld	r24, Z
    12b2:	0f 2e       	mov	r0, r31
    12b4:	f0 ef       	ldi	r31, 0xF0	; 240
    12b6:	ff 2e       	mov	r15, r31
    12b8:	f0 2d       	mov	r31, r0
    12ba:	f8 22       	and	r15, r24
    12bc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    12be:	9e 8d       	ldd	r25, Y+30	; 0x1e
    12c0:	af 8d       	ldd	r26, Y+31	; 0x1f
    12c2:	b8 a1       	ldd	r27, Y+32	; 0x20
    12c4:	2a e0       	ldi	r18, 0x0A	; 10
    12c6:	30 e0       	ldi	r19, 0x00	; 0
    12c8:	40 e0       	ldi	r20, 0x00	; 0
    12ca:	50 e0       	ldi	r21, 0x00	; 0
    12cc:	bc 01       	movw	r22, r24
    12ce:	cd 01       	movw	r24, r26
    12d0:	0e 94 1a 1c 	call	0x3834	; 0x3834 <__udivmodsi4>
    12d4:	da 01       	movw	r26, r20
    12d6:	c9 01       	movw	r24, r18
    12d8:	8f 29       	or	r24, r15
    12da:	f8 01       	movw	r30, r16
    12dc:	80 83       	st	Z, r24
    12de:	80 e0       	ldi	r24, 0x00	; 0
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	a0 e4       	ldi	r26, 0x40	; 64
    12e4:	b1 e4       	ldi	r27, 0x41	; 65
    12e6:	8b 87       	std	Y+11, r24	; 0x0b
    12e8:	9c 87       	std	Y+12, r25	; 0x0c
    12ea:	ad 87       	std	Y+13, r26	; 0x0d
    12ec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    12f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    12f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    12f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    12f6:	20 e0       	ldi	r18, 0x00	; 0
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	4a e7       	ldi	r20, 0x7A	; 122
    12fc:	53 e4       	ldi	r21, 0x43	; 67
    12fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1302:	dc 01       	movw	r26, r24
    1304:	cb 01       	movw	r24, r22
    1306:	8f 83       	std	Y+7, r24	; 0x07
    1308:	98 87       	std	Y+8, r25	; 0x08
    130a:	a9 87       	std	Y+9, r26	; 0x09
    130c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    130e:	6f 81       	ldd	r22, Y+7	; 0x07
    1310:	78 85       	ldd	r23, Y+8	; 0x08
    1312:	89 85       	ldd	r24, Y+9	; 0x09
    1314:	9a 85       	ldd	r25, Y+10	; 0x0a
    1316:	20 e0       	ldi	r18, 0x00	; 0
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	40 e8       	ldi	r20, 0x80	; 128
    131c:	5f e3       	ldi	r21, 0x3F	; 63
    131e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1322:	88 23       	and	r24, r24
    1324:	2c f4       	brge	.+10     	; 0x1330 <displayTemperature+0x1e4>
		__ticks = 1;
    1326:	81 e0       	ldi	r24, 0x01	; 1
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	9e 83       	std	Y+6, r25	; 0x06
    132c:	8d 83       	std	Y+5, r24	; 0x05
    132e:	3f c0       	rjmp	.+126    	; 0x13ae <displayTemperature+0x262>
	else if (__tmp > 65535)
    1330:	6f 81       	ldd	r22, Y+7	; 0x07
    1332:	78 85       	ldd	r23, Y+8	; 0x08
    1334:	89 85       	ldd	r24, Y+9	; 0x09
    1336:	9a 85       	ldd	r25, Y+10	; 0x0a
    1338:	20 e0       	ldi	r18, 0x00	; 0
    133a:	3f ef       	ldi	r19, 0xFF	; 255
    133c:	4f e7       	ldi	r20, 0x7F	; 127
    133e:	57 e4       	ldi	r21, 0x47	; 71
    1340:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1344:	18 16       	cp	r1, r24
    1346:	4c f5       	brge	.+82     	; 0x139a <displayTemperature+0x24e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1348:	6b 85       	ldd	r22, Y+11	; 0x0b
    134a:	7c 85       	ldd	r23, Y+12	; 0x0c
    134c:	8d 85       	ldd	r24, Y+13	; 0x0d
    134e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1350:	20 e0       	ldi	r18, 0x00	; 0
    1352:	30 e0       	ldi	r19, 0x00	; 0
    1354:	40 e2       	ldi	r20, 0x20	; 32
    1356:	51 e4       	ldi	r21, 0x41	; 65
    1358:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    135c:	dc 01       	movw	r26, r24
    135e:	cb 01       	movw	r24, r22
    1360:	bc 01       	movw	r22, r24
    1362:	cd 01       	movw	r24, r26
    1364:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1368:	dc 01       	movw	r26, r24
    136a:	cb 01       	movw	r24, r22
    136c:	9e 83       	std	Y+6, r25	; 0x06
    136e:	8d 83       	std	Y+5, r24	; 0x05
    1370:	0f c0       	rjmp	.+30     	; 0x1390 <displayTemperature+0x244>
    1372:	89 e1       	ldi	r24, 0x19	; 25
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	9c 83       	std	Y+4, r25	; 0x04
    1378:	8b 83       	std	Y+3, r24	; 0x03
    137a:	8b 81       	ldd	r24, Y+3	; 0x03
    137c:	9c 81       	ldd	r25, Y+4	; 0x04
    137e:	01 97       	sbiw	r24, 0x01	; 1
    1380:	f1 f7       	brne	.-4      	; 0x137e <displayTemperature+0x232>
    1382:	9c 83       	std	Y+4, r25	; 0x04
    1384:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1386:	8d 81       	ldd	r24, Y+5	; 0x05
    1388:	9e 81       	ldd	r25, Y+6	; 0x06
    138a:	01 97       	sbiw	r24, 0x01	; 1
    138c:	9e 83       	std	Y+6, r25	; 0x06
    138e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1390:	8d 81       	ldd	r24, Y+5	; 0x05
    1392:	9e 81       	ldd	r25, Y+6	; 0x06
    1394:	00 97       	sbiw	r24, 0x00	; 0
    1396:	69 f7       	brne	.-38     	; 0x1372 <displayTemperature+0x226>
    1398:	14 c0       	rjmp	.+40     	; 0x13c2 <displayTemperature+0x276>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    139a:	6f 81       	ldd	r22, Y+7	; 0x07
    139c:	78 85       	ldd	r23, Y+8	; 0x08
    139e:	89 85       	ldd	r24, Y+9	; 0x09
    13a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    13a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13a6:	dc 01       	movw	r26, r24
    13a8:	cb 01       	movw	r24, r22
    13aa:	9e 83       	std	Y+6, r25	; 0x06
    13ac:	8d 83       	std	Y+5, r24	; 0x05
    13ae:	8d 81       	ldd	r24, Y+5	; 0x05
    13b0:	9e 81       	ldd	r25, Y+6	; 0x06
    13b2:	9a 83       	std	Y+2, r25	; 0x02
    13b4:	89 83       	std	Y+1, r24	; 0x01
    13b6:	89 81       	ldd	r24, Y+1	; 0x01
    13b8:	9a 81       	ldd	r25, Y+2	; 0x02
    13ba:	01 97       	sbiw	r24, 0x01	; 1
    13bc:	f1 f7       	brne	.-4      	; 0x13ba <displayTemperature+0x26e>
    13be:	9a 83       	std	Y+2, r25	; 0x02
    13c0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(SEGMENTS_CTRL_TIME);

}/*End of display temperature function*/
    13c2:	a0 96       	adiw	r28, 0x20	; 32
    13c4:	0f b6       	in	r0, 0x3f	; 63
    13c6:	f8 94       	cli
    13c8:	de bf       	out	0x3e, r29	; 62
    13ca:	0f be       	out	0x3f, r0	; 63
    13cc:	cd bf       	out	0x3d, r28	; 61
    13ce:	cf 91       	pop	r28
    13d0:	df 91       	pop	r29
    13d2:	1f 91       	pop	r17
    13d4:	0f 91       	pop	r16
    13d6:	ff 90       	pop	r15
    13d8:	08 95       	ret

000013da <disableSegments>:
 * [Out]:        NONE
 *
 * [Returns]:    NONE
 **********************************************************************************/
void disableSegments(void)
{
    13da:	df 93       	push	r29
    13dc:	cf 93       	push	r28
    13de:	cd b7       	in	r28, 0x3d	; 61
    13e0:	de b7       	in	r29, 0x3e	; 62
	SEGMENTS_CTRL_PORT_REG = SEGMENTS_CTRL_PORT_REG & SEGMENTS_CTRL_MASK;
    13e2:	a2 e3       	ldi	r26, 0x32	; 50
    13e4:	b0 e0       	ldi	r27, 0x00	; 0
    13e6:	e2 e3       	ldi	r30, 0x32	; 50
    13e8:	f0 e0       	ldi	r31, 0x00	; 0
    13ea:	80 81       	ld	r24, Z
    13ec:	8c 7f       	andi	r24, 0xFC	; 252
    13ee:	8c 93       	st	X, r24
}
    13f0:	cf 91       	pop	r28
    13f2:	df 91       	pop	r29
    13f4:	08 95       	ret

000013f6 <FlashingSegments>:
 * [Out]:            NONE
 *
 * [Returns]:        NONE
 **********************************************************************************/
void FlashingSegments(uint32 temperature)
{
    13f6:	df 93       	push	r29
    13f8:	cf 93       	push	r28
    13fa:	cd b7       	in	r28, 0x3d	; 61
    13fc:	de b7       	in	r29, 0x3e	; 62
    13fe:	62 97       	sbiw	r28, 0x12	; 18
    1400:	0f b6       	in	r0, 0x3f	; 63
    1402:	f8 94       	cli
    1404:	de bf       	out	0x3e, r29	; 62
    1406:	0f be       	out	0x3f, r0	; 63
    1408:	cd bf       	out	0x3d, r28	; 61
    140a:	6f 87       	std	Y+15, r22	; 0x0f
    140c:	78 8b       	std	Y+16, r23	; 0x10
    140e:	89 8b       	std	Y+17, r24	; 0x11
    1410:	9a 8b       	std	Y+18, r25	; 0x12
	/*
	 * display the temperature
	 */
	displayTemperature(temperature);
    1412:	8f 85       	ldd	r24, Y+15	; 0x0f
    1414:	98 89       	ldd	r25, Y+16	; 0x10
    1416:	a9 89       	ldd	r26, Y+17	; 0x11
    1418:	ba 89       	ldd	r27, Y+18	; 0x12
    141a:	bc 01       	movw	r22, r24
    141c:	cd 01       	movw	r24, r26
    141e:	0e 94 a6 08 	call	0x114c	; 0x114c <displayTemperature>
	/*
	 * disable the temperature
	 */
	disableSegments();
    1422:	0e 94 ed 09 	call	0x13da	; 0x13da <disableSegments>
    1426:	80 e0       	ldi	r24, 0x00	; 0
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	aa ef       	ldi	r26, 0xFA	; 250
    142c:	b3 e4       	ldi	r27, 0x43	; 67
    142e:	8b 87       	std	Y+11, r24	; 0x0b
    1430:	9c 87       	std	Y+12, r25	; 0x0c
    1432:	ad 87       	std	Y+13, r26	; 0x0d
    1434:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1436:	6b 85       	ldd	r22, Y+11	; 0x0b
    1438:	7c 85       	ldd	r23, Y+12	; 0x0c
    143a:	8d 85       	ldd	r24, Y+13	; 0x0d
    143c:	9e 85       	ldd	r25, Y+14	; 0x0e
    143e:	20 e0       	ldi	r18, 0x00	; 0
    1440:	30 e0       	ldi	r19, 0x00	; 0
    1442:	4a e7       	ldi	r20, 0x7A	; 122
    1444:	53 e4       	ldi	r21, 0x43	; 67
    1446:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    144a:	dc 01       	movw	r26, r24
    144c:	cb 01       	movw	r24, r22
    144e:	8f 83       	std	Y+7, r24	; 0x07
    1450:	98 87       	std	Y+8, r25	; 0x08
    1452:	a9 87       	std	Y+9, r26	; 0x09
    1454:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1456:	6f 81       	ldd	r22, Y+7	; 0x07
    1458:	78 85       	ldd	r23, Y+8	; 0x08
    145a:	89 85       	ldd	r24, Y+9	; 0x09
    145c:	9a 85       	ldd	r25, Y+10	; 0x0a
    145e:	20 e0       	ldi	r18, 0x00	; 0
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	40 e8       	ldi	r20, 0x80	; 128
    1464:	5f e3       	ldi	r21, 0x3F	; 63
    1466:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    146a:	88 23       	and	r24, r24
    146c:	2c f4       	brge	.+10     	; 0x1478 <FlashingSegments+0x82>
		__ticks = 1;
    146e:	81 e0       	ldi	r24, 0x01	; 1
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	9e 83       	std	Y+6, r25	; 0x06
    1474:	8d 83       	std	Y+5, r24	; 0x05
    1476:	3f c0       	rjmp	.+126    	; 0x14f6 <FlashingSegments+0x100>
	else if (__tmp > 65535)
    1478:	6f 81       	ldd	r22, Y+7	; 0x07
    147a:	78 85       	ldd	r23, Y+8	; 0x08
    147c:	89 85       	ldd	r24, Y+9	; 0x09
    147e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1480:	20 e0       	ldi	r18, 0x00	; 0
    1482:	3f ef       	ldi	r19, 0xFF	; 255
    1484:	4f e7       	ldi	r20, 0x7F	; 127
    1486:	57 e4       	ldi	r21, 0x47	; 71
    1488:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    148c:	18 16       	cp	r1, r24
    148e:	4c f5       	brge	.+82     	; 0x14e2 <FlashingSegments+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1490:	6b 85       	ldd	r22, Y+11	; 0x0b
    1492:	7c 85       	ldd	r23, Y+12	; 0x0c
    1494:	8d 85       	ldd	r24, Y+13	; 0x0d
    1496:	9e 85       	ldd	r25, Y+14	; 0x0e
    1498:	20 e0       	ldi	r18, 0x00	; 0
    149a:	30 e0       	ldi	r19, 0x00	; 0
    149c:	40 e2       	ldi	r20, 0x20	; 32
    149e:	51 e4       	ldi	r21, 0x41	; 65
    14a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14a4:	dc 01       	movw	r26, r24
    14a6:	cb 01       	movw	r24, r22
    14a8:	bc 01       	movw	r22, r24
    14aa:	cd 01       	movw	r24, r26
    14ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14b0:	dc 01       	movw	r26, r24
    14b2:	cb 01       	movw	r24, r22
    14b4:	9e 83       	std	Y+6, r25	; 0x06
    14b6:	8d 83       	std	Y+5, r24	; 0x05
    14b8:	0f c0       	rjmp	.+30     	; 0x14d8 <FlashingSegments+0xe2>
    14ba:	89 e1       	ldi	r24, 0x19	; 25
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	9c 83       	std	Y+4, r25	; 0x04
    14c0:	8b 83       	std	Y+3, r24	; 0x03
    14c2:	8b 81       	ldd	r24, Y+3	; 0x03
    14c4:	9c 81       	ldd	r25, Y+4	; 0x04
    14c6:	01 97       	sbiw	r24, 0x01	; 1
    14c8:	f1 f7       	brne	.-4      	; 0x14c6 <FlashingSegments+0xd0>
    14ca:	9c 83       	std	Y+4, r25	; 0x04
    14cc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14ce:	8d 81       	ldd	r24, Y+5	; 0x05
    14d0:	9e 81       	ldd	r25, Y+6	; 0x06
    14d2:	01 97       	sbiw	r24, 0x01	; 1
    14d4:	9e 83       	std	Y+6, r25	; 0x06
    14d6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14d8:	8d 81       	ldd	r24, Y+5	; 0x05
    14da:	9e 81       	ldd	r25, Y+6	; 0x06
    14dc:	00 97       	sbiw	r24, 0x00	; 0
    14de:	69 f7       	brne	.-38     	; 0x14ba <FlashingSegments+0xc4>
    14e0:	14 c0       	rjmp	.+40     	; 0x150a <FlashingSegments+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14e2:	6f 81       	ldd	r22, Y+7	; 0x07
    14e4:	78 85       	ldd	r23, Y+8	; 0x08
    14e6:	89 85       	ldd	r24, Y+9	; 0x09
    14e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    14ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14ee:	dc 01       	movw	r26, r24
    14f0:	cb 01       	movw	r24, r22
    14f2:	9e 83       	std	Y+6, r25	; 0x06
    14f4:	8d 83       	std	Y+5, r24	; 0x05
    14f6:	8d 81       	ldd	r24, Y+5	; 0x05
    14f8:	9e 81       	ldd	r25, Y+6	; 0x06
    14fa:	9a 83       	std	Y+2, r25	; 0x02
    14fc:	89 83       	std	Y+1, r24	; 0x01
    14fe:	89 81       	ldd	r24, Y+1	; 0x01
    1500:	9a 81       	ldd	r25, Y+2	; 0x02
    1502:	01 97       	sbiw	r24, 0x01	; 1
    1504:	f1 f7       	brne	.-4      	; 0x1502 <FlashingSegments+0x10c>
    1506:	9a 83       	std	Y+2, r25	; 0x02
    1508:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(FLASHING_TIME);
}
    150a:	62 96       	adiw	r28, 0x12	; 18
    150c:	0f b6       	in	r0, 0x3f	; 63
    150e:	f8 94       	cli
    1510:	de bf       	out	0x3e, r29	; 62
    1512:	0f be       	out	0x3f, r0	; 63
    1514:	cd bf       	out	0x3d, r28	; 61
    1516:	cf 91       	pop	r28
    1518:	df 91       	pop	r29
    151a:	08 95       	ret

0000151c <upFunc>:
 * [Out]:             NONE
 *
 * [Returns]:         NONE
 **********************************************************************************/
void upFunc(void)
{
    151c:	df 93       	push	r29
    151e:	cf 93       	push	r28
    1520:	cd b7       	in	r28, 0x3d	; 61
    1522:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Change the state of g_upInterrupt_SWflag to be TRUE
	 * to inform the system that UP interrupt has occurred
	 */
	g_upInterrupt_SWflag = TRUE;
    1524:	81 e0       	ldi	r24, 0x01	; 1
    1526:	80 93 84 01 	sts	0x0184, r24
	/*
	 * return g_tick to its initial value be ready to
	 * count another MAXIMUM_NUMBER_OF_SECONDS to start seconds
	 * of displaying set temperature from initial value
	 */
	g_tick = INITIAL_VALUE;
    152a:	10 92 82 01 	sts	0x0182, r1

	if(g_firstClick == FALSE)
    152e:	80 91 83 01 	lds	r24, 0x0183
    1532:	88 23       	and	r24, r24
    1534:	21 f4       	brne	.+8      	; 0x153e <upFunc+0x22>
		/*
		 * Change the state of g_firstClick to be true to display the
		 * Initial set temperature value one time only in the begin of the
		 * program
		 */
		g_firstClick = TRUE;
    1536:	81 e0       	ldi	r24, 0x01	; 1
    1538:	80 93 83 01 	sts	0x0183, r24
    153c:	2c c0       	rjmp	.+88     	; 0x1596 <upFunc+0x7a>
	{
		/*
		 * Increasing the value of the temperature by INCREASE_VALUE
		 * every click on UP button
		 */
		g_setTemprature = g_setTemprature + INCREASE_VALUE;
    153e:	80 91 6b 01 	lds	r24, 0x016B
    1542:	90 91 6c 01 	lds	r25, 0x016C
    1546:	a0 91 6d 01 	lds	r26, 0x016D
    154a:	b0 91 6e 01 	lds	r27, 0x016E
    154e:	05 96       	adiw	r24, 0x05	; 5
    1550:	a1 1d       	adc	r26, r1
    1552:	b1 1d       	adc	r27, r1
    1554:	80 93 6b 01 	sts	0x016B, r24
    1558:	90 93 6c 01 	sts	0x016C, r25
    155c:	a0 93 6d 01 	sts	0x016D, r26
    1560:	b0 93 6e 01 	sts	0x016E, r27
		/*
		 * return the set temperature to its initial value
		 * when the increasing of set temperature exceed
		 * the MAXIMUM_SET_TEMPERATURE
		 */
		if(g_setTemprature > MAXIMUM_SET_TEMPERATURE)
    1564:	80 91 6b 01 	lds	r24, 0x016B
    1568:	90 91 6c 01 	lds	r25, 0x016C
    156c:	a0 91 6d 01 	lds	r26, 0x016D
    1570:	b0 91 6e 01 	lds	r27, 0x016E
    1574:	8c 34       	cpi	r24, 0x4C	; 76
    1576:	91 05       	cpc	r25, r1
    1578:	a1 05       	cpc	r26, r1
    157a:	b1 05       	cpc	r27, r1
    157c:	60 f0       	brcs	.+24     	; 0x1596 <upFunc+0x7a>
		{
			g_setTemprature = INITIAL_SET_TEMPERATURE;
    157e:	8c e3       	ldi	r24, 0x3C	; 60
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	a0 e0       	ldi	r26, 0x00	; 0
    1584:	b0 e0       	ldi	r27, 0x00	; 0
    1586:	80 93 6b 01 	sts	0x016B, r24
    158a:	90 93 6c 01 	sts	0x016C, r25
    158e:	a0 93 6d 01 	sts	0x016D, r26
    1592:	b0 93 6e 01 	sts	0x016E, r27
		}
	}
}
    1596:	cf 91       	pop	r28
    1598:	df 91       	pop	r29
    159a:	08 95       	ret

0000159c <downFunc>:
 * [Out]:             NONE
 *
 * [Returns]:         NONE
 **********************************************************************************/
void downFunc(void)
{
    159c:	df 93       	push	r29
    159e:	cf 93       	push	r28
    15a0:	cd b7       	in	r28, 0x3d	; 61
    15a2:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Change the state of g_downInterrupt_SWflag to be TRUE
	 * to inform the system that Down interrupt has occurred
	 */
	g_downInterrupt_SWflag = TRUE;
    15a4:	81 e0       	ldi	r24, 0x01	; 1
    15a6:	80 93 85 01 	sts	0x0185, r24
	/*
	 * return g_tick to its initial value be ready to
	 * count another MAXIMUM_NUMBER_OF_SECONDS
	 */
	g_tick = INITIAL_VALUE;
    15aa:	10 92 82 01 	sts	0x0182, r1

	if(g_firstClick == FALSE)
    15ae:	80 91 83 01 	lds	r24, 0x0183
    15b2:	88 23       	and	r24, r24
    15b4:	21 f4       	brne	.+8      	; 0x15be <downFunc+0x22>
		/*
		 * Change the state of g_firstClick to be true to display the
		 * Initial set temperature value one time only in the begin of the
		 * program
		 */
		g_firstClick = TRUE;
    15b6:	81 e0       	ldi	r24, 0x01	; 1
    15b8:	80 93 83 01 	sts	0x0183, r24
    15bc:	2c c0       	rjmp	.+88     	; 0x1616 <downFunc+0x7a>
	{
		/*
		 * Decreasing the value of the temperature by DECREASE_VALUE
		 * every click on Down button
		 */
		g_setTemprature = g_setTemprature - DECREASE_VALUE;
    15be:	80 91 6b 01 	lds	r24, 0x016B
    15c2:	90 91 6c 01 	lds	r25, 0x016C
    15c6:	a0 91 6d 01 	lds	r26, 0x016D
    15ca:	b0 91 6e 01 	lds	r27, 0x016E
    15ce:	05 97       	sbiw	r24, 0x05	; 5
    15d0:	a1 09       	sbc	r26, r1
    15d2:	b1 09       	sbc	r27, r1
    15d4:	80 93 6b 01 	sts	0x016B, r24
    15d8:	90 93 6c 01 	sts	0x016C, r25
    15dc:	a0 93 6d 01 	sts	0x016D, r26
    15e0:	b0 93 6e 01 	sts	0x016E, r27
		/*
		 * return the set temperature to its initial value
		 * when the decreasing of set temperature is below
		 * the MINIMUM_SET_TEMPERATURE
		 */
		if(g_setTemprature < MINIMUM_SET_TEMPERATURE)
    15e4:	80 91 6b 01 	lds	r24, 0x016B
    15e8:	90 91 6c 01 	lds	r25, 0x016C
    15ec:	a0 91 6d 01 	lds	r26, 0x016D
    15f0:	b0 91 6e 01 	lds	r27, 0x016E
    15f4:	83 32       	cpi	r24, 0x23	; 35
    15f6:	91 05       	cpc	r25, r1
    15f8:	a1 05       	cpc	r26, r1
    15fa:	b1 05       	cpc	r27, r1
    15fc:	60 f4       	brcc	.+24     	; 0x1616 <downFunc+0x7a>
		{
			g_setTemprature = INITIAL_SET_TEMPERATURE;
    15fe:	8c e3       	ldi	r24, 0x3C	; 60
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	a0 e0       	ldi	r26, 0x00	; 0
    1604:	b0 e0       	ldi	r27, 0x00	; 0
    1606:	80 93 6b 01 	sts	0x016B, r24
    160a:	90 93 6c 01 	sts	0x016C, r25
    160e:	a0 93 6d 01 	sts	0x016D, r26
    1612:	b0 93 6e 01 	sts	0x016E, r27
		}
	}
}
    1616:	cf 91       	pop	r28
    1618:	df 91       	pop	r29
    161a:	08 95       	ret

0000161c <flashingTime>:
 * [Out]:            NONE
 *
 * [Returns]:        NONE
 **********************************************************************************/
void flashingTime(void)
{
    161c:	df 93       	push	r29
    161e:	cf 93       	push	r28
    1620:	cd b7       	in	r28, 0x3d	; 61
    1622:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
    1624:	80 91 82 01 	lds	r24, 0x0182
    1628:	8f 5f       	subi	r24, 0xFF	; 255
    162a:	80 93 82 01 	sts	0x0182, r24
}
    162e:	cf 91       	pop	r28
    1630:	df 91       	pop	r29
    1632:	08 95       	ret

00001634 <store_inMemory>:
 * [Out]:             NONE
 *
 * [Returns]:         NONE
 **********************************************************************************/
void store_inMemory(uint32 temperature)
{
    1634:	df 93       	push	r29
    1636:	cf 93       	push	r28
    1638:	cd b7       	in	r28, 0x3d	; 61
    163a:	de b7       	in	r29, 0x3e	; 62
    163c:	a0 97       	sbiw	r28, 0x20	; 32
    163e:	0f b6       	in	r0, 0x3f	; 63
    1640:	f8 94       	cli
    1642:	de bf       	out	0x3e, r29	; 62
    1644:	0f be       	out	0x3f, r0	; 63
    1646:	cd bf       	out	0x3d, r28	; 61
    1648:	6d 8f       	std	Y+29, r22	; 0x1d
    164a:	7e 8f       	std	Y+30, r23	; 0x1e
    164c:	8f 8f       	std	Y+31, r24	; 0x1f
    164e:	98 a3       	std	Y+32, r25	; 0x20
	/*
	 * write the first digit of the temperature in
	 * the external memory
	 */
	EEPROM_writeByte(FIRST_ADDRESS_TO_STORE, temperature%10);
    1650:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1652:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1654:	af 8d       	ldd	r26, Y+31	; 0x1f
    1656:	b8 a1       	ldd	r27, Y+32	; 0x20
    1658:	2a e0       	ldi	r18, 0x0A	; 10
    165a:	30 e0       	ldi	r19, 0x00	; 0
    165c:	40 e0       	ldi	r20, 0x00	; 0
    165e:	50 e0       	ldi	r21, 0x00	; 0
    1660:	bc 01       	movw	r22, r24
    1662:	cd 01       	movw	r24, r26
    1664:	0e 94 1a 1c 	call	0x3834	; 0x3834 <__udivmodsi4>
    1668:	dc 01       	movw	r26, r24
    166a:	cb 01       	movw	r24, r22
    166c:	28 2f       	mov	r18, r24
    166e:	80 e0       	ldi	r24, 0x00	; 0
    1670:	91 e0       	ldi	r25, 0x01	; 1
    1672:	62 2f       	mov	r22, r18
    1674:	0e 94 48 0c 	call	0x1890	; 0x1890 <EEPROM_writeByte>
    1678:	80 e0       	ldi	r24, 0x00	; 0
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	a0 ea       	ldi	r26, 0xA0	; 160
    167e:	b2 e4       	ldi	r27, 0x42	; 66
    1680:	89 8f       	std	Y+25, r24	; 0x19
    1682:	9a 8f       	std	Y+26, r25	; 0x1a
    1684:	ab 8f       	std	Y+27, r26	; 0x1b
    1686:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1688:	69 8d       	ldd	r22, Y+25	; 0x19
    168a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    168c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    168e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1690:	20 e0       	ldi	r18, 0x00	; 0
    1692:	30 e0       	ldi	r19, 0x00	; 0
    1694:	4a e7       	ldi	r20, 0x7A	; 122
    1696:	53 e4       	ldi	r21, 0x43	; 67
    1698:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    169c:	dc 01       	movw	r26, r24
    169e:	cb 01       	movw	r24, r22
    16a0:	8d 8b       	std	Y+21, r24	; 0x15
    16a2:	9e 8b       	std	Y+22, r25	; 0x16
    16a4:	af 8b       	std	Y+23, r26	; 0x17
    16a6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    16a8:	6d 89       	ldd	r22, Y+21	; 0x15
    16aa:	7e 89       	ldd	r23, Y+22	; 0x16
    16ac:	8f 89       	ldd	r24, Y+23	; 0x17
    16ae:	98 8d       	ldd	r25, Y+24	; 0x18
    16b0:	20 e0       	ldi	r18, 0x00	; 0
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	40 e8       	ldi	r20, 0x80	; 128
    16b6:	5f e3       	ldi	r21, 0x3F	; 63
    16b8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    16bc:	88 23       	and	r24, r24
    16be:	2c f4       	brge	.+10     	; 0x16ca <store_inMemory+0x96>
		__ticks = 1;
    16c0:	81 e0       	ldi	r24, 0x01	; 1
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	9c 8b       	std	Y+20, r25	; 0x14
    16c6:	8b 8b       	std	Y+19, r24	; 0x13
    16c8:	3f c0       	rjmp	.+126    	; 0x1748 <store_inMemory+0x114>
	else if (__tmp > 65535)
    16ca:	6d 89       	ldd	r22, Y+21	; 0x15
    16cc:	7e 89       	ldd	r23, Y+22	; 0x16
    16ce:	8f 89       	ldd	r24, Y+23	; 0x17
    16d0:	98 8d       	ldd	r25, Y+24	; 0x18
    16d2:	20 e0       	ldi	r18, 0x00	; 0
    16d4:	3f ef       	ldi	r19, 0xFF	; 255
    16d6:	4f e7       	ldi	r20, 0x7F	; 127
    16d8:	57 e4       	ldi	r21, 0x47	; 71
    16da:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    16de:	18 16       	cp	r1, r24
    16e0:	4c f5       	brge	.+82     	; 0x1734 <store_inMemory+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16e2:	69 8d       	ldd	r22, Y+25	; 0x19
    16e4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16ea:	20 e0       	ldi	r18, 0x00	; 0
    16ec:	30 e0       	ldi	r19, 0x00	; 0
    16ee:	40 e2       	ldi	r20, 0x20	; 32
    16f0:	51 e4       	ldi	r21, 0x41	; 65
    16f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16f6:	dc 01       	movw	r26, r24
    16f8:	cb 01       	movw	r24, r22
    16fa:	bc 01       	movw	r22, r24
    16fc:	cd 01       	movw	r24, r26
    16fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1702:	dc 01       	movw	r26, r24
    1704:	cb 01       	movw	r24, r22
    1706:	9c 8b       	std	Y+20, r25	; 0x14
    1708:	8b 8b       	std	Y+19, r24	; 0x13
    170a:	0f c0       	rjmp	.+30     	; 0x172a <store_inMemory+0xf6>
    170c:	89 e1       	ldi	r24, 0x19	; 25
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	9a 8b       	std	Y+18, r25	; 0x12
    1712:	89 8b       	std	Y+17, r24	; 0x11
    1714:	89 89       	ldd	r24, Y+17	; 0x11
    1716:	9a 89       	ldd	r25, Y+18	; 0x12
    1718:	01 97       	sbiw	r24, 0x01	; 1
    171a:	f1 f7       	brne	.-4      	; 0x1718 <store_inMemory+0xe4>
    171c:	9a 8b       	std	Y+18, r25	; 0x12
    171e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1720:	8b 89       	ldd	r24, Y+19	; 0x13
    1722:	9c 89       	ldd	r25, Y+20	; 0x14
    1724:	01 97       	sbiw	r24, 0x01	; 1
    1726:	9c 8b       	std	Y+20, r25	; 0x14
    1728:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    172a:	8b 89       	ldd	r24, Y+19	; 0x13
    172c:	9c 89       	ldd	r25, Y+20	; 0x14
    172e:	00 97       	sbiw	r24, 0x00	; 0
    1730:	69 f7       	brne	.-38     	; 0x170c <store_inMemory+0xd8>
    1732:	14 c0       	rjmp	.+40     	; 0x175c <store_inMemory+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1734:	6d 89       	ldd	r22, Y+21	; 0x15
    1736:	7e 89       	ldd	r23, Y+22	; 0x16
    1738:	8f 89       	ldd	r24, Y+23	; 0x17
    173a:	98 8d       	ldd	r25, Y+24	; 0x18
    173c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1740:	dc 01       	movw	r26, r24
    1742:	cb 01       	movw	r24, r22
    1744:	9c 8b       	std	Y+20, r25	; 0x14
    1746:	8b 8b       	std	Y+19, r24	; 0x13
    1748:	8b 89       	ldd	r24, Y+19	; 0x13
    174a:	9c 89       	ldd	r25, Y+20	; 0x14
    174c:	98 8b       	std	Y+16, r25	; 0x10
    174e:	8f 87       	std	Y+15, r24	; 0x0f
    1750:	8f 85       	ldd	r24, Y+15	; 0x0f
    1752:	98 89       	ldd	r25, Y+16	; 0x10
    1754:	01 97       	sbiw	r24, 0x01	; 1
    1756:	f1 f7       	brne	.-4      	; 0x1754 <store_inMemory+0x120>
    1758:	98 8b       	std	Y+16, r25	; 0x10
    175a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(EEPROM_WRITE_DELAY_VALUE);
	/*
	 * write the second digit of the temperature in
	 * the external memory
	 */
	EEPROM_writeByte(SECOND_ADDRESS_TO_STORE, temperature/10);
    175c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    175e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1760:	af 8d       	ldd	r26, Y+31	; 0x1f
    1762:	b8 a1       	ldd	r27, Y+32	; 0x20
    1764:	2a e0       	ldi	r18, 0x0A	; 10
    1766:	30 e0       	ldi	r19, 0x00	; 0
    1768:	40 e0       	ldi	r20, 0x00	; 0
    176a:	50 e0       	ldi	r21, 0x00	; 0
    176c:	bc 01       	movw	r22, r24
    176e:	cd 01       	movw	r24, r26
    1770:	0e 94 1a 1c 	call	0x3834	; 0x3834 <__udivmodsi4>
    1774:	da 01       	movw	r26, r20
    1776:	c9 01       	movw	r24, r18
    1778:	28 2f       	mov	r18, r24
    177a:	81 e0       	ldi	r24, 0x01	; 1
    177c:	91 e0       	ldi	r25, 0x01	; 1
    177e:	62 2f       	mov	r22, r18
    1780:	0e 94 48 0c 	call	0x1890	; 0x1890 <EEPROM_writeByte>
    1784:	80 e0       	ldi	r24, 0x00	; 0
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	a0 ea       	ldi	r26, 0xA0	; 160
    178a:	b2 e4       	ldi	r27, 0x42	; 66
    178c:	8b 87       	std	Y+11, r24	; 0x0b
    178e:	9c 87       	std	Y+12, r25	; 0x0c
    1790:	ad 87       	std	Y+13, r26	; 0x0d
    1792:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1794:	6b 85       	ldd	r22, Y+11	; 0x0b
    1796:	7c 85       	ldd	r23, Y+12	; 0x0c
    1798:	8d 85       	ldd	r24, Y+13	; 0x0d
    179a:	9e 85       	ldd	r25, Y+14	; 0x0e
    179c:	20 e0       	ldi	r18, 0x00	; 0
    179e:	30 e0       	ldi	r19, 0x00	; 0
    17a0:	4a e7       	ldi	r20, 0x7A	; 122
    17a2:	53 e4       	ldi	r21, 0x43	; 67
    17a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17a8:	dc 01       	movw	r26, r24
    17aa:	cb 01       	movw	r24, r22
    17ac:	8f 83       	std	Y+7, r24	; 0x07
    17ae:	98 87       	std	Y+8, r25	; 0x08
    17b0:	a9 87       	std	Y+9, r26	; 0x09
    17b2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17b4:	6f 81       	ldd	r22, Y+7	; 0x07
    17b6:	78 85       	ldd	r23, Y+8	; 0x08
    17b8:	89 85       	ldd	r24, Y+9	; 0x09
    17ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    17bc:	20 e0       	ldi	r18, 0x00	; 0
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	40 e8       	ldi	r20, 0x80	; 128
    17c2:	5f e3       	ldi	r21, 0x3F	; 63
    17c4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    17c8:	88 23       	and	r24, r24
    17ca:	2c f4       	brge	.+10     	; 0x17d6 <store_inMemory+0x1a2>
		__ticks = 1;
    17cc:	81 e0       	ldi	r24, 0x01	; 1
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	9e 83       	std	Y+6, r25	; 0x06
    17d2:	8d 83       	std	Y+5, r24	; 0x05
    17d4:	3f c0       	rjmp	.+126    	; 0x1854 <store_inMemory+0x220>
	else if (__tmp > 65535)
    17d6:	6f 81       	ldd	r22, Y+7	; 0x07
    17d8:	78 85       	ldd	r23, Y+8	; 0x08
    17da:	89 85       	ldd	r24, Y+9	; 0x09
    17dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    17de:	20 e0       	ldi	r18, 0x00	; 0
    17e0:	3f ef       	ldi	r19, 0xFF	; 255
    17e2:	4f e7       	ldi	r20, 0x7F	; 127
    17e4:	57 e4       	ldi	r21, 0x47	; 71
    17e6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    17ea:	18 16       	cp	r1, r24
    17ec:	4c f5       	brge	.+82     	; 0x1840 <store_inMemory+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    17f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    17f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    17f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    17f6:	20 e0       	ldi	r18, 0x00	; 0
    17f8:	30 e0       	ldi	r19, 0x00	; 0
    17fa:	40 e2       	ldi	r20, 0x20	; 32
    17fc:	51 e4       	ldi	r21, 0x41	; 65
    17fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1802:	dc 01       	movw	r26, r24
    1804:	cb 01       	movw	r24, r22
    1806:	bc 01       	movw	r22, r24
    1808:	cd 01       	movw	r24, r26
    180a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    180e:	dc 01       	movw	r26, r24
    1810:	cb 01       	movw	r24, r22
    1812:	9e 83       	std	Y+6, r25	; 0x06
    1814:	8d 83       	std	Y+5, r24	; 0x05
    1816:	0f c0       	rjmp	.+30     	; 0x1836 <store_inMemory+0x202>
    1818:	89 e1       	ldi	r24, 0x19	; 25
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	9c 83       	std	Y+4, r25	; 0x04
    181e:	8b 83       	std	Y+3, r24	; 0x03
    1820:	8b 81       	ldd	r24, Y+3	; 0x03
    1822:	9c 81       	ldd	r25, Y+4	; 0x04
    1824:	01 97       	sbiw	r24, 0x01	; 1
    1826:	f1 f7       	brne	.-4      	; 0x1824 <store_inMemory+0x1f0>
    1828:	9c 83       	std	Y+4, r25	; 0x04
    182a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    182c:	8d 81       	ldd	r24, Y+5	; 0x05
    182e:	9e 81       	ldd	r25, Y+6	; 0x06
    1830:	01 97       	sbiw	r24, 0x01	; 1
    1832:	9e 83       	std	Y+6, r25	; 0x06
    1834:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1836:	8d 81       	ldd	r24, Y+5	; 0x05
    1838:	9e 81       	ldd	r25, Y+6	; 0x06
    183a:	00 97       	sbiw	r24, 0x00	; 0
    183c:	69 f7       	brne	.-38     	; 0x1818 <store_inMemory+0x1e4>
    183e:	14 c0       	rjmp	.+40     	; 0x1868 <store_inMemory+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1840:	6f 81       	ldd	r22, Y+7	; 0x07
    1842:	78 85       	ldd	r23, Y+8	; 0x08
    1844:	89 85       	ldd	r24, Y+9	; 0x09
    1846:	9a 85       	ldd	r25, Y+10	; 0x0a
    1848:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    184c:	dc 01       	movw	r26, r24
    184e:	cb 01       	movw	r24, r22
    1850:	9e 83       	std	Y+6, r25	; 0x06
    1852:	8d 83       	std	Y+5, r24	; 0x05
    1854:	8d 81       	ldd	r24, Y+5	; 0x05
    1856:	9e 81       	ldd	r25, Y+6	; 0x06
    1858:	9a 83       	std	Y+2, r25	; 0x02
    185a:	89 83       	std	Y+1, r24	; 0x01
    185c:	89 81       	ldd	r24, Y+1	; 0x01
    185e:	9a 81       	ldd	r25, Y+2	; 0x02
    1860:	01 97       	sbiw	r24, 0x01	; 1
    1862:	f1 f7       	brne	.-4      	; 0x1860 <store_inMemory+0x22c>
    1864:	9a 83       	std	Y+2, r25	; 0x02
    1866:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * wait some seconds to give the memory time to write
	 */
	_delay_ms(EEPROM_WRITE_DELAY_VALUE);
}
    1868:	a0 96       	adiw	r28, 0x20	; 32
    186a:	0f b6       	in	r0, 0x3f	; 63
    186c:	f8 94       	cli
    186e:	de bf       	out	0x3e, r29	; 62
    1870:	0f be       	out	0x3f, r0	; 63
    1872:	cd bf       	out	0x3d, r28	; 61
    1874:	cf 91       	pop	r28
    1876:	df 91       	pop	r29
    1878:	08 95       	ret

0000187a <EEPROM_init>:


TWI_ConfigType init = {0X02, 0X01, TWPS_0};

void EEPROM_init(void)
{
    187a:	df 93       	push	r29
    187c:	cf 93       	push	r28
    187e:	cd b7       	in	r28, 0x3d	; 61
    1880:	de b7       	in	r29, 0x3e	; 62
	/* just initialize the I2C(TWI) module inside the MC */
	TWI_init( &init );
    1882:	88 e6       	ldi	r24, 0x68	; 104
    1884:	91 e0       	ldi	r25, 0x01	; 1
    1886:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <TWI_init>
}
    188a:	cf 91       	pop	r28
    188c:	df 91       	pop	r29
    188e:	08 95       	ret

00001890 <EEPROM_writeByte>:

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    1890:	df 93       	push	r29
    1892:	cf 93       	push	r28
    1894:	00 d0       	rcall	.+0      	; 0x1896 <EEPROM_writeByte+0x6>
    1896:	00 d0       	rcall	.+0      	; 0x1898 <EEPROM_writeByte+0x8>
    1898:	cd b7       	in	r28, 0x3d	; 61
    189a:	de b7       	in	r29, 0x3e	; 62
    189c:	9a 83       	std	Y+2, r25	; 0x02
    189e:	89 83       	std	Y+1, r24	; 0x01
    18a0:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    18a2:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <TWI_start>
    if (TWI_getStatus() != TW_START)
    18a6:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <TWI_getStatus>
    18aa:	88 30       	cpi	r24, 0x08	; 8
    18ac:	11 f0       	breq	.+4      	; 0x18b2 <EEPROM_writeByte+0x22>
        return ERROR;
    18ae:	1c 82       	std	Y+4, r1	; 0x04
    18b0:	28 c0       	rjmp	.+80     	; 0x1902 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_write((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    18b2:	89 81       	ldd	r24, Y+1	; 0x01
    18b4:	9a 81       	ldd	r25, Y+2	; 0x02
    18b6:	80 70       	andi	r24, 0x00	; 0
    18b8:	97 70       	andi	r25, 0x07	; 7
    18ba:	88 0f       	add	r24, r24
    18bc:	89 2f       	mov	r24, r25
    18be:	88 1f       	adc	r24, r24
    18c0:	99 0b       	sbc	r25, r25
    18c2:	91 95       	neg	r25
    18c4:	80 6a       	ori	r24, 0xA0	; 160
    18c6:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
    18ca:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <TWI_getStatus>
    18ce:	88 31       	cpi	r24, 0x18	; 24
    18d0:	11 f0       	breq	.+4      	; 0x18d6 <EEPROM_writeByte+0x46>
        return ERROR; 
    18d2:	1c 82       	std	Y+4, r1	; 0x04
    18d4:	16 c0       	rjmp	.+44     	; 0x1902 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_write((uint8)(u16addr));
    18d6:	89 81       	ldd	r24, Y+1	; 0x01
    18d8:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
    18dc:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <TWI_getStatus>
    18e0:	88 32       	cpi	r24, 0x28	; 40
    18e2:	11 f0       	breq	.+4      	; 0x18e8 <EEPROM_writeByte+0x58>
        return ERROR;
    18e4:	1c 82       	std	Y+4, r1	; 0x04
    18e6:	0d c0       	rjmp	.+26     	; 0x1902 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_write(u8data);
    18e8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ea:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
    18ee:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <TWI_getStatus>
    18f2:	88 32       	cpi	r24, 0x28	; 40
    18f4:	11 f0       	breq	.+4      	; 0x18fa <EEPROM_writeByte+0x6a>
        return ERROR;
    18f6:	1c 82       	std	Y+4, r1	; 0x04
    18f8:	04 c0       	rjmp	.+8      	; 0x1902 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    18fa:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <TWI_stop>
	
    return SUCCESS;
    18fe:	81 e0       	ldi	r24, 0x01	; 1
    1900:	8c 83       	std	Y+4, r24	; 0x04
    1902:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1904:	0f 90       	pop	r0
    1906:	0f 90       	pop	r0
    1908:	0f 90       	pop	r0
    190a:	0f 90       	pop	r0
    190c:	cf 91       	pop	r28
    190e:	df 91       	pop	r29
    1910:	08 95       	ret

00001912 <EEPROM_readByte>:



uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    1912:	df 93       	push	r29
    1914:	cf 93       	push	r28
    1916:	00 d0       	rcall	.+0      	; 0x1918 <EEPROM_readByte+0x6>
    1918:	00 d0       	rcall	.+0      	; 0x191a <EEPROM_readByte+0x8>
    191a:	0f 92       	push	r0
    191c:	cd b7       	in	r28, 0x3d	; 61
    191e:	de b7       	in	r29, 0x3e	; 62
    1920:	9a 83       	std	Y+2, r25	; 0x02
    1922:	89 83       	std	Y+1, r24	; 0x01
    1924:	7c 83       	std	Y+4, r23	; 0x04
    1926:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1928:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <TWI_start>
    if (TWI_getStatus() != TW_START)
    192c:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <TWI_getStatus>
    1930:	88 30       	cpi	r24, 0x08	; 8
    1932:	11 f0       	breq	.+4      	; 0x1938 <EEPROM_readByte+0x26>
        return ERROR;
    1934:	1d 82       	std	Y+5, r1	; 0x05
    1936:	44 c0       	rjmp	.+136    	; 0x19c0 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    1938:	89 81       	ldd	r24, Y+1	; 0x01
    193a:	9a 81       	ldd	r25, Y+2	; 0x02
    193c:	80 70       	andi	r24, 0x00	; 0
    193e:	97 70       	andi	r25, 0x07	; 7
    1940:	88 0f       	add	r24, r24
    1942:	89 2f       	mov	r24, r25
    1944:	88 1f       	adc	r24, r24
    1946:	99 0b       	sbc	r25, r25
    1948:	91 95       	neg	r25
    194a:	80 6a       	ori	r24, 0xA0	; 160
    194c:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
    1950:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <TWI_getStatus>
    1954:	88 31       	cpi	r24, 0x18	; 24
    1956:	11 f0       	breq	.+4      	; 0x195c <EEPROM_readByte+0x4a>
        return ERROR;
    1958:	1d 82       	std	Y+5, r1	; 0x05
    195a:	32 c0       	rjmp	.+100    	; 0x19c0 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_write((uint8)(u16addr));
    195c:	89 81       	ldd	r24, Y+1	; 0x01
    195e:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
    1962:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <TWI_getStatus>
    1966:	88 32       	cpi	r24, 0x28	; 40
    1968:	11 f0       	breq	.+4      	; 0x196e <EEPROM_readByte+0x5c>
        return ERROR;
    196a:	1d 82       	std	Y+5, r1	; 0x05
    196c:	29 c0       	rjmp	.+82     	; 0x19c0 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    196e:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <TWI_start>
    if (TWI_getStatus() != TW_REP_START)
    1972:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <TWI_getStatus>
    1976:	80 31       	cpi	r24, 0x10	; 16
    1978:	11 f0       	breq	.+4      	; 0x197e <EEPROM_readByte+0x6c>
        return ERROR;
    197a:	1d 82       	std	Y+5, r1	; 0x05
    197c:	21 c0       	rjmp	.+66     	; 0x19c0 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    197e:	89 81       	ldd	r24, Y+1	; 0x01
    1980:	9a 81       	ldd	r25, Y+2	; 0x02
    1982:	80 70       	andi	r24, 0x00	; 0
    1984:	97 70       	andi	r25, 0x07	; 7
    1986:	88 0f       	add	r24, r24
    1988:	89 2f       	mov	r24, r25
    198a:	88 1f       	adc	r24, r24
    198c:	99 0b       	sbc	r25, r25
    198e:	91 95       	neg	r25
    1990:	81 6a       	ori	r24, 0xA1	; 161
    1992:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_R_ACK)
    1996:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <TWI_getStatus>
    199a:	80 34       	cpi	r24, 0x40	; 64
    199c:	11 f0       	breq	.+4      	; 0x19a2 <EEPROM_readByte+0x90>
        return ERROR;
    199e:	1d 82       	std	Y+5, r1	; 0x05
    19a0:	0f c0       	rjmp	.+30     	; 0x19c0 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readWithNACK();
    19a2:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <TWI_readWithNACK>
    19a6:	eb 81       	ldd	r30, Y+3	; 0x03
    19a8:	fc 81       	ldd	r31, Y+4	; 0x04
    19aa:	80 83       	st	Z, r24
    if (TWI_getStatus() != TW_MR_DATA_NACK)
    19ac:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <TWI_getStatus>
    19b0:	88 35       	cpi	r24, 0x58	; 88
    19b2:	11 f0       	breq	.+4      	; 0x19b8 <EEPROM_readByte+0xa6>
        return ERROR;
    19b4:	1d 82       	std	Y+5, r1	; 0x05
    19b6:	04 c0       	rjmp	.+8      	; 0x19c0 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    19b8:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <TWI_stop>
    return SUCCESS;
    19bc:	81 e0       	ldi	r24, 0x01	; 1
    19be:	8d 83       	std	Y+5, r24	; 0x05
    19c0:	8d 81       	ldd	r24, Y+5	; 0x05
}
    19c2:	0f 90       	pop	r0
    19c4:	0f 90       	pop	r0
    19c6:	0f 90       	pop	r0
    19c8:	0f 90       	pop	r0
    19ca:	0f 90       	pop	r0
    19cc:	cf 91       	pop	r28
    19ce:	df 91       	pop	r29
    19d0:	08 95       	ret

000019d2 <__vector_1>:
 *                            Interrupt0                                  *
 * ************************************************************************/


ISR(INT0_vect)
{
    19d2:	1f 92       	push	r1
    19d4:	0f 92       	push	r0
    19d6:	0f b6       	in	r0, 0x3f	; 63
    19d8:	0f 92       	push	r0
    19da:	11 24       	eor	r1, r1
    19dc:	2f 93       	push	r18
    19de:	3f 93       	push	r19
    19e0:	4f 93       	push	r20
    19e2:	5f 93       	push	r21
    19e4:	6f 93       	push	r22
    19e6:	7f 93       	push	r23
    19e8:	8f 93       	push	r24
    19ea:	9f 93       	push	r25
    19ec:	af 93       	push	r26
    19ee:	bf 93       	push	r27
    19f0:	ef 93       	push	r30
    19f2:	ff 93       	push	r31
    19f4:	df 93       	push	r29
    19f6:	cf 93       	push	r28
    19f8:	cd b7       	in	r28, 0x3d	; 61
    19fa:	de b7       	in	r29, 0x3e	; 62
	if(g_INT0_callBackPtr != NULL_PTR)
    19fc:	80 91 7c 01 	lds	r24, 0x017C
    1a00:	90 91 7d 01 	lds	r25, 0x017D
    1a04:	00 97       	sbiw	r24, 0x00	; 0
    1a06:	29 f0       	breq	.+10     	; 0x1a12 <__vector_1+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_INT0_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1a08:	e0 91 7c 01 	lds	r30, 0x017C
    1a0c:	f0 91 7d 01 	lds	r31, 0x017D
    1a10:	09 95       	icall
	}
}
    1a12:	cf 91       	pop	r28
    1a14:	df 91       	pop	r29
    1a16:	ff 91       	pop	r31
    1a18:	ef 91       	pop	r30
    1a1a:	bf 91       	pop	r27
    1a1c:	af 91       	pop	r26
    1a1e:	9f 91       	pop	r25
    1a20:	8f 91       	pop	r24
    1a22:	7f 91       	pop	r23
    1a24:	6f 91       	pop	r22
    1a26:	5f 91       	pop	r21
    1a28:	4f 91       	pop	r20
    1a2a:	3f 91       	pop	r19
    1a2c:	2f 91       	pop	r18
    1a2e:	0f 90       	pop	r0
    1a30:	0f be       	out	0x3f, r0	; 63
    1a32:	0f 90       	pop	r0
    1a34:	1f 90       	pop	r1
    1a36:	18 95       	reti

00001a38 <__vector_2>:
/**************************************************************************
 *                            Interrupt1                                  *
 * ************************************************************************/

ISR(INT1_vect)
{
    1a38:	1f 92       	push	r1
    1a3a:	0f 92       	push	r0
    1a3c:	0f b6       	in	r0, 0x3f	; 63
    1a3e:	0f 92       	push	r0
    1a40:	11 24       	eor	r1, r1
    1a42:	2f 93       	push	r18
    1a44:	3f 93       	push	r19
    1a46:	4f 93       	push	r20
    1a48:	5f 93       	push	r21
    1a4a:	6f 93       	push	r22
    1a4c:	7f 93       	push	r23
    1a4e:	8f 93       	push	r24
    1a50:	9f 93       	push	r25
    1a52:	af 93       	push	r26
    1a54:	bf 93       	push	r27
    1a56:	ef 93       	push	r30
    1a58:	ff 93       	push	r31
    1a5a:	df 93       	push	r29
    1a5c:	cf 93       	push	r28
    1a5e:	cd b7       	in	r28, 0x3d	; 61
    1a60:	de b7       	in	r29, 0x3e	; 62
	if(g_INT1_callBackPtr != NULL_PTR)
    1a62:	80 91 7e 01 	lds	r24, 0x017E
    1a66:	90 91 7f 01 	lds	r25, 0x017F
    1a6a:	00 97       	sbiw	r24, 0x00	; 0
    1a6c:	29 f0       	breq	.+10     	; 0x1a78 <__vector_2+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_INT1_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1a6e:	e0 91 7e 01 	lds	r30, 0x017E
    1a72:	f0 91 7f 01 	lds	r31, 0x017F
    1a76:	09 95       	icall
	}
}
    1a78:	cf 91       	pop	r28
    1a7a:	df 91       	pop	r29
    1a7c:	ff 91       	pop	r31
    1a7e:	ef 91       	pop	r30
    1a80:	bf 91       	pop	r27
    1a82:	af 91       	pop	r26
    1a84:	9f 91       	pop	r25
    1a86:	8f 91       	pop	r24
    1a88:	7f 91       	pop	r23
    1a8a:	6f 91       	pop	r22
    1a8c:	5f 91       	pop	r21
    1a8e:	4f 91       	pop	r20
    1a90:	3f 91       	pop	r19
    1a92:	2f 91       	pop	r18
    1a94:	0f 90       	pop	r0
    1a96:	0f be       	out	0x3f, r0	; 63
    1a98:	0f 90       	pop	r0
    1a9a:	1f 90       	pop	r1
    1a9c:	18 95       	reti

00001a9e <__vector_18>:

/**************************************************************************
 *                            Interrupt2                                  *
 * ************************************************************************/
ISR(INT2_vect)
{
    1a9e:	1f 92       	push	r1
    1aa0:	0f 92       	push	r0
    1aa2:	0f b6       	in	r0, 0x3f	; 63
    1aa4:	0f 92       	push	r0
    1aa6:	11 24       	eor	r1, r1
    1aa8:	2f 93       	push	r18
    1aaa:	3f 93       	push	r19
    1aac:	4f 93       	push	r20
    1aae:	5f 93       	push	r21
    1ab0:	6f 93       	push	r22
    1ab2:	7f 93       	push	r23
    1ab4:	8f 93       	push	r24
    1ab6:	9f 93       	push	r25
    1ab8:	af 93       	push	r26
    1aba:	bf 93       	push	r27
    1abc:	ef 93       	push	r30
    1abe:	ff 93       	push	r31
    1ac0:	df 93       	push	r29
    1ac2:	cf 93       	push	r28
    1ac4:	cd b7       	in	r28, 0x3d	; 61
    1ac6:	de b7       	in	r29, 0x3e	; 62
	if(g_INT2_callBackPtr != NULL_PTR)
    1ac8:	80 91 80 01 	lds	r24, 0x0180
    1acc:	90 91 81 01 	lds	r25, 0x0181
    1ad0:	00 97       	sbiw	r24, 0x00	; 0
    1ad2:	29 f0       	breq	.+10     	; 0x1ade <__vector_18+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_INT2_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1ad4:	e0 91 80 01 	lds	r30, 0x0180
    1ad8:	f0 91 81 01 	lds	r31, 0x0181
    1adc:	09 95       	icall
	}
}
    1ade:	cf 91       	pop	r28
    1ae0:	df 91       	pop	r29
    1ae2:	ff 91       	pop	r31
    1ae4:	ef 91       	pop	r30
    1ae6:	bf 91       	pop	r27
    1ae8:	af 91       	pop	r26
    1aea:	9f 91       	pop	r25
    1aec:	8f 91       	pop	r24
    1aee:	7f 91       	pop	r23
    1af0:	6f 91       	pop	r22
    1af2:	5f 91       	pop	r21
    1af4:	4f 91       	pop	r20
    1af6:	3f 91       	pop	r19
    1af8:	2f 91       	pop	r18
    1afa:	0f 90       	pop	r0
    1afc:	0f be       	out	0x3f, r0	; 63
    1afe:	0f 90       	pop	r0
    1b00:	1f 90       	pop	r1
    1b02:	18 95       	reti

00001b04 <External_Interrupt_init>:
 *
 * [Returns]:      NONE
 ***************************************************************************************************/

void External_Interrupt_init(const External_Interrupt_ConfigType* Config_Ptr)
{
    1b04:	df 93       	push	r29
    1b06:	cf 93       	push	r28
    1b08:	00 d0       	rcall	.+0      	; 0x1b0a <External_Interrupt_init+0x6>
    1b0a:	00 d0       	rcall	.+0      	; 0x1b0c <External_Interrupt_init+0x8>
    1b0c:	cd b7       	in	r28, 0x3d	; 61
    1b0e:	de b7       	in	r29, 0x3e	; 62
    1b10:	9a 83       	std	Y+2, r25	; 0x02
    1b12:	89 83       	std	Y+1, r24	; 0x01

	switch(Config_Ptr->INT_ID)
    1b14:	e9 81       	ldd	r30, Y+1	; 0x01
    1b16:	fa 81       	ldd	r31, Y+2	; 0x02
    1b18:	80 81       	ld	r24, Z
    1b1a:	28 2f       	mov	r18, r24
    1b1c:	30 e0       	ldi	r19, 0x00	; 0
    1b1e:	3c 83       	std	Y+4, r19	; 0x04
    1b20:	2b 83       	std	Y+3, r18	; 0x03
    1b22:	8b 81       	ldd	r24, Y+3	; 0x03
    1b24:	9c 81       	ldd	r25, Y+4	; 0x04
    1b26:	81 30       	cpi	r24, 0x01	; 1
    1b28:	91 05       	cpc	r25, r1
    1b2a:	c1 f1       	breq	.+112    	; 0x1b9c <External_Interrupt_init+0x98>
    1b2c:	eb 81       	ldd	r30, Y+3	; 0x03
    1b2e:	fc 81       	ldd	r31, Y+4	; 0x04
    1b30:	e2 30       	cpi	r30, 0x02	; 2
    1b32:	f1 05       	cpc	r31, r1
    1b34:	09 f4       	brne	.+2      	; 0x1b38 <External_Interrupt_init+0x34>
    1b36:	64 c0       	rjmp	.+200    	; 0x1c00 <External_Interrupt_init+0xfc>
    1b38:	2b 81       	ldd	r18, Y+3	; 0x03
    1b3a:	3c 81       	ldd	r19, Y+4	; 0x04
    1b3c:	21 15       	cp	r18, r1
    1b3e:	31 05       	cpc	r19, r1
    1b40:	09 f0       	breq	.+2      	; 0x1b44 <External_Interrupt_init+0x40>
    1b42:	8b c0       	rjmp	.+278    	; 0x1c5a <External_Interrupt_init+0x156>
	{

	case INTERRUPT0:

		/*configure pin of interrupt0 as input pin*/
		INTERRUPT0_DIRECTION_PORT = CLEAR_BIT(INTERRUPT0_DIRECTION_PORT, INTERRUPT0_PIN);
    1b44:	21 e3       	ldi	r18, 0x31	; 49
    1b46:	30 e0       	ldi	r19, 0x00	; 0
    1b48:	a1 e3       	ldi	r26, 0x31	; 49
    1b4a:	b0 e0       	ldi	r27, 0x00	; 0
    1b4c:	e1 e3       	ldi	r30, 0x31	; 49
    1b4e:	f0 e0       	ldi	r31, 0x00	; 0
    1b50:	80 81       	ld	r24, Z
    1b52:	8b 7f       	andi	r24, 0xFB	; 251
    1b54:	8c 93       	st	X, r24
    1b56:	8c 91       	ld	r24, X
    1b58:	f9 01       	movw	r30, r18
    1b5a:	80 83       	st	Z, r24
		/*static configuration of internal pull up resistance*/
#if (INTERNAL_PULL_UP_INT0 != DISABLE)
		{

			/*Activate internal pull up for interrupt 0*/
			INTERRUPT0_DATA_PORT = SET_BIT(INTERRUPT0_DATA_PORT, INTERRUPT0_PIN);
    1b5c:	22 e3       	ldi	r18, 0x32	; 50
    1b5e:	30 e0       	ldi	r19, 0x00	; 0
    1b60:	a2 e3       	ldi	r26, 0x32	; 50
    1b62:	b0 e0       	ldi	r27, 0x00	; 0
    1b64:	e2 e3       	ldi	r30, 0x32	; 50
    1b66:	f0 e0       	ldi	r31, 0x00	; 0
    1b68:	80 81       	ld	r24, Z
    1b6a:	84 60       	ori	r24, 0x04	; 4
    1b6c:	8c 93       	st	X, r24
    1b6e:	8c 91       	ld	r24, X
    1b70:	f9 01       	movw	r30, r18
    1b72:	80 83       	st	Z, r24
		}/*end of INTERNAL_PULL_UP_INT0  */
#endif


		/*configure the control edge for interrupt 0*/
		MCU_CONTROL_REGISTER = (MCU_CONTROL_REGISTER & 0XFC) | (Config_Ptr->INT_control) ;
    1b74:	a5 e5       	ldi	r26, 0x55	; 85
    1b76:	b0 e0       	ldi	r27, 0x00	; 0
    1b78:	e5 e5       	ldi	r30, 0x55	; 85
    1b7a:	f0 e0       	ldi	r31, 0x00	; 0
    1b7c:	80 81       	ld	r24, Z
    1b7e:	98 2f       	mov	r25, r24
    1b80:	9c 7f       	andi	r25, 0xFC	; 252
    1b82:	e9 81       	ldd	r30, Y+1	; 0x01
    1b84:	fa 81       	ldd	r31, Y+2	; 0x02
    1b86:	81 81       	ldd	r24, Z+1	; 0x01
    1b88:	89 2b       	or	r24, r25
    1b8a:	8c 93       	st	X, r24

		/*activate external interrupt 0 interrupt enable*/
		GENERAL_INTERRUPT_CONTROL_REGISTER = (GENERAL_INTERRUPT_CONTROL_REGISTER & 0XBF) | (1<<EXTRNAL_INTERRUPT0_ENABL_BIT);
    1b8c:	ab e5       	ldi	r26, 0x5B	; 91
    1b8e:	b0 e0       	ldi	r27, 0x00	; 0
    1b90:	eb e5       	ldi	r30, 0x5B	; 91
    1b92:	f0 e0       	ldi	r31, 0x00	; 0
    1b94:	80 81       	ld	r24, Z
    1b96:	80 64       	ori	r24, 0x40	; 64
    1b98:	8c 93       	st	X, r24
    1b9a:	5f c0       	rjmp	.+190    	; 0x1c5a <External_Interrupt_init+0x156>
		break;

	case INTERRUPT1:

		/*configure interrupt 1 pin as input pin*/
		INTERRUPT1_DIRECTION_PORT = CLEAR_BIT(INTERRUPT1_DIRECTION_PORT, INTERRUPT1_PIN);
    1b9c:	21 e3       	ldi	r18, 0x31	; 49
    1b9e:	30 e0       	ldi	r19, 0x00	; 0
    1ba0:	a1 e3       	ldi	r26, 0x31	; 49
    1ba2:	b0 e0       	ldi	r27, 0x00	; 0
    1ba4:	e1 e3       	ldi	r30, 0x31	; 49
    1ba6:	f0 e0       	ldi	r31, 0x00	; 0
    1ba8:	80 81       	ld	r24, Z
    1baa:	87 7f       	andi	r24, 0xF7	; 247
    1bac:	8c 93       	st	X, r24
    1bae:	8c 91       	ld	r24, X
    1bb0:	f9 01       	movw	r30, r18
    1bb2:	80 83       	st	Z, r24
		/*static configuration for the internal interrupt resistance*/
#if (INTERNAL_PULL_UP_INT1 != DISABLE)
		{

			/*Activate internal pull up for interrupt 0*/
			INTERRUPT1_DATA_PORT = SET_BIT(INTERRUPT1_DATA_PORT, INTERRUPT1_PIN);
    1bb4:	22 e3       	ldi	r18, 0x32	; 50
    1bb6:	30 e0       	ldi	r19, 0x00	; 0
    1bb8:	a2 e3       	ldi	r26, 0x32	; 50
    1bba:	b0 e0       	ldi	r27, 0x00	; 0
    1bbc:	e2 e3       	ldi	r30, 0x32	; 50
    1bbe:	f0 e0       	ldi	r31, 0x00	; 0
    1bc0:	80 81       	ld	r24, Z
    1bc2:	88 60       	ori	r24, 0x08	; 8
    1bc4:	8c 93       	st	X, r24
    1bc6:	8c 91       	ld	r24, X
    1bc8:	f9 01       	movw	r30, r18
    1bca:	80 83       	st	Z, r24
		}/*end of INTERNAL_PULL_UP_INT0  */
#endif


		/*configure control edge for interrupt 1*/
		MCU_CONTROL_REGISTER = (MCU_CONTROL_REGISTER & 0XF3) | ( (Config_Ptr->INT_control)<< INTERRUPT1_SENSE_CONTROL_BITS);
    1bcc:	a5 e5       	ldi	r26, 0x55	; 85
    1bce:	b0 e0       	ldi	r27, 0x00	; 0
    1bd0:	e5 e5       	ldi	r30, 0x55	; 85
    1bd2:	f0 e0       	ldi	r31, 0x00	; 0
    1bd4:	80 81       	ld	r24, Z
    1bd6:	28 2f       	mov	r18, r24
    1bd8:	23 7f       	andi	r18, 0xF3	; 243
    1bda:	e9 81       	ldd	r30, Y+1	; 0x01
    1bdc:	fa 81       	ldd	r31, Y+2	; 0x02
    1bde:	81 81       	ldd	r24, Z+1	; 0x01
    1be0:	88 2f       	mov	r24, r24
    1be2:	90 e0       	ldi	r25, 0x00	; 0
    1be4:	88 0f       	add	r24, r24
    1be6:	99 1f       	adc	r25, r25
    1be8:	88 0f       	add	r24, r24
    1bea:	99 1f       	adc	r25, r25
    1bec:	82 2b       	or	r24, r18
    1bee:	8c 93       	st	X, r24

		/*active external interrupt interrupt enable for interrupt 1*/
		GENERAL_INTERRUPT_CONTROL_REGISTER = (GENERAL_INTERRUPT_CONTROL_REGISTER & 0X7F) | (1<<EXTRNAL_INTERRUPT1_ENABL_BIT);
    1bf0:	ab e5       	ldi	r26, 0x5B	; 91
    1bf2:	b0 e0       	ldi	r27, 0x00	; 0
    1bf4:	eb e5       	ldi	r30, 0x5B	; 91
    1bf6:	f0 e0       	ldi	r31, 0x00	; 0
    1bf8:	80 81       	ld	r24, Z
    1bfa:	80 68       	ori	r24, 0x80	; 128
    1bfc:	8c 93       	st	X, r24
    1bfe:	2d c0       	rjmp	.+90     	; 0x1c5a <External_Interrupt_init+0x156>
		break;

	case INTERRUPT2:

		/*configure interrupt 2 pin as input pin */
		INTERRUPT2_DIRECTION_PORT = CLEAR_BIT(INTERRUPT2_DIRECTION_PORT, INTERRUPT2_PIN);
    1c00:	27 e3       	ldi	r18, 0x37	; 55
    1c02:	30 e0       	ldi	r19, 0x00	; 0
    1c04:	a7 e3       	ldi	r26, 0x37	; 55
    1c06:	b0 e0       	ldi	r27, 0x00	; 0
    1c08:	e7 e3       	ldi	r30, 0x37	; 55
    1c0a:	f0 e0       	ldi	r31, 0x00	; 0
    1c0c:	80 81       	ld	r24, Z
    1c0e:	8b 7f       	andi	r24, 0xFB	; 251
    1c10:	8c 93       	st	X, r24
    1c12:	8c 91       	ld	r24, X
    1c14:	f9 01       	movw	r30, r18
    1c16:	80 83       	st	Z, r24

		}/*end of INTERNAL_PULL_UP_INT0  */
#endif

		/*configure control edge for interrupt 2*/
		MCU_CONTROL_AND_STATUS_REGISTER = (MCU_CONTROL_AND_STATUS_REGISTER & 0XBF) | ( ((Config_Ptr->INT_control) & 0X01)<< ISC2);
    1c18:	a4 e5       	ldi	r26, 0x54	; 84
    1c1a:	b0 e0       	ldi	r27, 0x00	; 0
    1c1c:	e4 e5       	ldi	r30, 0x54	; 84
    1c1e:	f0 e0       	ldi	r31, 0x00	; 0
    1c20:	80 81       	ld	r24, Z
    1c22:	28 2f       	mov	r18, r24
    1c24:	2f 7b       	andi	r18, 0xBF	; 191
    1c26:	e9 81       	ldd	r30, Y+1	; 0x01
    1c28:	fa 81       	ldd	r31, Y+2	; 0x02
    1c2a:	81 81       	ldd	r24, Z+1	; 0x01
    1c2c:	88 2f       	mov	r24, r24
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	81 70       	andi	r24, 0x01	; 1
    1c32:	90 70       	andi	r25, 0x00	; 0
    1c34:	00 24       	eor	r0, r0
    1c36:	96 95       	lsr	r25
    1c38:	87 95       	ror	r24
    1c3a:	07 94       	ror	r0
    1c3c:	96 95       	lsr	r25
    1c3e:	87 95       	ror	r24
    1c40:	07 94       	ror	r0
    1c42:	98 2f       	mov	r25, r24
    1c44:	80 2d       	mov	r24, r0
    1c46:	82 2b       	or	r24, r18
    1c48:	8c 93       	st	X, r24

		/*Active external interrupt interrupt enable*/
		GENERAL_INTERRUPT_CONTROL_REGISTER = (GENERAL_INTERRUPT_CONTROL_REGISTER & 0XCF) | (1<<EXTRNAL_INTERRUPT2_ENABL_BIT);
    1c4a:	ab e5       	ldi	r26, 0x5B	; 91
    1c4c:	b0 e0       	ldi	r27, 0x00	; 0
    1c4e:	eb e5       	ldi	r30, 0x5B	; 91
    1c50:	f0 e0       	ldi	r31, 0x00	; 0
    1c52:	80 81       	ld	r24, Z
    1c54:	8f 7c       	andi	r24, 0xCF	; 207
    1c56:	80 62       	ori	r24, 0x20	; 32
    1c58:	8c 93       	st	X, r24
		break;


	}/*end of switch case*/

}/*end of External_Interrupt function*/
    1c5a:	0f 90       	pop	r0
    1c5c:	0f 90       	pop	r0
    1c5e:	0f 90       	pop	r0
    1c60:	0f 90       	pop	r0
    1c62:	cf 91       	pop	r28
    1c64:	df 91       	pop	r29
    1c66:	08 95       	ret

00001c68 <Interrupt_setCallBack>:
 *
 * [Returns]:      NONE
 ***************************************************************************************************/

void Interrupt_setCallBack(void(*a_ptr)(void), Interrupt_ID Interrupt_type )
{
    1c68:	df 93       	push	r29
    1c6a:	cf 93       	push	r28
    1c6c:	00 d0       	rcall	.+0      	; 0x1c6e <Interrupt_setCallBack+0x6>
    1c6e:	00 d0       	rcall	.+0      	; 0x1c70 <Interrupt_setCallBack+0x8>
    1c70:	0f 92       	push	r0
    1c72:	cd b7       	in	r28, 0x3d	; 61
    1c74:	de b7       	in	r29, 0x3e	; 62
    1c76:	9a 83       	std	Y+2, r25	; 0x02
    1c78:	89 83       	std	Y+1, r24	; 0x01
    1c7a:	6b 83       	std	Y+3, r22	; 0x03

	switch(Interrupt_type)
    1c7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c7e:	28 2f       	mov	r18, r24
    1c80:	30 e0       	ldi	r19, 0x00	; 0
    1c82:	3d 83       	std	Y+5, r19	; 0x05
    1c84:	2c 83       	std	Y+4, r18	; 0x04
    1c86:	8c 81       	ldd	r24, Y+4	; 0x04
    1c88:	9d 81       	ldd	r25, Y+5	; 0x05
    1c8a:	81 30       	cpi	r24, 0x01	; 1
    1c8c:	91 05       	cpc	r25, r1
    1c8e:	81 f0       	breq	.+32     	; 0x1cb0 <Interrupt_setCallBack+0x48>
    1c90:	2c 81       	ldd	r18, Y+4	; 0x04
    1c92:	3d 81       	ldd	r19, Y+5	; 0x05
    1c94:	22 30       	cpi	r18, 0x02	; 2
    1c96:	31 05       	cpc	r19, r1
    1c98:	91 f0       	breq	.+36     	; 0x1cbe <Interrupt_setCallBack+0x56>
    1c9a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c9c:	9d 81       	ldd	r25, Y+5	; 0x05
    1c9e:	00 97       	sbiw	r24, 0x00	; 0
    1ca0:	a1 f4       	brne	.+40     	; 0x1cca <Interrupt_setCallBack+0x62>
	{
	case INTERRUPT0:
		/* Save the address of the Call back function in a global variable */
		g_INT0_callBackPtr = a_ptr;
    1ca2:	89 81       	ldd	r24, Y+1	; 0x01
    1ca4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ca6:	90 93 7d 01 	sts	0x017D, r25
    1caa:	80 93 7c 01 	sts	0x017C, r24
    1cae:	0d c0       	rjmp	.+26     	; 0x1cca <Interrupt_setCallBack+0x62>
		break;

	case INTERRUPT1:
		/* Save the address of the Call back function in a global variable */
		g_INT1_callBackPtr = a_ptr;
    1cb0:	89 81       	ldd	r24, Y+1	; 0x01
    1cb2:	9a 81       	ldd	r25, Y+2	; 0x02
    1cb4:	90 93 7f 01 	sts	0x017F, r25
    1cb8:	80 93 7e 01 	sts	0x017E, r24
    1cbc:	06 c0       	rjmp	.+12     	; 0x1cca <Interrupt_setCallBack+0x62>
		break;

	case INTERRUPT2:
		/* Save the address of the Call back function in a global variable */
		g_INT2_callBackPtr = a_ptr;
    1cbe:	89 81       	ldd	r24, Y+1	; 0x01
    1cc0:	9a 81       	ldd	r25, Y+2	; 0x02
    1cc2:	90 93 81 01 	sts	0x0181, r25
    1cc6:	80 93 80 01 	sts	0x0180, r24
		break;
	} /*End of the switch case*/

}/*End of the setCallBack function*/
    1cca:	0f 90       	pop	r0
    1ccc:	0f 90       	pop	r0
    1cce:	0f 90       	pop	r0
    1cd0:	0f 90       	pop	r0
    1cd2:	0f 90       	pop	r0
    1cd4:	cf 91       	pop	r28
    1cd6:	df 91       	pop	r29
    1cd8:	08 95       	ret

00001cda <External_Interrupt_Deinit>:
 *
 * [Returns]:      NONE
 ***************************************************************************************************/

void External_Interrupt_Deinit(Interrupt_ID INT_ID)
{
    1cda:	df 93       	push	r29
    1cdc:	cf 93       	push	r28
    1cde:	00 d0       	rcall	.+0      	; 0x1ce0 <External_Interrupt_Deinit+0x6>
    1ce0:	0f 92       	push	r0
    1ce2:	cd b7       	in	r28, 0x3d	; 61
    1ce4:	de b7       	in	r29, 0x3e	; 62
    1ce6:	89 83       	std	Y+1, r24	; 0x01

	switch(INT_ID)
    1ce8:	89 81       	ldd	r24, Y+1	; 0x01
    1cea:	28 2f       	mov	r18, r24
    1cec:	30 e0       	ldi	r19, 0x00	; 0
    1cee:	3b 83       	std	Y+3, r19	; 0x03
    1cf0:	2a 83       	std	Y+2, r18	; 0x02
    1cf2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf4:	9b 81       	ldd	r25, Y+3	; 0x03
    1cf6:	81 30       	cpi	r24, 0x01	; 1
    1cf8:	91 05       	cpc	r25, r1
    1cfa:	c1 f0       	breq	.+48     	; 0x1d2c <External_Interrupt_Deinit+0x52>
    1cfc:	2a 81       	ldd	r18, Y+2	; 0x02
    1cfe:	3b 81       	ldd	r19, Y+3	; 0x03
    1d00:	22 30       	cpi	r18, 0x02	; 2
    1d02:	31 05       	cpc	r19, r1
    1d04:	11 f1       	breq	.+68     	; 0x1d4a <External_Interrupt_Deinit+0x70>
    1d06:	8a 81       	ldd	r24, Y+2	; 0x02
    1d08:	9b 81       	ldd	r25, Y+3	; 0x03
    1d0a:	00 97       	sbiw	r24, 0x00	; 0
    1d0c:	61 f5       	brne	.+88     	; 0x1d66 <External_Interrupt_Deinit+0x8c>
	{

	case INTERRUPT0:

		/*clear all bits of interrupt 0*/
		MCU_CONTROL_REGISTER = (MCU_CONTROL_REGISTER & 0XFC);
    1d0e:	a5 e5       	ldi	r26, 0x55	; 85
    1d10:	b0 e0       	ldi	r27, 0x00	; 0
    1d12:	e5 e5       	ldi	r30, 0x55	; 85
    1d14:	f0 e0       	ldi	r31, 0x00	; 0
    1d16:	80 81       	ld	r24, Z
    1d18:	8c 7f       	andi	r24, 0xFC	; 252
    1d1a:	8c 93       	st	X, r24
		GENERAL_INTERRUPT_CONTROL_REGISTER = (GENERAL_INTERRUPT_CONTROL_REGISTER & 0XBF);
    1d1c:	ab e5       	ldi	r26, 0x5B	; 91
    1d1e:	b0 e0       	ldi	r27, 0x00	; 0
    1d20:	eb e5       	ldi	r30, 0x5B	; 91
    1d22:	f0 e0       	ldi	r31, 0x00	; 0
    1d24:	80 81       	ld	r24, Z
    1d26:	8f 7b       	andi	r24, 0xBF	; 191
    1d28:	8c 93       	st	X, r24
    1d2a:	1d c0       	rjmp	.+58     	; 0x1d66 <External_Interrupt_Deinit+0x8c>
		break;

	case INTERRUPT1:

		/*clear all bits of interrupt 1*/
		MCU_CONTROL_REGISTER = (MCU_CONTROL_REGISTER & 0XF3);
    1d2c:	a5 e5       	ldi	r26, 0x55	; 85
    1d2e:	b0 e0       	ldi	r27, 0x00	; 0
    1d30:	e5 e5       	ldi	r30, 0x55	; 85
    1d32:	f0 e0       	ldi	r31, 0x00	; 0
    1d34:	80 81       	ld	r24, Z
    1d36:	83 7f       	andi	r24, 0xF3	; 243
    1d38:	8c 93       	st	X, r24

		GENERAL_INTERRUPT_CONTROL_REGISTER = (GENERAL_INTERRUPT_CONTROL_REGISTER & 0X7F);
    1d3a:	ab e5       	ldi	r26, 0x5B	; 91
    1d3c:	b0 e0       	ldi	r27, 0x00	; 0
    1d3e:	eb e5       	ldi	r30, 0x5B	; 91
    1d40:	f0 e0       	ldi	r31, 0x00	; 0
    1d42:	80 81       	ld	r24, Z
    1d44:	8f 77       	andi	r24, 0x7F	; 127
    1d46:	8c 93       	st	X, r24
    1d48:	0e c0       	rjmp	.+28     	; 0x1d66 <External_Interrupt_Deinit+0x8c>
		break;


	case INTERRUPT2:
		/*clear all bits of interrupt 2*/
		MCU_CONTROL_AND_STATUS_REGISTER = (MCU_CONTROL_AND_STATUS_REGISTER & 0XBF);
    1d4a:	a4 e5       	ldi	r26, 0x54	; 84
    1d4c:	b0 e0       	ldi	r27, 0x00	; 0
    1d4e:	e4 e5       	ldi	r30, 0x54	; 84
    1d50:	f0 e0       	ldi	r31, 0x00	; 0
    1d52:	80 81       	ld	r24, Z
    1d54:	8f 7b       	andi	r24, 0xBF	; 191
    1d56:	8c 93       	st	X, r24

		GENERAL_INTERRUPT_CONTROL_REGISTER = (GENERAL_INTERRUPT_CONTROL_REGISTER & 0XCF);
    1d58:	ab e5       	ldi	r26, 0x5B	; 91
    1d5a:	b0 e0       	ldi	r27, 0x00	; 0
    1d5c:	eb e5       	ldi	r30, 0x5B	; 91
    1d5e:	f0 e0       	ldi	r31, 0x00	; 0
    1d60:	80 81       	ld	r24, Z
    1d62:	8f 7c       	andi	r24, 0xCF	; 207
    1d64:	8c 93       	st	X, r24
		break;


	}/*end of switch case*/

}/*End of External_Interrupt_Deinit function*/
    1d66:	0f 90       	pop	r0
    1d68:	0f 90       	pop	r0
    1d6a:	0f 90       	pop	r0
    1d6c:	cf 91       	pop	r28
    1d6e:	df 91       	pop	r29
    1d70:	08 95       	ret

00001d72 <TWI_init>:

#include "i2c.h"


void TWI_init(const TWI_ConfigType * Config_ptr)
{
    1d72:	df 93       	push	r29
    1d74:	cf 93       	push	r28
    1d76:	00 d0       	rcall	.+0      	; 0x1d78 <TWI_init+0x6>
    1d78:	cd b7       	in	r28, 0x3d	; 61
    1d7a:	de b7       	in	r29, 0x3e	; 62
    1d7c:	9a 83       	std	Y+2, r25	; 0x02
    1d7e:	89 83       	std	Y+1, r24	; 0x01
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */

    TWBR = Config_ptr->rateRegister;
    1d80:	a0 e2       	ldi	r26, 0x20	; 32
    1d82:	b0 e0       	ldi	r27, 0x00	; 0
    1d84:	e9 81       	ldd	r30, Y+1	; 0x01
    1d86:	fa 81       	ldd	r31, Y+2	; 0x02
    1d88:	80 81       	ld	r24, Z
    1d8a:	8c 93       	st	X, r24

	TWSR = ( TWSR & (0XFC) ) | (Config_ptr->prescaler);
    1d8c:	a1 e2       	ldi	r26, 0x21	; 33
    1d8e:	b0 e0       	ldi	r27, 0x00	; 0
    1d90:	e1 e2       	ldi	r30, 0x21	; 33
    1d92:	f0 e0       	ldi	r31, 0x00	; 0
    1d94:	80 81       	ld	r24, Z
    1d96:	98 2f       	mov	r25, r24
    1d98:	9c 7f       	andi	r25, 0xFC	; 252
    1d9a:	e9 81       	ldd	r30, Y+1	; 0x01
    1d9c:	fa 81       	ldd	r31, Y+2	; 0x02
    1d9e:	82 81       	ldd	r24, Z+2	; 0x02
    1da0:	89 2b       	or	r24, r25
    1da2:	8c 93       	st	X, r24
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
	/*shift left to use as address is 7 bit only*/
    TWAR =  ( (Config_ptr->address)<< 1 );  //0b00000010; // my address = 0x01 :)
    1da4:	a2 e2       	ldi	r26, 0x22	; 34
    1da6:	b0 e0       	ldi	r27, 0x00	; 0
    1da8:	e9 81       	ldd	r30, Y+1	; 0x01
    1daa:	fa 81       	ldd	r31, Y+2	; 0x02
    1dac:	81 81       	ldd	r24, Z+1	; 0x01
    1dae:	88 0f       	add	r24, r24
    1db0:	8c 93       	st	X, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    1db2:	e6 e5       	ldi	r30, 0x56	; 86
    1db4:	f0 e0       	ldi	r31, 0x00	; 0
    1db6:	84 e0       	ldi	r24, 0x04	; 4
    1db8:	80 83       	st	Z, r24
}
    1dba:	0f 90       	pop	r0
    1dbc:	0f 90       	pop	r0
    1dbe:	cf 91       	pop	r28
    1dc0:	df 91       	pop	r29
    1dc2:	08 95       	ret

00001dc4 <TWI_start>:



void TWI_start(void)
{
    1dc4:	df 93       	push	r29
    1dc6:	cf 93       	push	r28
    1dc8:	cd b7       	in	r28, 0x3d	; 61
    1dca:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    1dcc:	e6 e5       	ldi	r30, 0x56	; 86
    1dce:	f0 e0       	ldi	r31, 0x00	; 0
    1dd0:	84 ea       	ldi	r24, 0xA4	; 164
    1dd2:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1dd4:	e6 e5       	ldi	r30, 0x56	; 86
    1dd6:	f0 e0       	ldi	r31, 0x00	; 0
    1dd8:	80 81       	ld	r24, Z
    1dda:	88 23       	and	r24, r24
    1ddc:	dc f7       	brge	.-10     	; 0x1dd4 <TWI_start+0x10>
}
    1dde:	cf 91       	pop	r28
    1de0:	df 91       	pop	r29
    1de2:	08 95       	ret

00001de4 <TWI_stop>:

void TWI_stop(void)
{
    1de4:	df 93       	push	r29
    1de6:	cf 93       	push	r28
    1de8:	cd b7       	in	r28, 0x3d	; 61
    1dea:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    1dec:	e6 e5       	ldi	r30, 0x56	; 86
    1dee:	f0 e0       	ldi	r31, 0x00	; 0
    1df0:	84 e9       	ldi	r24, 0x94	; 148
    1df2:	80 83       	st	Z, r24
}
    1df4:	cf 91       	pop	r28
    1df6:	df 91       	pop	r29
    1df8:	08 95       	ret

00001dfa <TWI_write>:

void TWI_write(uint8 data)
{
    1dfa:	df 93       	push	r29
    1dfc:	cf 93       	push	r28
    1dfe:	0f 92       	push	r0
    1e00:	cd b7       	in	r28, 0x3d	; 61
    1e02:	de b7       	in	r29, 0x3e	; 62
    1e04:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    1e06:	e3 e2       	ldi	r30, 0x23	; 35
    1e08:	f0 e0       	ldi	r31, 0x00	; 0
    1e0a:	89 81       	ldd	r24, Y+1	; 0x01
    1e0c:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    1e0e:	e6 e5       	ldi	r30, 0x56	; 86
    1e10:	f0 e0       	ldi	r31, 0x00	; 0
    1e12:	84 e8       	ldi	r24, 0x84	; 132
    1e14:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1e16:	e6 e5       	ldi	r30, 0x56	; 86
    1e18:	f0 e0       	ldi	r31, 0x00	; 0
    1e1a:	80 81       	ld	r24, Z
    1e1c:	88 23       	and	r24, r24
    1e1e:	dc f7       	brge	.-10     	; 0x1e16 <TWI_write+0x1c>
}
    1e20:	0f 90       	pop	r0
    1e22:	cf 91       	pop	r28
    1e24:	df 91       	pop	r29
    1e26:	08 95       	ret

00001e28 <TWI_readWithACK>:

uint8 TWI_readWithACK(void)
{
    1e28:	df 93       	push	r29
    1e2a:	cf 93       	push	r28
    1e2c:	cd b7       	in	r28, 0x3d	; 61
    1e2e:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1e30:	e6 e5       	ldi	r30, 0x56	; 86
    1e32:	f0 e0       	ldi	r31, 0x00	; 0
    1e34:	84 ec       	ldi	r24, 0xC4	; 196
    1e36:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1e38:	e6 e5       	ldi	r30, 0x56	; 86
    1e3a:	f0 e0       	ldi	r31, 0x00	; 0
    1e3c:	80 81       	ld	r24, Z
    1e3e:	88 23       	and	r24, r24
    1e40:	dc f7       	brge	.-10     	; 0x1e38 <TWI_readWithACK+0x10>
    /* Read Data */
    return TWDR;
    1e42:	e3 e2       	ldi	r30, 0x23	; 35
    1e44:	f0 e0       	ldi	r31, 0x00	; 0
    1e46:	80 81       	ld	r24, Z
}
    1e48:	cf 91       	pop	r28
    1e4a:	df 91       	pop	r29
    1e4c:	08 95       	ret

00001e4e <TWI_readWithNACK>:

uint8 TWI_readWithNACK(void)
{
    1e4e:	df 93       	push	r29
    1e50:	cf 93       	push	r28
    1e52:	cd b7       	in	r28, 0x3d	; 61
    1e54:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    1e56:	e6 e5       	ldi	r30, 0x56	; 86
    1e58:	f0 e0       	ldi	r31, 0x00	; 0
    1e5a:	84 e8       	ldi	r24, 0x84	; 132
    1e5c:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1e5e:	e6 e5       	ldi	r30, 0x56	; 86
    1e60:	f0 e0       	ldi	r31, 0x00	; 0
    1e62:	80 81       	ld	r24, Z
    1e64:	88 23       	and	r24, r24
    1e66:	dc f7       	brge	.-10     	; 0x1e5e <TWI_readWithNACK+0x10>
    /* Read Data */
    return TWDR;
    1e68:	e3 e2       	ldi	r30, 0x23	; 35
    1e6a:	f0 e0       	ldi	r31, 0x00	; 0
    1e6c:	80 81       	ld	r24, Z
}
    1e6e:	cf 91       	pop	r28
    1e70:	df 91       	pop	r29
    1e72:	08 95       	ret

00001e74 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    1e74:	df 93       	push	r29
    1e76:	cf 93       	push	r28
    1e78:	0f 92       	push	r0
    1e7a:	cd b7       	in	r28, 0x3d	; 61
    1e7c:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    1e7e:	e1 e2       	ldi	r30, 0x21	; 33
    1e80:	f0 e0       	ldi	r31, 0x00	; 0
    1e82:	80 81       	ld	r24, Z
    1e84:	88 7f       	andi	r24, 0xF8	; 248
    1e86:	89 83       	std	Y+1, r24	; 0x01
    return status;
    1e88:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e8a:	0f 90       	pop	r0
    1e8c:	cf 91       	pop	r28
    1e8e:	df 91       	pop	r29
    1e90:	08 95       	ret

00001e92 <main>:
 *  able to use it in interrupt functions in another file
 */
bool g_downInterrupt_SWflag= FALSE;

int main()
{
    1e92:	df 93       	push	r29
    1e94:	cf 93       	push	r28
    1e96:	cd b7       	in	r28, 0x3d	; 61
    1e98:	de b7       	in	r29, 0x3e	; 62
    1e9a:	cd 54       	subi	r28, 0x4D	; 77
    1e9c:	d0 40       	sbci	r29, 0x00	; 0
    1e9e:	0f b6       	in	r0, 0x3f	; 63
    1ea0:	f8 94       	cli
    1ea2:	de bf       	out	0x3e, r29	; 62
    1ea4:	0f be       	out	0x3f, r0	; 63
    1ea6:	cd bf       	out	0x3d, r28	; 61
	 *                    Variable Declaration and Definitions                     *
	 *******************************************************************************/
	/*
	 * local variable to check if the current press is On or off
	 */
	uint8 OnOff_ModeCheck = OFF_STATE;
    1ea8:	1d aa       	std	Y+53, r1	; 0x35
	/*
	 * local variable to use it with on/off button to make sure that the
	 * functionality is done one time while pressing the button
	 */
	uint8 OnOFF_swFlag = FALSE_STATE;
    1eaa:	1c aa       	std	Y+52, r1	; 0x34
	/*
	 * Variable to carry the value of zeros of the
	 * stored temperature after reading it from EEPROM
	 */
	uint8 temperatureZero = INITIAL_VALUE;
    1eac:	1e aa       	std	Y+54, r1	; 0x36
	/*
	 * Variable to carry the value of tens of the
	 * stored temperature after reading it from EEPROM
	 */
	uint8 temperatureTens = INITIAL_VALUE;
    1eae:	1f aa       	std	Y+55, r1	; 0x37
	/*
	 * Variable to carry the value of the
	 * stored temperature after reading it from EEPROM and after
	 * calculates it from temperatureZero and temperatureTens
	 */
	uint32 storedTemperature = INITIAL_VALUE;
    1eb0:	18 aa       	std	Y+48, r1	; 0x30
    1eb2:	19 aa       	std	Y+49, r1	; 0x31
    1eb4:	1a aa       	std	Y+50, r1	; 0x32
    1eb6:	1b aa       	std	Y+51, r1	; 0x33
	/*
	 * Variable to use it to manage displaying the
	 * stored temperature to be one time only
	 * in the first of ON State
	 */
	bool eepromFlag = FALSE;
    1eb8:	1f a6       	std	Y+47, r1	; 0x2f
	/*
	 * Variable to carry the current temperature which
	 * be read from Temperature sensor
	 */
	uint32 current_temperature = INITIAL_VALUE;
    1eba:	1b a6       	std	Y+43, r1	; 0x2b
    1ebc:	1c a6       	std	Y+44, r1	; 0x2c
    1ebe:	1d a6       	std	Y+45, r1	; 0x2d
    1ec0:	1e a6       	std	Y+46, r1	; 0x2e
	/*
	 * Define a structure to configure the timer module to be
	 * able to count
	 */
	Timer_ConfigType time = {INITIAL_VALUE,COMPARE_VALUE, Timer1, F_CPU_1024, Compare, Disconnected, ChannelA};
    1ec2:	ce 01       	movw	r24, r28
    1ec4:	c8 96       	adiw	r24, 0x38	; 56
    1ec6:	2b 96       	adiw	r28, 0x0b	; 11
    1ec8:	9f af       	std	Y+63, r25	; 0x3f
    1eca:	8e af       	std	Y+62, r24	; 0x3e
    1ecc:	2b 97       	sbiw	r28, 0x0b	; 11
    1ece:	ef e6       	ldi	r30, 0x6F	; 111
    1ed0:	f1 e0       	ldi	r31, 0x01	; 1
    1ed2:	2d 96       	adiw	r28, 0x0d	; 13
    1ed4:	ff af       	std	Y+63, r31	; 0x3f
    1ed6:	ee af       	std	Y+62, r30	; 0x3e
    1ed8:	2d 97       	sbiw	r28, 0x0d	; 13
    1eda:	fd e0       	ldi	r31, 0x0D	; 13
    1edc:	2e 96       	adiw	r28, 0x0e	; 14
    1ede:	ff af       	std	Y+63, r31	; 0x3f
    1ee0:	2e 97       	sbiw	r28, 0x0e	; 14
    1ee2:	2d 96       	adiw	r28, 0x0d	; 13
    1ee4:	ee ad       	ldd	r30, Y+62	; 0x3e
    1ee6:	ff ad       	ldd	r31, Y+63	; 0x3f
    1ee8:	2d 97       	sbiw	r28, 0x0d	; 13
    1eea:	00 80       	ld	r0, Z
    1eec:	2d 96       	adiw	r28, 0x0d	; 13
    1eee:	8e ad       	ldd	r24, Y+62	; 0x3e
    1ef0:	9f ad       	ldd	r25, Y+63	; 0x3f
    1ef2:	2d 97       	sbiw	r28, 0x0d	; 13
    1ef4:	01 96       	adiw	r24, 0x01	; 1
    1ef6:	2d 96       	adiw	r28, 0x0d	; 13
    1ef8:	9f af       	std	Y+63, r25	; 0x3f
    1efa:	8e af       	std	Y+62, r24	; 0x3e
    1efc:	2d 97       	sbiw	r28, 0x0d	; 13
    1efe:	2b 96       	adiw	r28, 0x0b	; 11
    1f00:	ee ad       	ldd	r30, Y+62	; 0x3e
    1f02:	ff ad       	ldd	r31, Y+63	; 0x3f
    1f04:	2b 97       	sbiw	r28, 0x0b	; 11
    1f06:	00 82       	st	Z, r0
    1f08:	2b 96       	adiw	r28, 0x0b	; 11
    1f0a:	8e ad       	ldd	r24, Y+62	; 0x3e
    1f0c:	9f ad       	ldd	r25, Y+63	; 0x3f
    1f0e:	2b 97       	sbiw	r28, 0x0b	; 11
    1f10:	01 96       	adiw	r24, 0x01	; 1
    1f12:	2b 96       	adiw	r28, 0x0b	; 11
    1f14:	9f af       	std	Y+63, r25	; 0x3f
    1f16:	8e af       	std	Y+62, r24	; 0x3e
    1f18:	2b 97       	sbiw	r28, 0x0b	; 11
    1f1a:	2e 96       	adiw	r28, 0x0e	; 14
    1f1c:	9f ad       	ldd	r25, Y+63	; 0x3f
    1f1e:	2e 97       	sbiw	r28, 0x0e	; 14
    1f20:	91 50       	subi	r25, 0x01	; 1
    1f22:	2e 96       	adiw	r28, 0x0e	; 14
    1f24:	9f af       	std	Y+63, r25	; 0x3f
    1f26:	2e 97       	sbiw	r28, 0x0e	; 14
    1f28:	2e 96       	adiw	r28, 0x0e	; 14
    1f2a:	ef ad       	ldd	r30, Y+63	; 0x3f
    1f2c:	2e 97       	sbiw	r28, 0x0e	; 14
    1f2e:	ee 23       	and	r30, r30
    1f30:	c1 f6       	brne	.-80     	; 0x1ee2 <main+0x50>
	/*
	 * Configure the Callback function of timer to do
	 * a specific functionality every interrupt occurrence
	 */
	Timer_setCallBack(flashingTime, Timer1);
    1f32:	8e e0       	ldi	r24, 0x0E	; 14
    1f34:	9b e0       	ldi	r25, 0x0B	; 11
    1f36:	61 e0       	ldi	r22, 0x01	; 1
    1f38:	0e 94 bc 1a 	call	0x3578	; 0x3578 <Timer_setCallBack>
	/*
	 * Define a structure to configure the interrupt0
	 * module to be able to count
	 */
	External_Interrupt_ConfigType up = {INTERRUPT0, Falling};
    1f3c:	fe 01       	movw	r30, r28
    1f3e:	eb 5b       	subi	r30, 0xBB	; 187
    1f40:	ff 4f       	sbci	r31, 0xFF	; 255
    1f42:	10 82       	st	Z, r1
    1f44:	fe 01       	movw	r30, r28
    1f46:	eb 5b       	subi	r30, 0xBB	; 187
    1f48:	ff 4f       	sbci	r31, 0xFF	; 255
    1f4a:	82 e0       	ldi	r24, 0x02	; 2
    1f4c:	81 83       	std	Z+1, r24	; 0x01
	/*
	 * Define a structure to configure the interrupt1
	 * module to be able to count
	 */
	External_Interrupt_ConfigType down = {INTERRUPT1, Falling};
    1f4e:	fe 01       	movw	r30, r28
    1f50:	e9 5b       	subi	r30, 0xB9	; 185
    1f52:	ff 4f       	sbci	r31, 0xFF	; 255
    1f54:	81 e0       	ldi	r24, 0x01	; 1
    1f56:	80 83       	st	Z, r24
    1f58:	fe 01       	movw	r30, r28
    1f5a:	e9 5b       	subi	r30, 0xB9	; 185
    1f5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f5e:	82 e0       	ldi	r24, 0x02	; 2
    1f60:	81 83       	std	Z+1, r24	; 0x01
	/*
	 * Configure the Callback function of interrupt 0 to do
	 * a specific functionality every interrupt occurrence
	 */
	Interrupt_setCallBack(upFunc, INTERRUPT0);
    1f62:	8e e8       	ldi	r24, 0x8E	; 142
    1f64:	9a e0       	ldi	r25, 0x0A	; 10
    1f66:	60 e0       	ldi	r22, 0x00	; 0
    1f68:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <Interrupt_setCallBack>
	/*
	 * Configure the Callback function of interrupt 1 to do
	 * a specific functionality every interrupt occurrence
	 */
	Interrupt_setCallBack(downFunc, INTERRUPT1);
    1f6c:	8e ec       	ldi	r24, 0xCE	; 206
    1f6e:	9a e0       	ldi	r25, 0x0A	; 10
    1f70:	61 e0       	ldi	r22, 0x01	; 1
    1f72:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <Interrupt_setCallBack>
	 *                             Modules Initialization                          *
	 *******************************************************************************/
	/*
	 *Configure ON OFF button as input pin
	 */
	ON_OFF_BUTTON_DIRECTION_REG = CLEAR_BIT(ON_OFF_BUTTON_DIRECTION_REG, ON_OFF_BUTTON_INPUT_PIN);
    1f76:	21 e3       	ldi	r18, 0x31	; 49
    1f78:	30 e0       	ldi	r19, 0x00	; 0
    1f7a:	a1 e3       	ldi	r26, 0x31	; 49
    1f7c:	b0 e0       	ldi	r27, 0x00	; 0
    1f7e:	e1 e3       	ldi	r30, 0x31	; 49
    1f80:	f0 e0       	ldi	r31, 0x00	; 0
    1f82:	80 81       	ld	r24, Z
    1f84:	8f 7e       	andi	r24, 0xEF	; 239
    1f86:	8c 93       	st	X, r24
    1f88:	8c 91       	ld	r24, X
    1f8a:	f9 01       	movw	r30, r18
    1f8c:	80 83       	st	Z, r24
	/*
	 * Enable PULL Up for ON/OFF Button
	 */
	ON_OFF_BUTTON_PORT_REG = SET_BIT(ON_OFF_BUTTON_PORT_REG, ON_OFF_BUTTON_INPUT_PIN);
    1f8e:	22 e3       	ldi	r18, 0x32	; 50
    1f90:	30 e0       	ldi	r19, 0x00	; 0
    1f92:	a2 e3       	ldi	r26, 0x32	; 50
    1f94:	b0 e0       	ldi	r27, 0x00	; 0
    1f96:	e2 e3       	ldi	r30, 0x32	; 50
    1f98:	f0 e0       	ldi	r31, 0x00	; 0
    1f9a:	80 81       	ld	r24, Z
    1f9c:	80 61       	ori	r24, 0x10	; 16
    1f9e:	8c 93       	st	X, r24
    1fa0:	8c 91       	ld	r24, X
    1fa2:	f9 01       	movw	r30, r18
    1fa4:	80 83       	st	Z, r24
	/*
	 *Configure 7-segments pins as output pins
	 */
	SEGMENTS_DIRECTION_REG |=  SEGMENTS_MASK_TO_BE_OUTPUT;
    1fa6:	a7 e3       	ldi	r26, 0x37	; 55
    1fa8:	b0 e0       	ldi	r27, 0x00	; 0
    1faa:	e7 e3       	ldi	r30, 0x37	; 55
    1fac:	f0 e0       	ldi	r31, 0x00	; 0
    1fae:	80 81       	ld	r24, Z
    1fb0:	8f 60       	ori	r24, 0x0F	; 15
    1fb2:	8c 93       	st	X, r24
	/*
	 * Configure Control selection lines of the segments as output pins
	 */
	SEGMENTS_CTRL_DIRECTION_REG |= SGMENTS_CTRL_MASK_TO_BE_OUTPUT;
    1fb4:	a1 e3       	ldi	r26, 0x31	; 49
    1fb6:	b0 e0       	ldi	r27, 0x00	; 0
    1fb8:	e1 e3       	ldi	r30, 0x31	; 49
    1fba:	f0 e0       	ldi	r31, 0x00	; 0
    1fbc:	80 81       	ld	r24, Z
    1fbe:	83 60       	ori	r24, 0x03	; 3
    1fc0:	8c 93       	st	X, r24
	/*
	 * Disable Control selection lines of the segments at the beginning of the program to make segments off
	 */
	SEGMENTS_CTRL_PORT_REG &= SEGMENTS_CTRL_MASK;
    1fc2:	a2 e3       	ldi	r26, 0x32	; 50
    1fc4:	b0 e0       	ldi	r27, 0x00	; 0
    1fc6:	e2 e3       	ldi	r30, 0x32	; 50
    1fc8:	f0 e0       	ldi	r31, 0x00	; 0
    1fca:	80 81       	ld	r24, Z
    1fcc:	8c 7f       	andi	r24, 0xFC	; 252
    1fce:	8c 93       	st	X, r24
	/*
	 * Set the first value on the segments by 0
	 */
	SEGMENTS_PORT_REG &=  SEGMENTS_MASK;
    1fd0:	a8 e3       	ldi	r26, 0x38	; 56
    1fd2:	b0 e0       	ldi	r27, 0x00	; 0
    1fd4:	e8 e3       	ldi	r30, 0x38	; 56
    1fd6:	f0 e0       	ldi	r31, 0x00	; 0
    1fd8:	80 81       	ld	r24, Z
    1fda:	80 7f       	andi	r24, 0xF0	; 240
    1fdc:	8c 93       	st	X, r24
	/*
	 * Configure the pin of the temperature sensor  as input pin
	 */
	TEMP_SENSOR_DIRECTION_REG = SET_BIT(TEMP_SENSOR_DIRECTION_REG, TEMP_SENSOR_INPUT_PIN);
    1fde:	2a e3       	ldi	r18, 0x3A	; 58
    1fe0:	30 e0       	ldi	r19, 0x00	; 0
    1fe2:	aa e3       	ldi	r26, 0x3A	; 58
    1fe4:	b0 e0       	ldi	r27, 0x00	; 0
    1fe6:	ea e3       	ldi	r30, 0x3A	; 58
    1fe8:	f0 e0       	ldi	r31, 0x00	; 0
    1fea:	80 81       	ld	r24, Z
    1fec:	81 60       	ori	r24, 0x01	; 1
    1fee:	8c 93       	st	X, r24
    1ff0:	8c 91       	ld	r24, X
    1ff2:	f9 01       	movw	r30, r18
    1ff4:	80 83       	st	Z, r24
	/**************************************************************************************/
	/*
	 * Initialize the External EEPROM to be ready to work
	 */
	EEPROM_init();
    1ff6:	0e 94 3d 0c 	call	0x187a	; 0x187a <EEPROM_init>
	/*
	 * Initialize Analog to Digital Converter to be ready to work
	 */
	ADC_init();
    1ffa:	0e 94 1c 08 	call	0x1038	; 0x1038 <ADC_init>
	/*
	 * Initialize DC motor to be ready to work
	 */
	DC_motor_Init();
    1ffe:	0e 94 17 07 	call	0xe2e	; 0xe2e <DC_motor_Init>
	/*
	 * Initialize LEDs to be ready to work
	 */
	LED_Init();
    2002:	0e 94 93 07 	call	0xf26	; 0xf26 <LED_Init>
	/*
	 * Initialize Interrupt 0 to be ready to work
	 */
	External_Interrupt_init(&up);
    2006:	ce 01       	movw	r24, r28
    2008:	8b 5b       	subi	r24, 0xBB	; 187
    200a:	9f 4f       	sbci	r25, 0xFF	; 255
    200c:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <External_Interrupt_init>
	/*
	 * Initialize Interrupt 1 to be ready to work
	 */
	External_Interrupt_init(&down);
    2010:	ce 01       	movw	r24, r28
    2012:	89 5b       	subi	r24, 0xB9	; 185
    2014:	9f 4f       	sbci	r25, 0xFF	; 255
    2016:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <External_Interrupt_init>
	/*
	 * Initialize timer 1 to be ready to work
	 */
	Timer_init(&time);
    201a:	ce 01       	movw	r24, r28
    201c:	c8 96       	adiw	r24, 0x38	; 56
    201e:	0e 94 67 14 	call	0x28ce	; 0x28ce <Timer_init>
	/*
	 * Stop the clock of the timer
	 */
	Timer_stop(Timer1);
    2022:	81 e0       	ldi	r24, 0x01	; 1
    2024:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <Timer_stop>
	/*
	 * Enable Global Interrupt
	 */
	SREG = SET_BIT(SREG, I_BIT);
    2028:	2f e5       	ldi	r18, 0x5F	; 95
    202a:	30 e0       	ldi	r19, 0x00	; 0
    202c:	af e5       	ldi	r26, 0x5F	; 95
    202e:	b0 e0       	ldi	r27, 0x00	; 0
    2030:	ef e5       	ldi	r30, 0x5F	; 95
    2032:	f0 e0       	ldi	r31, 0x00	; 0
    2034:	80 81       	ld	r24, Z
    2036:	80 68       	ori	r24, 0x80	; 128
    2038:	8c 93       	st	X, r24
    203a:	8c 91       	ld	r24, X
    203c:	f9 01       	movw	r30, r18
    203e:	80 83       	st	Z, r24
	 *                             Initial Start mode                               *
	 *******************************************************************************/
	/*
	 * stop the motor in the start of the program
	 */
	DC_motor_on_Stop();
    2040:	0e 94 74 07 	call	0xee8	; 0xee8 <DC_motor_on_Stop>
	/*
	 * Turn OFF cooling LED in the begin of the program
	 */
	LED_OFF(LED1);
    2044:	80 e0       	ldi	r24, 0x00	; 0
    2046:	0e 94 e7 07 	call	0xfce	; 0xfce <LED_OFF>
	/*
	 * Turn OFF heating LED in the begin of the program
	 */
	LED_OFF(LED2);
    204a:	81 e0       	ldi	r24, 0x01	; 1
    204c:	0e 94 e7 07 	call	0xfce	; 0xfce <LED_OFF>
	while(1)
	{
		/*
		 * receive current temperature of water from temperature sensor
		 */
		current_temperature = read_currentTemperature();
    2050:	0e 94 61 08 	call	0x10c2	; 0x10c2 <read_currentTemperature>
    2054:	dc 01       	movw	r26, r24
    2056:	cb 01       	movw	r24, r22
    2058:	8b a7       	std	Y+43, r24	; 0x2b
    205a:	9c a7       	std	Y+44, r25	; 0x2c
    205c:	ad a7       	std	Y+45, r26	; 0x2d
    205e:	be a7       	std	Y+46, r27	; 0x2e

		/**************************************************************************
		 *                              ON/OFF Button
		 **************************************************************************/
		if(  BIT_IS_CLEAR(ON_OFF_BUTTON_PIN_REG , ON_OFF_BUTTON_INPUT_PIN)  )
    2060:	e0 e3       	ldi	r30, 0x30	; 48
    2062:	f0 e0       	ldi	r31, 0x00	; 0
    2064:	80 81       	ld	r24, Z
    2066:	88 2f       	mov	r24, r24
    2068:	90 e0       	ldi	r25, 0x00	; 0
    206a:	80 71       	andi	r24, 0x10	; 16
    206c:	90 70       	andi	r25, 0x00	; 0
    206e:	00 97       	sbiw	r24, 0x00	; 0
    2070:	09 f0       	breq	.+2      	; 0x2074 <main+0x1e2>
    2072:	84 c0       	rjmp	.+264    	; 0x217c <main+0x2ea>
    2074:	80 e0       	ldi	r24, 0x00	; 0
    2076:	90 e0       	ldi	r25, 0x00	; 0
    2078:	a0 e7       	ldi	r26, 0x70	; 112
    207a:	b3 e4       	ldi	r27, 0x43	; 67
    207c:	8f a3       	std	Y+39, r24	; 0x27
    207e:	98 a7       	std	Y+40, r25	; 0x28
    2080:	a9 a7       	std	Y+41, r26	; 0x29
    2082:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2084:	6f a1       	ldd	r22, Y+39	; 0x27
    2086:	78 a5       	ldd	r23, Y+40	; 0x28
    2088:	89 a5       	ldd	r24, Y+41	; 0x29
    208a:	9a a5       	ldd	r25, Y+42	; 0x2a
    208c:	20 e0       	ldi	r18, 0x00	; 0
    208e:	30 e0       	ldi	r19, 0x00	; 0
    2090:	4a e7       	ldi	r20, 0x7A	; 122
    2092:	53 e4       	ldi	r21, 0x43	; 67
    2094:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2098:	dc 01       	movw	r26, r24
    209a:	cb 01       	movw	r24, r22
    209c:	8b a3       	std	Y+35, r24	; 0x23
    209e:	9c a3       	std	Y+36, r25	; 0x24
    20a0:	ad a3       	std	Y+37, r26	; 0x25
    20a2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    20a4:	6b a1       	ldd	r22, Y+35	; 0x23
    20a6:	7c a1       	ldd	r23, Y+36	; 0x24
    20a8:	8d a1       	ldd	r24, Y+37	; 0x25
    20aa:	9e a1       	ldd	r25, Y+38	; 0x26
    20ac:	20 e0       	ldi	r18, 0x00	; 0
    20ae:	30 e0       	ldi	r19, 0x00	; 0
    20b0:	40 e8       	ldi	r20, 0x80	; 128
    20b2:	5f e3       	ldi	r21, 0x3F	; 63
    20b4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20b8:	88 23       	and	r24, r24
    20ba:	2c f4       	brge	.+10     	; 0x20c6 <main+0x234>
		__ticks = 1;
    20bc:	81 e0       	ldi	r24, 0x01	; 1
    20be:	90 e0       	ldi	r25, 0x00	; 0
    20c0:	9a a3       	std	Y+34, r25	; 0x22
    20c2:	89 a3       	std	Y+33, r24	; 0x21
    20c4:	3f c0       	rjmp	.+126    	; 0x2144 <main+0x2b2>
	else if (__tmp > 65535)
    20c6:	6b a1       	ldd	r22, Y+35	; 0x23
    20c8:	7c a1       	ldd	r23, Y+36	; 0x24
    20ca:	8d a1       	ldd	r24, Y+37	; 0x25
    20cc:	9e a1       	ldd	r25, Y+38	; 0x26
    20ce:	20 e0       	ldi	r18, 0x00	; 0
    20d0:	3f ef       	ldi	r19, 0xFF	; 255
    20d2:	4f e7       	ldi	r20, 0x7F	; 127
    20d4:	57 e4       	ldi	r21, 0x47	; 71
    20d6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20da:	18 16       	cp	r1, r24
    20dc:	4c f5       	brge	.+82     	; 0x2130 <main+0x29e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20de:	6f a1       	ldd	r22, Y+39	; 0x27
    20e0:	78 a5       	ldd	r23, Y+40	; 0x28
    20e2:	89 a5       	ldd	r24, Y+41	; 0x29
    20e4:	9a a5       	ldd	r25, Y+42	; 0x2a
    20e6:	20 e0       	ldi	r18, 0x00	; 0
    20e8:	30 e0       	ldi	r19, 0x00	; 0
    20ea:	40 e2       	ldi	r20, 0x20	; 32
    20ec:	51 e4       	ldi	r21, 0x41	; 65
    20ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20f2:	dc 01       	movw	r26, r24
    20f4:	cb 01       	movw	r24, r22
    20f6:	bc 01       	movw	r22, r24
    20f8:	cd 01       	movw	r24, r26
    20fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20fe:	dc 01       	movw	r26, r24
    2100:	cb 01       	movw	r24, r22
    2102:	9a a3       	std	Y+34, r25	; 0x22
    2104:	89 a3       	std	Y+33, r24	; 0x21
    2106:	0f c0       	rjmp	.+30     	; 0x2126 <main+0x294>
    2108:	89 e1       	ldi	r24, 0x19	; 25
    210a:	90 e0       	ldi	r25, 0x00	; 0
    210c:	98 a3       	std	Y+32, r25	; 0x20
    210e:	8f 8f       	std	Y+31, r24	; 0x1f
    2110:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2112:	98 a1       	ldd	r25, Y+32	; 0x20
    2114:	01 97       	sbiw	r24, 0x01	; 1
    2116:	f1 f7       	brne	.-4      	; 0x2114 <main+0x282>
    2118:	98 a3       	std	Y+32, r25	; 0x20
    211a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    211c:	89 a1       	ldd	r24, Y+33	; 0x21
    211e:	9a a1       	ldd	r25, Y+34	; 0x22
    2120:	01 97       	sbiw	r24, 0x01	; 1
    2122:	9a a3       	std	Y+34, r25	; 0x22
    2124:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2126:	89 a1       	ldd	r24, Y+33	; 0x21
    2128:	9a a1       	ldd	r25, Y+34	; 0x22
    212a:	00 97       	sbiw	r24, 0x00	; 0
    212c:	69 f7       	brne	.-38     	; 0x2108 <main+0x276>
    212e:	14 c0       	rjmp	.+40     	; 0x2158 <main+0x2c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2130:	6b a1       	ldd	r22, Y+35	; 0x23
    2132:	7c a1       	ldd	r23, Y+36	; 0x24
    2134:	8d a1       	ldd	r24, Y+37	; 0x25
    2136:	9e a1       	ldd	r25, Y+38	; 0x26
    2138:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    213c:	dc 01       	movw	r26, r24
    213e:	cb 01       	movw	r24, r22
    2140:	9a a3       	std	Y+34, r25	; 0x22
    2142:	89 a3       	std	Y+33, r24	; 0x21
    2144:	89 a1       	ldd	r24, Y+33	; 0x21
    2146:	9a a1       	ldd	r25, Y+34	; 0x22
    2148:	9e 8f       	std	Y+30, r25	; 0x1e
    214a:	8d 8f       	std	Y+29, r24	; 0x1d
    214c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    214e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2150:	01 97       	sbiw	r24, 0x01	; 1
    2152:	f1 f7       	brne	.-4      	; 0x2150 <main+0x2be>
    2154:	9e 8f       	std	Y+30, r25	; 0x1e
    2156:	8d 8f       	std	Y+29, r24	; 0x1d
			 */
			_delay_ms(DEBOUNCE_TIME);
			/*
			 * Ask again to make sure it is a real push on the button
			 */
			if(  BIT_IS_CLEAR(ON_OFF_BUTTON_PIN_REG , ON_OFF_BUTTON_INPUT_PIN)  )
    2158:	e0 e3       	ldi	r30, 0x30	; 48
    215a:	f0 e0       	ldi	r31, 0x00	; 0
    215c:	80 81       	ld	r24, Z
    215e:	88 2f       	mov	r24, r24
    2160:	90 e0       	ldi	r25, 0x00	; 0
    2162:	80 71       	andi	r24, 0x10	; 16
    2164:	90 70       	andi	r25, 0x00	; 0
    2166:	00 97       	sbiw	r24, 0x00	; 0
    2168:	51 f4       	brne	.+20     	; 0x217e <main+0x2ec>
			{
				/*
				 * Ask about the SW flag of ON/OFF button to make sure it will do
				 *the functionality one time only
				 */
				if(OnOFF_swFlag == FALSE_STATE)
    216a:	8c a9       	ldd	r24, Y+52	; 0x34
    216c:	88 23       	and	r24, r24
    216e:	39 f4       	brne	.+14     	; 0x217e <main+0x2ec>
					/*
					 * Change the state of the ON/OFF button to prevent the program
					 * to enter this area of condition to avoid multiple of this action
					 * during continuous press
					 */
					OnOFF_swFlag = TRUE_STATE;
    2170:	81 e0       	ldi	r24, 0x01	; 1
    2172:	8c ab       	std	Y+52, r24	; 0x34
					/*
					 * increment the variable which responsible for checking
					 * if this current press on the on/off button express on mode or off mode
					 */
					OnOff_ModeCheck++;
    2174:	8d a9       	ldd	r24, Y+53	; 0x35
    2176:	8f 5f       	subi	r24, 0xFF	; 255
    2178:	8d ab       	std	Y+53, r24	; 0x35
    217a:	01 c0       	rjmp	.+2      	; 0x217e <main+0x2ec>
		{
			/*
			 * Change the state of the ON/OFF button to enable the program
			 * to enter the area of condition once again after releasing the button
			 */
			OnOFF_swFlag = FALSE_STATE;
    217c:	1c aa       	std	Y+52, r1	; 0x34
		}

		/**************************************************************************
		 *                              (1) ON  STATE
		 **************************************************************************/
		if( MOD_BY_TWO(OnOff_ModeCheck) == ON_STATE)
    217e:	8d a9       	ldd	r24, Y+53	; 0x35
    2180:	88 2f       	mov	r24, r24
    2182:	90 e0       	ldi	r25, 0x00	; 0
    2184:	81 70       	andi	r24, 0x01	; 1
    2186:	90 70       	andi	r25, 0x00	; 0
    2188:	88 23       	and	r24, r24
    218a:	09 f4       	brne	.+2      	; 0x218e <main+0x2fc>
    218c:	cc c1       	rjmp	.+920    	; 0x2526 <main+0x694>
		{
			/*
			 * read the first digit of the temperature from
			 * the external memory and store it in a variable
			 */
			EEPROM_readByte(FIRST_ADDRESS_TO_STORE, &temperatureZero);
    218e:	9e 01       	movw	r18, r28
    2190:	2a 5c       	subi	r18, 0xCA	; 202
    2192:	3f 4f       	sbci	r19, 0xFF	; 255
    2194:	80 e0       	ldi	r24, 0x00	; 0
    2196:	91 e0       	ldi	r25, 0x01	; 1
    2198:	b9 01       	movw	r22, r18
    219a:	0e 94 89 0c 	call	0x1912	; 0x1912 <EEPROM_readByte>
    219e:	80 e0       	ldi	r24, 0x00	; 0
    21a0:	90 e0       	ldi	r25, 0x00	; 0
    21a2:	a0 ea       	ldi	r26, 0xA0	; 160
    21a4:	b2 e4       	ldi	r27, 0x42	; 66
    21a6:	89 8f       	std	Y+25, r24	; 0x19
    21a8:	9a 8f       	std	Y+26, r25	; 0x1a
    21aa:	ab 8f       	std	Y+27, r26	; 0x1b
    21ac:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21ae:	69 8d       	ldd	r22, Y+25	; 0x19
    21b0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21b6:	20 e0       	ldi	r18, 0x00	; 0
    21b8:	30 e0       	ldi	r19, 0x00	; 0
    21ba:	4a e7       	ldi	r20, 0x7A	; 122
    21bc:	53 e4       	ldi	r21, 0x43	; 67
    21be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21c2:	dc 01       	movw	r26, r24
    21c4:	cb 01       	movw	r24, r22
    21c6:	8d 8b       	std	Y+21, r24	; 0x15
    21c8:	9e 8b       	std	Y+22, r25	; 0x16
    21ca:	af 8b       	std	Y+23, r26	; 0x17
    21cc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    21ce:	6d 89       	ldd	r22, Y+21	; 0x15
    21d0:	7e 89       	ldd	r23, Y+22	; 0x16
    21d2:	8f 89       	ldd	r24, Y+23	; 0x17
    21d4:	98 8d       	ldd	r25, Y+24	; 0x18
    21d6:	20 e0       	ldi	r18, 0x00	; 0
    21d8:	30 e0       	ldi	r19, 0x00	; 0
    21da:	40 e8       	ldi	r20, 0x80	; 128
    21dc:	5f e3       	ldi	r21, 0x3F	; 63
    21de:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21e2:	88 23       	and	r24, r24
    21e4:	2c f4       	brge	.+10     	; 0x21f0 <main+0x35e>
		__ticks = 1;
    21e6:	81 e0       	ldi	r24, 0x01	; 1
    21e8:	90 e0       	ldi	r25, 0x00	; 0
    21ea:	9c 8b       	std	Y+20, r25	; 0x14
    21ec:	8b 8b       	std	Y+19, r24	; 0x13
    21ee:	3f c0       	rjmp	.+126    	; 0x226e <main+0x3dc>
	else if (__tmp > 65535)
    21f0:	6d 89       	ldd	r22, Y+21	; 0x15
    21f2:	7e 89       	ldd	r23, Y+22	; 0x16
    21f4:	8f 89       	ldd	r24, Y+23	; 0x17
    21f6:	98 8d       	ldd	r25, Y+24	; 0x18
    21f8:	20 e0       	ldi	r18, 0x00	; 0
    21fa:	3f ef       	ldi	r19, 0xFF	; 255
    21fc:	4f e7       	ldi	r20, 0x7F	; 127
    21fe:	57 e4       	ldi	r21, 0x47	; 71
    2200:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2204:	18 16       	cp	r1, r24
    2206:	4c f5       	brge	.+82     	; 0x225a <main+0x3c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2208:	69 8d       	ldd	r22, Y+25	; 0x19
    220a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    220c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    220e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2210:	20 e0       	ldi	r18, 0x00	; 0
    2212:	30 e0       	ldi	r19, 0x00	; 0
    2214:	40 e2       	ldi	r20, 0x20	; 32
    2216:	51 e4       	ldi	r21, 0x41	; 65
    2218:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    221c:	dc 01       	movw	r26, r24
    221e:	cb 01       	movw	r24, r22
    2220:	bc 01       	movw	r22, r24
    2222:	cd 01       	movw	r24, r26
    2224:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2228:	dc 01       	movw	r26, r24
    222a:	cb 01       	movw	r24, r22
    222c:	9c 8b       	std	Y+20, r25	; 0x14
    222e:	8b 8b       	std	Y+19, r24	; 0x13
    2230:	0f c0       	rjmp	.+30     	; 0x2250 <main+0x3be>
    2232:	89 e1       	ldi	r24, 0x19	; 25
    2234:	90 e0       	ldi	r25, 0x00	; 0
    2236:	9a 8b       	std	Y+18, r25	; 0x12
    2238:	89 8b       	std	Y+17, r24	; 0x11
    223a:	89 89       	ldd	r24, Y+17	; 0x11
    223c:	9a 89       	ldd	r25, Y+18	; 0x12
    223e:	01 97       	sbiw	r24, 0x01	; 1
    2240:	f1 f7       	brne	.-4      	; 0x223e <main+0x3ac>
    2242:	9a 8b       	std	Y+18, r25	; 0x12
    2244:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2246:	8b 89       	ldd	r24, Y+19	; 0x13
    2248:	9c 89       	ldd	r25, Y+20	; 0x14
    224a:	01 97       	sbiw	r24, 0x01	; 1
    224c:	9c 8b       	std	Y+20, r25	; 0x14
    224e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2250:	8b 89       	ldd	r24, Y+19	; 0x13
    2252:	9c 89       	ldd	r25, Y+20	; 0x14
    2254:	00 97       	sbiw	r24, 0x00	; 0
    2256:	69 f7       	brne	.-38     	; 0x2232 <main+0x3a0>
    2258:	14 c0       	rjmp	.+40     	; 0x2282 <main+0x3f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    225a:	6d 89       	ldd	r22, Y+21	; 0x15
    225c:	7e 89       	ldd	r23, Y+22	; 0x16
    225e:	8f 89       	ldd	r24, Y+23	; 0x17
    2260:	98 8d       	ldd	r25, Y+24	; 0x18
    2262:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2266:	dc 01       	movw	r26, r24
    2268:	cb 01       	movw	r24, r22
    226a:	9c 8b       	std	Y+20, r25	; 0x14
    226c:	8b 8b       	std	Y+19, r24	; 0x13
    226e:	8b 89       	ldd	r24, Y+19	; 0x13
    2270:	9c 89       	ldd	r25, Y+20	; 0x14
    2272:	98 8b       	std	Y+16, r25	; 0x10
    2274:	8f 87       	std	Y+15, r24	; 0x0f
    2276:	8f 85       	ldd	r24, Y+15	; 0x0f
    2278:	98 89       	ldd	r25, Y+16	; 0x10
    227a:	01 97       	sbiw	r24, 0x01	; 1
    227c:	f1 f7       	brne	.-4      	; 0x227a <main+0x3e8>
    227e:	98 8b       	std	Y+16, r25	; 0x10
    2280:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(EEPROM_READ_DELAY_VALUE);
			/*
			 * read the second digit of the temperature from
			 * the external memory and store it in a variable
			 */
			EEPROM_readByte(SECOND_ADDRESS_TO_STORE, &temperatureTens);
    2282:	9e 01       	movw	r18, r28
    2284:	29 5c       	subi	r18, 0xC9	; 201
    2286:	3f 4f       	sbci	r19, 0xFF	; 255
    2288:	81 e0       	ldi	r24, 0x01	; 1
    228a:	91 e0       	ldi	r25, 0x01	; 1
    228c:	b9 01       	movw	r22, r18
    228e:	0e 94 89 0c 	call	0x1912	; 0x1912 <EEPROM_readByte>
    2292:	80 e0       	ldi	r24, 0x00	; 0
    2294:	90 e0       	ldi	r25, 0x00	; 0
    2296:	a0 ea       	ldi	r26, 0xA0	; 160
    2298:	b2 e4       	ldi	r27, 0x42	; 66
    229a:	8b 87       	std	Y+11, r24	; 0x0b
    229c:	9c 87       	std	Y+12, r25	; 0x0c
    229e:	ad 87       	std	Y+13, r26	; 0x0d
    22a0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    22a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    22a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    22a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    22aa:	20 e0       	ldi	r18, 0x00	; 0
    22ac:	30 e0       	ldi	r19, 0x00	; 0
    22ae:	4a e7       	ldi	r20, 0x7A	; 122
    22b0:	53 e4       	ldi	r21, 0x43	; 67
    22b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22b6:	dc 01       	movw	r26, r24
    22b8:	cb 01       	movw	r24, r22
    22ba:	8f 83       	std	Y+7, r24	; 0x07
    22bc:	98 87       	std	Y+8, r25	; 0x08
    22be:	a9 87       	std	Y+9, r26	; 0x09
    22c0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22c2:	6f 81       	ldd	r22, Y+7	; 0x07
    22c4:	78 85       	ldd	r23, Y+8	; 0x08
    22c6:	89 85       	ldd	r24, Y+9	; 0x09
    22c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    22ca:	20 e0       	ldi	r18, 0x00	; 0
    22cc:	30 e0       	ldi	r19, 0x00	; 0
    22ce:	40 e8       	ldi	r20, 0x80	; 128
    22d0:	5f e3       	ldi	r21, 0x3F	; 63
    22d2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22d6:	88 23       	and	r24, r24
    22d8:	2c f4       	brge	.+10     	; 0x22e4 <main+0x452>
		__ticks = 1;
    22da:	81 e0       	ldi	r24, 0x01	; 1
    22dc:	90 e0       	ldi	r25, 0x00	; 0
    22de:	9e 83       	std	Y+6, r25	; 0x06
    22e0:	8d 83       	std	Y+5, r24	; 0x05
    22e2:	3f c0       	rjmp	.+126    	; 0x2362 <main+0x4d0>
	else if (__tmp > 65535)
    22e4:	6f 81       	ldd	r22, Y+7	; 0x07
    22e6:	78 85       	ldd	r23, Y+8	; 0x08
    22e8:	89 85       	ldd	r24, Y+9	; 0x09
    22ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    22ec:	20 e0       	ldi	r18, 0x00	; 0
    22ee:	3f ef       	ldi	r19, 0xFF	; 255
    22f0:	4f e7       	ldi	r20, 0x7F	; 127
    22f2:	57 e4       	ldi	r21, 0x47	; 71
    22f4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22f8:	18 16       	cp	r1, r24
    22fa:	4c f5       	brge	.+82     	; 0x234e <main+0x4bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    22fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2300:	8d 85       	ldd	r24, Y+13	; 0x0d
    2302:	9e 85       	ldd	r25, Y+14	; 0x0e
    2304:	20 e0       	ldi	r18, 0x00	; 0
    2306:	30 e0       	ldi	r19, 0x00	; 0
    2308:	40 e2       	ldi	r20, 0x20	; 32
    230a:	51 e4       	ldi	r21, 0x41	; 65
    230c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2310:	dc 01       	movw	r26, r24
    2312:	cb 01       	movw	r24, r22
    2314:	bc 01       	movw	r22, r24
    2316:	cd 01       	movw	r24, r26
    2318:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    231c:	dc 01       	movw	r26, r24
    231e:	cb 01       	movw	r24, r22
    2320:	9e 83       	std	Y+6, r25	; 0x06
    2322:	8d 83       	std	Y+5, r24	; 0x05
    2324:	0f c0       	rjmp	.+30     	; 0x2344 <main+0x4b2>
    2326:	89 e1       	ldi	r24, 0x19	; 25
    2328:	90 e0       	ldi	r25, 0x00	; 0
    232a:	9c 83       	std	Y+4, r25	; 0x04
    232c:	8b 83       	std	Y+3, r24	; 0x03
    232e:	8b 81       	ldd	r24, Y+3	; 0x03
    2330:	9c 81       	ldd	r25, Y+4	; 0x04
    2332:	01 97       	sbiw	r24, 0x01	; 1
    2334:	f1 f7       	brne	.-4      	; 0x2332 <main+0x4a0>
    2336:	9c 83       	std	Y+4, r25	; 0x04
    2338:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    233a:	8d 81       	ldd	r24, Y+5	; 0x05
    233c:	9e 81       	ldd	r25, Y+6	; 0x06
    233e:	01 97       	sbiw	r24, 0x01	; 1
    2340:	9e 83       	std	Y+6, r25	; 0x06
    2342:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2344:	8d 81       	ldd	r24, Y+5	; 0x05
    2346:	9e 81       	ldd	r25, Y+6	; 0x06
    2348:	00 97       	sbiw	r24, 0x00	; 0
    234a:	69 f7       	brne	.-38     	; 0x2326 <main+0x494>
    234c:	14 c0       	rjmp	.+40     	; 0x2376 <main+0x4e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    234e:	6f 81       	ldd	r22, Y+7	; 0x07
    2350:	78 85       	ldd	r23, Y+8	; 0x08
    2352:	89 85       	ldd	r24, Y+9	; 0x09
    2354:	9a 85       	ldd	r25, Y+10	; 0x0a
    2356:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    235a:	dc 01       	movw	r26, r24
    235c:	cb 01       	movw	r24, r22
    235e:	9e 83       	std	Y+6, r25	; 0x06
    2360:	8d 83       	std	Y+5, r24	; 0x05
    2362:	8d 81       	ldd	r24, Y+5	; 0x05
    2364:	9e 81       	ldd	r25, Y+6	; 0x06
    2366:	9a 83       	std	Y+2, r25	; 0x02
    2368:	89 83       	std	Y+1, r24	; 0x01
    236a:	89 81       	ldd	r24, Y+1	; 0x01
    236c:	9a 81       	ldd	r25, Y+2	; 0x02
    236e:	01 97       	sbiw	r24, 0x01	; 1
    2370:	f1 f7       	brne	.-4      	; 0x236e <main+0x4dc>
    2372:	9a 83       	std	Y+2, r25	; 0x02
    2374:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(EEPROM_READ_DELAY_VALUE);
			/*
			 * Calculate the Stored temperature after getting
			 * the first and second digit from external memory
			 */
			storedTemperature = (temperatureTens*10) + temperatureZero;
    2376:	8f a9       	ldd	r24, Y+55	; 0x37
    2378:	88 2f       	mov	r24, r24
    237a:	90 e0       	ldi	r25, 0x00	; 0
    237c:	9c 01       	movw	r18, r24
    237e:	22 0f       	add	r18, r18
    2380:	33 1f       	adc	r19, r19
    2382:	c9 01       	movw	r24, r18
    2384:	88 0f       	add	r24, r24
    2386:	99 1f       	adc	r25, r25
    2388:	88 0f       	add	r24, r24
    238a:	99 1f       	adc	r25, r25
    238c:	28 0f       	add	r18, r24
    238e:	39 1f       	adc	r19, r25
    2390:	8e a9       	ldd	r24, Y+54	; 0x36
    2392:	88 2f       	mov	r24, r24
    2394:	90 e0       	ldi	r25, 0x00	; 0
    2396:	82 0f       	add	r24, r18
    2398:	93 1f       	adc	r25, r19
    239a:	aa 27       	eor	r26, r26
    239c:	97 fd       	sbrc	r25, 7
    239e:	a0 95       	com	r26
    23a0:	ba 2f       	mov	r27, r26
    23a2:	88 ab       	std	Y+48, r24	; 0x30
    23a4:	99 ab       	std	Y+49, r25	; 0x31
    23a6:	aa ab       	std	Y+50, r26	; 0x32
    23a8:	bb ab       	std	Y+51, r27	; 0x33
			/**************************************************************************
			 *                 (1-1) HEATING-COOLING ELEMENT CHECK
			 **************************************************************************/

			/*Condition of Turn on Cooling Element*/
			if( (current_temperature ) > (storedTemperature + DIFFERANCE_VALUE) )
    23aa:	88 a9       	ldd	r24, Y+48	; 0x30
    23ac:	99 a9       	ldd	r25, Y+49	; 0x31
    23ae:	aa a9       	ldd	r26, Y+50	; 0x32
    23b0:	bb a9       	ldd	r27, Y+51	; 0x33
    23b2:	9c 01       	movw	r18, r24
    23b4:	ad 01       	movw	r20, r26
    23b6:	2b 5f       	subi	r18, 0xFB	; 251
    23b8:	3f 4f       	sbci	r19, 0xFF	; 255
    23ba:	4f 4f       	sbci	r20, 0xFF	; 255
    23bc:	5f 4f       	sbci	r21, 0xFF	; 255
    23be:	8b a5       	ldd	r24, Y+43	; 0x2b
    23c0:	9c a5       	ldd	r25, Y+44	; 0x2c
    23c2:	ad a5       	ldd	r26, Y+45	; 0x2d
    23c4:	be a5       	ldd	r27, Y+46	; 0x2e
    23c6:	28 17       	cp	r18, r24
    23c8:	39 07       	cpc	r19, r25
    23ca:	4a 07       	cpc	r20, r26
    23cc:	5b 07       	cpc	r21, r27
    23ce:	48 f4       	brcc	.+18     	; 0x23e2 <main+0x550>
			{
				/*
				 * Turn on the motor to work on Clock wise direction
				 * to act as Fan for cooling
				 */
				DC_motor_on_ClockWise();
    23d0:	0e 94 36 07 	call	0xe6c	; 0xe6c <DC_motor_on_ClockWise>
				/*
				 * Turn on the Cooling LED
				 */
				LED_ON(LED1);
    23d4:	80 e0       	ldi	r24, 0x00	; 0
    23d6:	0e 94 b2 07 	call	0xf64	; 0xf64 <LED_ON>
				/*
				 * Turn off the heating LED
				 */
				LED_OFF(LED2);
    23da:	81 e0       	ldi	r24, 0x01	; 1
    23dc:	0e 94 e7 07 	call	0xfce	; 0xfce <LED_OFF>
    23e0:	24 c0       	rjmp	.+72     	; 0x242a <main+0x598>

			}
			/*Condition of Turn on Heating Element*/
			else if( (current_temperature ) < (storedTemperature - DIFFERANCE_VALUE) )
    23e2:	88 a9       	ldd	r24, Y+48	; 0x30
    23e4:	99 a9       	ldd	r25, Y+49	; 0x31
    23e6:	aa a9       	ldd	r26, Y+50	; 0x32
    23e8:	bb a9       	ldd	r27, Y+51	; 0x33
    23ea:	9c 01       	movw	r18, r24
    23ec:	ad 01       	movw	r20, r26
    23ee:	25 50       	subi	r18, 0x05	; 5
    23f0:	30 40       	sbci	r19, 0x00	; 0
    23f2:	40 40       	sbci	r20, 0x00	; 0
    23f4:	50 40       	sbci	r21, 0x00	; 0
    23f6:	8b a5       	ldd	r24, Y+43	; 0x2b
    23f8:	9c a5       	ldd	r25, Y+44	; 0x2c
    23fa:	ad a5       	ldd	r26, Y+45	; 0x2d
    23fc:	be a5       	ldd	r27, Y+46	; 0x2e
    23fe:	82 17       	cp	r24, r18
    2400:	93 07       	cpc	r25, r19
    2402:	a4 07       	cpc	r26, r20
    2404:	b5 07       	cpc	r27, r21
    2406:	48 f4       	brcc	.+18     	; 0x241a <main+0x588>
			{
				/*
				 * Turn on  the heating element
				 */
				LED_ON(LED2);
    2408:	81 e0       	ldi	r24, 0x01	; 1
    240a:	0e 94 b2 07 	call	0xf64	; 0xf64 <LED_ON>
				/*
				 * Turn off the cooling element
				 */
				LED_OFF(LED1);
    240e:	80 e0       	ldi	r24, 0x00	; 0
    2410:	0e 94 e7 07 	call	0xfce	; 0xfce <LED_OFF>
				/*
				 * force the motor to stop
				 */
				DC_motor_on_Stop();
    2414:	0e 94 74 07 	call	0xee8	; 0xee8 <DC_motor_on_Stop>
    2418:	08 c0       	rjmp	.+16     	; 0x242a <main+0x598>
			else
			{
				/*
				 * force the motor to stop
				 */
				DC_motor_on_Stop();
    241a:	0e 94 74 07 	call	0xee8	; 0xee8 <DC_motor_on_Stop>
				/*
				 * Turn off the cooling element
				 */
				LED_OFF(LED1);
    241e:	80 e0       	ldi	r24, 0x00	; 0
    2420:	0e 94 e7 07 	call	0xfce	; 0xfce <LED_OFF>
				/*
				 * Turn off the heating element
				 */
				LED_OFF(LED2);
    2424:	81 e0       	ldi	r24, 0x01	; 1
    2426:	0e 94 e7 07 	call	0xfce	; 0xfce <LED_OFF>
			}
			/**************************************************************************
			 *     (1-2)  DISPLAYING STORED TEMPERATURE AT FIRST OF ON STATE STAGE    *
			 **************************************************************************/
			if(eepromFlag == TRUE)
    242a:	8f a5       	ldd	r24, Y+47	; 0x2f
    242c:	81 30       	cpi	r24, 0x01	; 1
    242e:	c1 f4       	brne	.+48     	; 0x2460 <main+0x5ce>
			{
				/*
				 *Start the timer to count seconds
				 */
				Timer_start(Timer1, F_CPU_1024);
    2430:	81 e0       	ldi	r24, 0x01	; 1
    2432:	65 e0       	ldi	r22, 0x05	; 5
    2434:	0e 94 2c 1b 	call	0x3658	; 0x3658 <Timer_start>

				if(g_tick < MAXIMUM_NUMBER_OF_SECONDS)
    2438:	80 91 82 01 	lds	r24, 0x0182
    243c:	85 30       	cpi	r24, 0x05	; 5
    243e:	48 f4       	brcc	.+18     	; 0x2452 <main+0x5c0>
				{
					/*
					 * displaying the set temperature in flashing mode
					 */
					FlashingSegments(storedTemperature);
    2440:	88 a9       	ldd	r24, Y+48	; 0x30
    2442:	99 a9       	ldd	r25, Y+49	; 0x31
    2444:	aa a9       	ldd	r26, Y+50	; 0x32
    2446:	bb a9       	ldd	r27, Y+51	; 0x33
    2448:	bc 01       	movw	r22, r24
    244a:	cd 01       	movw	r24, r26
    244c:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <FlashingSegments>
    2450:	ff cd       	rjmp	.-1026   	; 0x2050 <main+0x1be>
				else
				{
					/*
					 * stop the timer from count
					 */
					Timer_stop(Timer1);
    2452:	81 e0       	ldi	r24, 0x01	; 1
    2454:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <Timer_stop>

					/*
					 * return g_tick to its initial value be ready to
					 * count another MAXIMUM_NUMBER_OF_SECONDS
					 */
					g_tick = INITIAL_VALUE;
    2458:	10 92 82 01 	sts	0x0182, r1
					/*
					 * Change the state of eepromFlag to TRUE
					 * to prevent displaying flashing stored temperature
					 * from occurrence more than one time in ON-State
					 */
					eepromFlag = FALSE;
    245c:	1f a6       	std	Y+47, r1	; 0x2f
    245e:	f8 cd       	rjmp	.-1040   	; 0x2050 <main+0x1be>
				}
			}
			/**************************************************************************
			 *                     (1-3)  UP BUTTON STAGE                             *
			 **************************************************************************/
			else if(g_upInterrupt_SWflag == TRUE)
    2460:	80 91 84 01 	lds	r24, 0x0184
    2464:	81 30       	cpi	r24, 0x01	; 1
    2466:	49 f5       	brne	.+82     	; 0x24ba <main+0x628>
			{
				/*
				 * Store the value of the set temperature in
				 * the external memory every UP occurrence
				 */
				store_inMemory(g_setTemprature);
    2468:	80 91 6b 01 	lds	r24, 0x016B
    246c:	90 91 6c 01 	lds	r25, 0x016C
    2470:	a0 91 6d 01 	lds	r26, 0x016D
    2474:	b0 91 6e 01 	lds	r27, 0x016E
    2478:	bc 01       	movw	r22, r24
    247a:	cd 01       	movw	r24, r26
    247c:	0e 94 1a 0b 	call	0x1634	; 0x1634 <store_inMemory>
				/*
				 *Start the timer to count seconds
				 */
				Timer_start(Timer1, F_CPU_1024);
    2480:	81 e0       	ldi	r24, 0x01	; 1
    2482:	65 e0       	ldi	r22, 0x05	; 5
    2484:	0e 94 2c 1b 	call	0x3658	; 0x3658 <Timer_start>

				if(g_tick < MAXIMUM_NUMBER_OF_SECONDS)
    2488:	80 91 82 01 	lds	r24, 0x0182
    248c:	85 30       	cpi	r24, 0x05	; 5
    248e:	68 f4       	brcc	.+26     	; 0x24aa <main+0x618>
				{
					/*
					 * displaying the set temperature in flashing mode
					 */
					FlashingSegments(g_setTemprature);
    2490:	80 91 6b 01 	lds	r24, 0x016B
    2494:	90 91 6c 01 	lds	r25, 0x016C
    2498:	a0 91 6d 01 	lds	r26, 0x016D
    249c:	b0 91 6e 01 	lds	r27, 0x016E
    24a0:	bc 01       	movw	r22, r24
    24a2:	cd 01       	movw	r24, r26
    24a4:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <FlashingSegments>
    24a8:	d3 cd       	rjmp	.-1114   	; 0x2050 <main+0x1be>
				else
				{
					/*
					 * stop the timer from count
					 */
					Timer_stop(Timer1);
    24aa:	81 e0       	ldi	r24, 0x01	; 1
    24ac:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <Timer_stop>
					/*
					 * return g_tick to its initial value be ready to
					 * count another MAXIMUM_NUMBER_OF_SECONDS
					 */
					g_tick = INITIAL_VALUE;
    24b0:	10 92 82 01 	sts	0x0182, r1
					/*
					 * Change the g_upInterrupt_SWflag to FALSE again
					 * to be ready to get UP interrupt again and
					 * stop increasing Set temperature
					 */
					g_upInterrupt_SWflag = FALSE;
    24b4:	10 92 84 01 	sts	0x0184, r1
    24b8:	cb cd       	rjmp	.-1130   	; 0x2050 <main+0x1be>

			}
			/**************************************************************************
			 *                     (1-3)  Down BUTTON STAGE                           *
			 **************************************************************************/
			else if(g_downInterrupt_SWflag == TRUE)
    24ba:	80 91 85 01 	lds	r24, 0x0185
    24be:	81 30       	cpi	r24, 0x01	; 1
    24c0:	49 f5       	brne	.+82     	; 0x2514 <main+0x682>
			{
				/*
				 * Store the value of the set temperature in
				 * the external memory every UP occurrence
				 */
				store_inMemory(g_setTemprature);
    24c2:	80 91 6b 01 	lds	r24, 0x016B
    24c6:	90 91 6c 01 	lds	r25, 0x016C
    24ca:	a0 91 6d 01 	lds	r26, 0x016D
    24ce:	b0 91 6e 01 	lds	r27, 0x016E
    24d2:	bc 01       	movw	r22, r24
    24d4:	cd 01       	movw	r24, r26
    24d6:	0e 94 1a 0b 	call	0x1634	; 0x1634 <store_inMemory>
				/*
				 *Start the timer to count seconds
				 */
				Timer_start(Timer1, F_CPU_1024);
    24da:	81 e0       	ldi	r24, 0x01	; 1
    24dc:	65 e0       	ldi	r22, 0x05	; 5
    24de:	0e 94 2c 1b 	call	0x3658	; 0x3658 <Timer_start>

				if(g_tick < MAXIMUM_NUMBER_OF_SECONDS)
    24e2:	80 91 82 01 	lds	r24, 0x0182
    24e6:	85 30       	cpi	r24, 0x05	; 5
    24e8:	68 f4       	brcc	.+26     	; 0x2504 <main+0x672>
				{
					/*
					 * displaying the set temperature in flashing mode
					 */
					FlashingSegments(g_setTemprature);
    24ea:	80 91 6b 01 	lds	r24, 0x016B
    24ee:	90 91 6c 01 	lds	r25, 0x016C
    24f2:	a0 91 6d 01 	lds	r26, 0x016D
    24f6:	b0 91 6e 01 	lds	r27, 0x016E
    24fa:	bc 01       	movw	r22, r24
    24fc:	cd 01       	movw	r24, r26
    24fe:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <FlashingSegments>
    2502:	a6 cd       	rjmp	.-1204   	; 0x2050 <main+0x1be>
				else
				{
					/*
					 * stop the timer from count
					 */
					Timer_stop(Timer1);
    2504:	81 e0       	ldi	r24, 0x01	; 1
    2506:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <Timer_stop>
					/*
					 * return g_tick to its initial value be ready to
					 * count another MAXIMUM_NUMBER_OF_SECONDS
					 */
					g_tick = INITIAL_VALUE;
    250a:	10 92 82 01 	sts	0x0182, r1
					/*
					 * Change the g_downInterrupt_SWflag to FALSE again
					 * to be ready to get UP interrupt again and
					 * stop decreasing Set temperature
					 */
					g_downInterrupt_SWflag = FALSE;
    250e:	10 92 85 01 	sts	0x0185, r1
    2512:	9e cd       	rjmp	.-1220   	; 0x2050 <main+0x1be>
			else
			{
				/*
				 * display current temperature of the sensor on 7-segments
				 */
				displayTemperature(current_temperature);
    2514:	8b a5       	ldd	r24, Y+43	; 0x2b
    2516:	9c a5       	ldd	r25, Y+44	; 0x2c
    2518:	ad a5       	ldd	r26, Y+45	; 0x2d
    251a:	be a5       	ldd	r27, Y+46	; 0x2e
    251c:	bc 01       	movw	r22, r24
    251e:	cd 01       	movw	r24, r26
    2520:	0e 94 a6 08 	call	0x114c	; 0x114c <displayTemperature>
    2524:	95 cd       	rjmp	.-1238   	; 0x2050 <main+0x1be>

		}/*End of ON_OFF button in ON state*/
		/**************************************************************************
		 *                            (2)  OFF STATE                              *
		 **************************************************************************/
		else if( MOD_BY_TWO(OnOff_ModeCheck) == OFF_STATE )
    2526:	8d a9       	ldd	r24, Y+53	; 0x35
    2528:	88 2f       	mov	r24, r24
    252a:	90 e0       	ldi	r25, 0x00	; 0
    252c:	81 70       	andi	r24, 0x01	; 1
    252e:	90 70       	andi	r25, 0x00	; 0
    2530:	00 97       	sbiw	r24, 0x00	; 0
    2532:	09 f0       	breq	.+2      	; 0x2536 <main+0x6a4>
    2534:	8d cd       	rjmp	.-1254   	; 0x2050 <main+0x1be>
		{
			/*
			 * Close the 7-Segments in OFF_STATE
			 */
			disableSegments();
    2536:	0e 94 ed 09 	call	0x13da	; 0x13da <disableSegments>
			/*
			 * force the motor to stop
			 */
			DC_motor_on_Stop();
    253a:	0e 94 74 07 	call	0xee8	; 0xee8 <DC_motor_on_Stop>
			/*
			 * Turn off the cooling element
			 */
			LED_OFF(LED1);
    253e:	80 e0       	ldi	r24, 0x00	; 0
    2540:	0e 94 e7 07 	call	0xfce	; 0xfce <LED_OFF>
			/*
			 * Turn off the heating element
			 */
			LED_OFF(LED2);
    2544:	81 e0       	ldi	r24, 0x01	; 1
    2546:	0e 94 e7 07 	call	0xfce	; 0xfce <LED_OFF>
			/*
			 * to prevent UP interrupt from occurrence in the OFF state
			 */
			g_upInterrupt_SWflag = FALSE;
    254a:	10 92 84 01 	sts	0x0184, r1
			/*
			 * to prevent UDown interrupt from occurrence in the OFF state
			 */
			g_downInterrupt_SWflag = FALSE;
    254e:	10 92 85 01 	sts	0x0185, r1
			/*
			 * Change the state of eepromFlag to TRUE
			 * to prevent displaying flashing stored temperature
			 * from occurrence more than one time in ON-State
			 */
			eepromFlag= TRUE;
    2552:	81 e0       	ldi	r24, 0x01	; 1
    2554:	8f a7       	std	Y+47, r24	; 0x2f
			/*
			 * return g_tick to its initial value be ready to
			 * count another MAXIMUM_NUMBER_OF_SECONDS to start seconds
			 * of displaying stored temperature from initial value
			 */
			g_tick = INITIAL_VALUE;
    2556:	10 92 82 01 	sts	0x0182, r1
    255a:	7a cd       	rjmp	.-1292   	; 0x2050 <main+0x1be>

0000255c <__vector_9>:

/**************************************************************************
 *                              Timer0
 * ************************************************************************/
ISR(TIMER0_OVF_vect)
{
    255c:	1f 92       	push	r1
    255e:	0f 92       	push	r0
    2560:	0f b6       	in	r0, 0x3f	; 63
    2562:	0f 92       	push	r0
    2564:	11 24       	eor	r1, r1
    2566:	2f 93       	push	r18
    2568:	3f 93       	push	r19
    256a:	4f 93       	push	r20
    256c:	5f 93       	push	r21
    256e:	6f 93       	push	r22
    2570:	7f 93       	push	r23
    2572:	8f 93       	push	r24
    2574:	9f 93       	push	r25
    2576:	af 93       	push	r26
    2578:	bf 93       	push	r27
    257a:	ef 93       	push	r30
    257c:	ff 93       	push	r31
    257e:	df 93       	push	r29
    2580:	cf 93       	push	r28
    2582:	cd b7       	in	r28, 0x3d	; 61
    2584:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer0_callBackPtr != NULL_PTR)
    2586:	80 91 86 01 	lds	r24, 0x0186
    258a:	90 91 87 01 	lds	r25, 0x0187
    258e:	00 97       	sbiw	r24, 0x00	; 0
    2590:	29 f0       	breq	.+10     	; 0x259c <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_Timer0_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2592:	e0 91 86 01 	lds	r30, 0x0186
    2596:	f0 91 87 01 	lds	r31, 0x0187
    259a:	09 95       	icall
	}
	/* Clear the flag of timer0 over flow Interrupt*/
	TIFR = SET_BIT(TIFR, TOV0);
    259c:	28 e5       	ldi	r18, 0x58	; 88
    259e:	30 e0       	ldi	r19, 0x00	; 0
    25a0:	a8 e5       	ldi	r26, 0x58	; 88
    25a2:	b0 e0       	ldi	r27, 0x00	; 0
    25a4:	e8 e5       	ldi	r30, 0x58	; 88
    25a6:	f0 e0       	ldi	r31, 0x00	; 0
    25a8:	80 81       	ld	r24, Z
    25aa:	81 60       	ori	r24, 0x01	; 1
    25ac:	8c 93       	st	X, r24
    25ae:	8c 91       	ld	r24, X
    25b0:	f9 01       	movw	r30, r18
    25b2:	80 83       	st	Z, r24
}
    25b4:	cf 91       	pop	r28
    25b6:	df 91       	pop	r29
    25b8:	ff 91       	pop	r31
    25ba:	ef 91       	pop	r30
    25bc:	bf 91       	pop	r27
    25be:	af 91       	pop	r26
    25c0:	9f 91       	pop	r25
    25c2:	8f 91       	pop	r24
    25c4:	7f 91       	pop	r23
    25c6:	6f 91       	pop	r22
    25c8:	5f 91       	pop	r21
    25ca:	4f 91       	pop	r20
    25cc:	3f 91       	pop	r19
    25ce:	2f 91       	pop	r18
    25d0:	0f 90       	pop	r0
    25d2:	0f be       	out	0x3f, r0	; 63
    25d4:	0f 90       	pop	r0
    25d6:	1f 90       	pop	r1
    25d8:	18 95       	reti

000025da <__vector_19>:

ISR(TIMER0_COMP_vect)
{
    25da:	1f 92       	push	r1
    25dc:	0f 92       	push	r0
    25de:	0f b6       	in	r0, 0x3f	; 63
    25e0:	0f 92       	push	r0
    25e2:	11 24       	eor	r1, r1
    25e4:	2f 93       	push	r18
    25e6:	3f 93       	push	r19
    25e8:	4f 93       	push	r20
    25ea:	5f 93       	push	r21
    25ec:	6f 93       	push	r22
    25ee:	7f 93       	push	r23
    25f0:	8f 93       	push	r24
    25f2:	9f 93       	push	r25
    25f4:	af 93       	push	r26
    25f6:	bf 93       	push	r27
    25f8:	ef 93       	push	r30
    25fa:	ff 93       	push	r31
    25fc:	df 93       	push	r29
    25fe:	cf 93       	push	r28
    2600:	cd b7       	in	r28, 0x3d	; 61
    2602:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer0_callBackPtr != NULL_PTR)
    2604:	80 91 86 01 	lds	r24, 0x0186
    2608:	90 91 87 01 	lds	r25, 0x0187
    260c:	00 97       	sbiw	r24, 0x00	; 0
    260e:	29 f0       	breq	.+10     	; 0x261a <__vector_19+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_Timer0_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2610:	e0 91 86 01 	lds	r30, 0x0186
    2614:	f0 91 87 01 	lds	r31, 0x0187
    2618:	09 95       	icall
	}
	/* Clear the flag of timer0 compare Interrupt*/
	TIFR = SET_BIT(TIFR, OCF0);
    261a:	28 e5       	ldi	r18, 0x58	; 88
    261c:	30 e0       	ldi	r19, 0x00	; 0
    261e:	a8 e5       	ldi	r26, 0x58	; 88
    2620:	b0 e0       	ldi	r27, 0x00	; 0
    2622:	e8 e5       	ldi	r30, 0x58	; 88
    2624:	f0 e0       	ldi	r31, 0x00	; 0
    2626:	80 81       	ld	r24, Z
    2628:	82 60       	ori	r24, 0x02	; 2
    262a:	8c 93       	st	X, r24
    262c:	8c 91       	ld	r24, X
    262e:	f9 01       	movw	r30, r18
    2630:	80 83       	st	Z, r24
}
    2632:	cf 91       	pop	r28
    2634:	df 91       	pop	r29
    2636:	ff 91       	pop	r31
    2638:	ef 91       	pop	r30
    263a:	bf 91       	pop	r27
    263c:	af 91       	pop	r26
    263e:	9f 91       	pop	r25
    2640:	8f 91       	pop	r24
    2642:	7f 91       	pop	r23
    2644:	6f 91       	pop	r22
    2646:	5f 91       	pop	r21
    2648:	4f 91       	pop	r20
    264a:	3f 91       	pop	r19
    264c:	2f 91       	pop	r18
    264e:	0f 90       	pop	r0
    2650:	0f be       	out	0x3f, r0	; 63
    2652:	0f 90       	pop	r0
    2654:	1f 90       	pop	r1
    2656:	18 95       	reti

00002658 <__vector_8>:

/**************************************************************************
 *                              Timer1
 * ************************************************************************/
ISR(TIMER1_OVF_vect)
{
    2658:	1f 92       	push	r1
    265a:	0f 92       	push	r0
    265c:	0f b6       	in	r0, 0x3f	; 63
    265e:	0f 92       	push	r0
    2660:	11 24       	eor	r1, r1
    2662:	2f 93       	push	r18
    2664:	3f 93       	push	r19
    2666:	4f 93       	push	r20
    2668:	5f 93       	push	r21
    266a:	6f 93       	push	r22
    266c:	7f 93       	push	r23
    266e:	8f 93       	push	r24
    2670:	9f 93       	push	r25
    2672:	af 93       	push	r26
    2674:	bf 93       	push	r27
    2676:	ef 93       	push	r30
    2678:	ff 93       	push	r31
    267a:	df 93       	push	r29
    267c:	cf 93       	push	r28
    267e:	cd b7       	in	r28, 0x3d	; 61
    2680:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer1_callBackPtr != NULL_PTR)
    2682:	80 91 88 01 	lds	r24, 0x0188
    2686:	90 91 89 01 	lds	r25, 0x0189
    268a:	00 97       	sbiw	r24, 0x00	; 0
    268c:	29 f0       	breq	.+10     	; 0x2698 <__vector_8+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_Timer1_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    268e:	e0 91 88 01 	lds	r30, 0x0188
    2692:	f0 91 89 01 	lds	r31, 0x0189
    2696:	09 95       	icall
	}
	/* Clear the flag of timer1 over flow Interrupt*/
	TIFR = SET_BIT(TIFR, TOV1);
    2698:	28 e5       	ldi	r18, 0x58	; 88
    269a:	30 e0       	ldi	r19, 0x00	; 0
    269c:	a8 e5       	ldi	r26, 0x58	; 88
    269e:	b0 e0       	ldi	r27, 0x00	; 0
    26a0:	e8 e5       	ldi	r30, 0x58	; 88
    26a2:	f0 e0       	ldi	r31, 0x00	; 0
    26a4:	80 81       	ld	r24, Z
    26a6:	84 60       	ori	r24, 0x04	; 4
    26a8:	8c 93       	st	X, r24
    26aa:	8c 91       	ld	r24, X
    26ac:	f9 01       	movw	r30, r18
    26ae:	80 83       	st	Z, r24

}
    26b0:	cf 91       	pop	r28
    26b2:	df 91       	pop	r29
    26b4:	ff 91       	pop	r31
    26b6:	ef 91       	pop	r30
    26b8:	bf 91       	pop	r27
    26ba:	af 91       	pop	r26
    26bc:	9f 91       	pop	r25
    26be:	8f 91       	pop	r24
    26c0:	7f 91       	pop	r23
    26c2:	6f 91       	pop	r22
    26c4:	5f 91       	pop	r21
    26c6:	4f 91       	pop	r20
    26c8:	3f 91       	pop	r19
    26ca:	2f 91       	pop	r18
    26cc:	0f 90       	pop	r0
    26ce:	0f be       	out	0x3f, r0	; 63
    26d0:	0f 90       	pop	r0
    26d2:	1f 90       	pop	r1
    26d4:	18 95       	reti

000026d6 <__vector_6>:

ISR(TIMER1_COMPA_vect)
{
    26d6:	1f 92       	push	r1
    26d8:	0f 92       	push	r0
    26da:	0f b6       	in	r0, 0x3f	; 63
    26dc:	0f 92       	push	r0
    26de:	11 24       	eor	r1, r1
    26e0:	2f 93       	push	r18
    26e2:	3f 93       	push	r19
    26e4:	4f 93       	push	r20
    26e6:	5f 93       	push	r21
    26e8:	6f 93       	push	r22
    26ea:	7f 93       	push	r23
    26ec:	8f 93       	push	r24
    26ee:	9f 93       	push	r25
    26f0:	af 93       	push	r26
    26f2:	bf 93       	push	r27
    26f4:	ef 93       	push	r30
    26f6:	ff 93       	push	r31
    26f8:	df 93       	push	r29
    26fa:	cf 93       	push	r28
    26fc:	cd b7       	in	r28, 0x3d	; 61
    26fe:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer1_callBackPtr != NULL_PTR)
    2700:	80 91 88 01 	lds	r24, 0x0188
    2704:	90 91 89 01 	lds	r25, 0x0189
    2708:	00 97       	sbiw	r24, 0x00	; 0
    270a:	29 f0       	breq	.+10     	; 0x2716 <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_Timer1_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    270c:	e0 91 88 01 	lds	r30, 0x0188
    2710:	f0 91 89 01 	lds	r31, 0x0189
    2714:	09 95       	icall
	}
	/* Clear the flag of timer1 compare Interrupt for channelA*/
	TIFR = SET_BIT(TIFR, OCF1A);
    2716:	28 e5       	ldi	r18, 0x58	; 88
    2718:	30 e0       	ldi	r19, 0x00	; 0
    271a:	a8 e5       	ldi	r26, 0x58	; 88
    271c:	b0 e0       	ldi	r27, 0x00	; 0
    271e:	e8 e5       	ldi	r30, 0x58	; 88
    2720:	f0 e0       	ldi	r31, 0x00	; 0
    2722:	80 81       	ld	r24, Z
    2724:	80 61       	ori	r24, 0x10	; 16
    2726:	8c 93       	st	X, r24
    2728:	8c 91       	ld	r24, X
    272a:	f9 01       	movw	r30, r18
    272c:	80 83       	st	Z, r24

}
    272e:	cf 91       	pop	r28
    2730:	df 91       	pop	r29
    2732:	ff 91       	pop	r31
    2734:	ef 91       	pop	r30
    2736:	bf 91       	pop	r27
    2738:	af 91       	pop	r26
    273a:	9f 91       	pop	r25
    273c:	8f 91       	pop	r24
    273e:	7f 91       	pop	r23
    2740:	6f 91       	pop	r22
    2742:	5f 91       	pop	r21
    2744:	4f 91       	pop	r20
    2746:	3f 91       	pop	r19
    2748:	2f 91       	pop	r18
    274a:	0f 90       	pop	r0
    274c:	0f be       	out	0x3f, r0	; 63
    274e:	0f 90       	pop	r0
    2750:	1f 90       	pop	r1
    2752:	18 95       	reti

00002754 <__vector_7>:

ISR(TIMER1_COMPB_vect)
{
    2754:	1f 92       	push	r1
    2756:	0f 92       	push	r0
    2758:	0f b6       	in	r0, 0x3f	; 63
    275a:	0f 92       	push	r0
    275c:	11 24       	eor	r1, r1
    275e:	2f 93       	push	r18
    2760:	3f 93       	push	r19
    2762:	4f 93       	push	r20
    2764:	5f 93       	push	r21
    2766:	6f 93       	push	r22
    2768:	7f 93       	push	r23
    276a:	8f 93       	push	r24
    276c:	9f 93       	push	r25
    276e:	af 93       	push	r26
    2770:	bf 93       	push	r27
    2772:	ef 93       	push	r30
    2774:	ff 93       	push	r31
    2776:	df 93       	push	r29
    2778:	cf 93       	push	r28
    277a:	cd b7       	in	r28, 0x3d	; 61
    277c:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer1_callBackPtr != NULL_PTR)
    277e:	80 91 88 01 	lds	r24, 0x0188
    2782:	90 91 89 01 	lds	r25, 0x0189
    2786:	00 97       	sbiw	r24, 0x00	; 0
    2788:	29 f0       	breq	.+10     	; 0x2794 <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_Timer1_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    278a:	e0 91 88 01 	lds	r30, 0x0188
    278e:	f0 91 89 01 	lds	r31, 0x0189
    2792:	09 95       	icall
	}
	/* Clear the flag of timer1 compare Interrupt for channelB*/
	TIFR = SET_BIT(TIFR, OCF1B);
    2794:	28 e5       	ldi	r18, 0x58	; 88
    2796:	30 e0       	ldi	r19, 0x00	; 0
    2798:	a8 e5       	ldi	r26, 0x58	; 88
    279a:	b0 e0       	ldi	r27, 0x00	; 0
    279c:	e8 e5       	ldi	r30, 0x58	; 88
    279e:	f0 e0       	ldi	r31, 0x00	; 0
    27a0:	80 81       	ld	r24, Z
    27a2:	88 60       	ori	r24, 0x08	; 8
    27a4:	8c 93       	st	X, r24
    27a6:	8c 91       	ld	r24, X
    27a8:	f9 01       	movw	r30, r18
    27aa:	80 83       	st	Z, r24

}
    27ac:	cf 91       	pop	r28
    27ae:	df 91       	pop	r29
    27b0:	ff 91       	pop	r31
    27b2:	ef 91       	pop	r30
    27b4:	bf 91       	pop	r27
    27b6:	af 91       	pop	r26
    27b8:	9f 91       	pop	r25
    27ba:	8f 91       	pop	r24
    27bc:	7f 91       	pop	r23
    27be:	6f 91       	pop	r22
    27c0:	5f 91       	pop	r21
    27c2:	4f 91       	pop	r20
    27c4:	3f 91       	pop	r19
    27c6:	2f 91       	pop	r18
    27c8:	0f 90       	pop	r0
    27ca:	0f be       	out	0x3f, r0	; 63
    27cc:	0f 90       	pop	r0
    27ce:	1f 90       	pop	r1
    27d0:	18 95       	reti

000027d2 <__vector_4>:

/**************************************************************************
 *                              Timer2
 * ************************************************************************/
ISR(TIMER2_OVF_vect)
{
    27d2:	1f 92       	push	r1
    27d4:	0f 92       	push	r0
    27d6:	0f b6       	in	r0, 0x3f	; 63
    27d8:	0f 92       	push	r0
    27da:	11 24       	eor	r1, r1
    27dc:	2f 93       	push	r18
    27de:	3f 93       	push	r19
    27e0:	4f 93       	push	r20
    27e2:	5f 93       	push	r21
    27e4:	6f 93       	push	r22
    27e6:	7f 93       	push	r23
    27e8:	8f 93       	push	r24
    27ea:	9f 93       	push	r25
    27ec:	af 93       	push	r26
    27ee:	bf 93       	push	r27
    27f0:	ef 93       	push	r30
    27f2:	ff 93       	push	r31
    27f4:	df 93       	push	r29
    27f6:	cf 93       	push	r28
    27f8:	cd b7       	in	r28, 0x3d	; 61
    27fa:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer0_callBackPtr != NULL_PTR)
    27fc:	80 91 86 01 	lds	r24, 0x0186
    2800:	90 91 87 01 	lds	r25, 0x0187
    2804:	00 97       	sbiw	r24, 0x00	; 0
    2806:	29 f0       	breq	.+10     	; 0x2812 <__vector_4+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_Timer2_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2808:	e0 91 8a 01 	lds	r30, 0x018A
    280c:	f0 91 8b 01 	lds	r31, 0x018B
    2810:	09 95       	icall
	}

	/* Clear the flag of timer2 over flow Interrupt*/
	TIFR = SET_BIT(TIFR, TOV2);
    2812:	28 e5       	ldi	r18, 0x58	; 88
    2814:	30 e0       	ldi	r19, 0x00	; 0
    2816:	a8 e5       	ldi	r26, 0x58	; 88
    2818:	b0 e0       	ldi	r27, 0x00	; 0
    281a:	e8 e5       	ldi	r30, 0x58	; 88
    281c:	f0 e0       	ldi	r31, 0x00	; 0
    281e:	80 81       	ld	r24, Z
    2820:	80 64       	ori	r24, 0x40	; 64
    2822:	8c 93       	st	X, r24
    2824:	8c 91       	ld	r24, X
    2826:	f9 01       	movw	r30, r18
    2828:	80 83       	st	Z, r24

}
    282a:	cf 91       	pop	r28
    282c:	df 91       	pop	r29
    282e:	ff 91       	pop	r31
    2830:	ef 91       	pop	r30
    2832:	bf 91       	pop	r27
    2834:	af 91       	pop	r26
    2836:	9f 91       	pop	r25
    2838:	8f 91       	pop	r24
    283a:	7f 91       	pop	r23
    283c:	6f 91       	pop	r22
    283e:	5f 91       	pop	r21
    2840:	4f 91       	pop	r20
    2842:	3f 91       	pop	r19
    2844:	2f 91       	pop	r18
    2846:	0f 90       	pop	r0
    2848:	0f be       	out	0x3f, r0	; 63
    284a:	0f 90       	pop	r0
    284c:	1f 90       	pop	r1
    284e:	18 95       	reti

00002850 <__vector_3>:

ISR(TIMER2_COMP_vect)
{
    2850:	1f 92       	push	r1
    2852:	0f 92       	push	r0
    2854:	0f b6       	in	r0, 0x3f	; 63
    2856:	0f 92       	push	r0
    2858:	11 24       	eor	r1, r1
    285a:	2f 93       	push	r18
    285c:	3f 93       	push	r19
    285e:	4f 93       	push	r20
    2860:	5f 93       	push	r21
    2862:	6f 93       	push	r22
    2864:	7f 93       	push	r23
    2866:	8f 93       	push	r24
    2868:	9f 93       	push	r25
    286a:	af 93       	push	r26
    286c:	bf 93       	push	r27
    286e:	ef 93       	push	r30
    2870:	ff 93       	push	r31
    2872:	df 93       	push	r29
    2874:	cf 93       	push	r28
    2876:	cd b7       	in	r28, 0x3d	; 61
    2878:	de b7       	in	r29, 0x3e	; 62
	if(g_Timer2_callBackPtr != NULL_PTR)
    287a:	80 91 8a 01 	lds	r24, 0x018A
    287e:	90 91 8b 01 	lds	r25, 0x018B
    2882:	00 97       	sbiw	r24, 0x00	; 0
    2884:	29 f0       	breq	.+10     	; 0x2890 <__vector_3+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_Timer2_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2886:	e0 91 8a 01 	lds	r30, 0x018A
    288a:	f0 91 8b 01 	lds	r31, 0x018B
    288e:	09 95       	icall
	}
	/* Clear the flag of timer2 compare Interrupt*/
	TIFR = SET_BIT(TIFR, OCF2);
    2890:	28 e5       	ldi	r18, 0x58	; 88
    2892:	30 e0       	ldi	r19, 0x00	; 0
    2894:	a8 e5       	ldi	r26, 0x58	; 88
    2896:	b0 e0       	ldi	r27, 0x00	; 0
    2898:	e8 e5       	ldi	r30, 0x58	; 88
    289a:	f0 e0       	ldi	r31, 0x00	; 0
    289c:	80 81       	ld	r24, Z
    289e:	80 68       	ori	r24, 0x80	; 128
    28a0:	8c 93       	st	X, r24
    28a2:	8c 91       	ld	r24, X
    28a4:	f9 01       	movw	r30, r18
    28a6:	80 83       	st	Z, r24
}
    28a8:	cf 91       	pop	r28
    28aa:	df 91       	pop	r29
    28ac:	ff 91       	pop	r31
    28ae:	ef 91       	pop	r30
    28b0:	bf 91       	pop	r27
    28b2:	af 91       	pop	r26
    28b4:	9f 91       	pop	r25
    28b6:	8f 91       	pop	r24
    28b8:	7f 91       	pop	r23
    28ba:	6f 91       	pop	r22
    28bc:	5f 91       	pop	r21
    28be:	4f 91       	pop	r20
    28c0:	3f 91       	pop	r19
    28c2:	2f 91       	pop	r18
    28c4:	0f 90       	pop	r0
    28c6:	0f be       	out	0x3f, r0	; 63
    28c8:	0f 90       	pop	r0
    28ca:	1f 90       	pop	r1
    28cc:	18 95       	reti

000028ce <Timer_init>:
 *
 * [Returns]:      NONE
 ***************************************************************************************************/

void Timer_init(const Timer_ConfigType * Config_Ptr)
{
    28ce:	df 93       	push	r29
    28d0:	cf 93       	push	r28
    28d2:	cd b7       	in	r28, 0x3d	; 61
    28d4:	de b7       	in	r29, 0x3e	; 62
    28d6:	a2 97       	sbiw	r28, 0x22	; 34
    28d8:	0f b6       	in	r0, 0x3f	; 63
    28da:	f8 94       	cli
    28dc:	de bf       	out	0x3e, r29	; 62
    28de:	0f be       	out	0x3f, r0	; 63
    28e0:	cd bf       	out	0x3d, r28	; 61
    28e2:	9a 83       	std	Y+2, r25	; 0x02
    28e4:	89 83       	std	Y+1, r24	; 0x01

	switch( (Config_Ptr->timer_ID) )
    28e6:	e9 81       	ldd	r30, Y+1	; 0x01
    28e8:	fa 81       	ldd	r31, Y+2	; 0x02
    28ea:	80 85       	ldd	r24, Z+8	; 0x08
    28ec:	28 2f       	mov	r18, r24
    28ee:	30 e0       	ldi	r19, 0x00	; 0
    28f0:	3a a3       	std	Y+34, r19	; 0x22
    28f2:	29 a3       	std	Y+33, r18	; 0x21
    28f4:	89 a1       	ldd	r24, Y+33	; 0x21
    28f6:	9a a1       	ldd	r25, Y+34	; 0x22
    28f8:	81 30       	cpi	r24, 0x01	; 1
    28fa:	91 05       	cpc	r25, r1
    28fc:	09 f4       	brne	.+2      	; 0x2900 <Timer_init+0x32>
    28fe:	91 c1       	rjmp	.+802    	; 0x2c22 <Timer_init+0x354>
    2900:	e9 a1       	ldd	r30, Y+33	; 0x21
    2902:	fa a1       	ldd	r31, Y+34	; 0x22
    2904:	e2 30       	cpi	r30, 0x02	; 2
    2906:	f1 05       	cpc	r31, r1
    2908:	09 f4       	brne	.+2      	; 0x290c <Timer_init+0x3e>
    290a:	a3 c4       	rjmp	.+2374   	; 0x3252 <Timer_init+0x984>
    290c:	29 a1       	ldd	r18, Y+33	; 0x21
    290e:	3a a1       	ldd	r19, Y+34	; 0x22
    2910:	21 15       	cp	r18, r1
    2912:	31 05       	cpc	r19, r1
    2914:	09 f0       	breq	.+2      	; 0x2918 <Timer_init+0x4a>
    2916:	27 c6       	rjmp	.+3150   	; 0x3566 <Timer_init+0xc98>
	 *                              Timer0
	 * ************************************************************************/
	case Timer0:

		/*Clear registers of Timer0 before accessing any of them*/
		TIMER0_CONTROL_REGIRSTER        &= 0X00;
    2918:	e3 e5       	ldi	r30, 0x53	; 83
    291a:	f0 e0       	ldi	r31, 0x00	; 0
    291c:	30 81       	ld	r19, Z
    291e:	e3 e5       	ldi	r30, 0x53	; 83
    2920:	f0 e0       	ldi	r31, 0x00	; 0
    2922:	10 82       	st	Z, r1
		TIMER0_INITIAL_VALUE_REGISTER   &= 0X00;
    2924:	e2 e5       	ldi	r30, 0x52	; 82
    2926:	f0 e0       	ldi	r31, 0x00	; 0
    2928:	80 81       	ld	r24, Z
    292a:	e2 e5       	ldi	r30, 0x52	; 82
    292c:	f0 e0       	ldi	r31, 0x00	; 0
    292e:	10 82       	st	Z, r1
		TIMER0_OUTPUT_COMPARE_REGISTER  &= 0X00;
    2930:	ec e5       	ldi	r30, 0x5C	; 92
    2932:	f0 e0       	ldi	r31, 0x00	; 0
    2934:	90 81       	ld	r25, Z
    2936:	ec e5       	ldi	r30, 0x5C	; 92
    2938:	f0 e0       	ldi	r31, 0x00	; 0
    293a:	10 82       	st	Z, r1
		TIMER0_INTERRUPT_MASK_REGISTER  &= 0X00;
    293c:	e9 e5       	ldi	r30, 0x59	; 89
    293e:	f0 e0       	ldi	r31, 0x00	; 0
    2940:	20 81       	ld	r18, Z
    2942:	e9 e5       	ldi	r30, 0x59	; 89
    2944:	f0 e0       	ldi	r31, 0x00	; 0
    2946:	10 82       	st	Z, r1
		 * Configure initial value for Timer0 to start count from it
		 * Anding with 0XFF to make sure the value won't exceed
		 * 255 as it is 8-bit Timer
		 */

		TIMER0_CONTROL_REGIRSTER = ( (Config_Ptr->timer_InitialValue) ) & 0XFF;
    2948:	23 e5       	ldi	r18, 0x53	; 83
    294a:	30 e0       	ldi	r19, 0x00	; 0
    294c:	e9 81       	ldd	r30, Y+1	; 0x01
    294e:	fa 81       	ldd	r31, Y+2	; 0x02
    2950:	80 81       	ld	r24, Z
    2952:	91 81       	ldd	r25, Z+1	; 0x01
    2954:	a2 81       	ldd	r26, Z+2	; 0x02
    2956:	b3 81       	ldd	r27, Z+3	; 0x03
    2958:	f9 01       	movw	r30, r18
    295a:	80 83       	st	Z, r24
		 * Anding with 0XF8 to make sure the first 3-bits in TCCR0 register=0
		 * ORing with the selected timer clock to include it in the first 3-bits
		 * and keep the other bits as they are
		 */

		TIMER0_CONTROL_REGIRSTER = (TIMER0_CONTROL_REGIRSTER  & TIMER0_CLOCK_MASK_CLEAR) | (Config_Ptr->timer_clock);
    295c:	a3 e5       	ldi	r26, 0x53	; 83
    295e:	b0 e0       	ldi	r27, 0x00	; 0
    2960:	e3 e5       	ldi	r30, 0x53	; 83
    2962:	f0 e0       	ldi	r31, 0x00	; 0
    2964:	80 81       	ld	r24, Z
    2966:	98 2f       	mov	r25, r24
    2968:	98 7f       	andi	r25, 0xF8	; 248
    296a:	e9 81       	ldd	r30, Y+1	; 0x01
    296c:	fa 81       	ldd	r31, Y+2	; 0x02
    296e:	81 85       	ldd	r24, Z+9	; 0x09
    2970:	89 2b       	or	r24, r25
    2972:	8c 93       	st	X, r24


		switch(Config_Ptr->timer_mode)
    2974:	e9 81       	ldd	r30, Y+1	; 0x01
    2976:	fa 81       	ldd	r31, Y+2	; 0x02
    2978:	82 85       	ldd	r24, Z+10	; 0x0a
    297a:	28 2f       	mov	r18, r24
    297c:	30 e0       	ldi	r19, 0x00	; 0
    297e:	3c 8f       	std	Y+28, r19	; 0x1c
    2980:	2b 8f       	std	Y+27, r18	; 0x1b
    2982:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2984:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2986:	81 30       	cpi	r24, 0x01	; 1
    2988:	91 05       	cpc	r25, r1
    298a:	09 f4       	brne	.+2      	; 0x298e <Timer_init+0xc0>
    298c:	5d c0       	rjmp	.+186    	; 0x2a48 <Timer_init+0x17a>
    298e:	eb 8d       	ldd	r30, Y+27	; 0x1b
    2990:	fc 8d       	ldd	r31, Y+28	; 0x1c
    2992:	e2 30       	cpi	r30, 0x02	; 2
    2994:	f1 05       	cpc	r31, r1
    2996:	34 f4       	brge	.+12     	; 0x29a4 <Timer_init+0xd6>
    2998:	2b 8d       	ldd	r18, Y+27	; 0x1b
    299a:	3c 8d       	ldd	r19, Y+28	; 0x1c
    299c:	21 15       	cp	r18, r1
    299e:	31 05       	cpc	r19, r1
    29a0:	71 f0       	breq	.+28     	; 0x29be <Timer_init+0xf0>
    29a2:	e1 c5       	rjmp	.+3010   	; 0x3566 <Timer_init+0xc98>
    29a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29a6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29a8:	82 30       	cpi	r24, 0x02	; 2
    29aa:	91 05       	cpc	r25, r1
    29ac:	09 f4       	brne	.+2      	; 0x29b0 <Timer_init+0xe2>
    29ae:	9b c0       	rjmp	.+310    	; 0x2ae6 <Timer_init+0x218>
    29b0:	eb 8d       	ldd	r30, Y+27	; 0x1b
    29b2:	fc 8d       	ldd	r31, Y+28	; 0x1c
    29b4:	e3 30       	cpi	r30, 0x03	; 3
    29b6:	f1 05       	cpc	r31, r1
    29b8:	09 f4       	brne	.+2      	; 0x29bc <Timer_init+0xee>
    29ba:	e4 c0       	rjmp	.+456    	; 0x2b84 <Timer_init+0x2b6>
    29bc:	d4 c5       	rjmp	.+2984   	; 0x3566 <Timer_init+0xc98>
			/*
			 * Configure wave form generation mode to work with normal mode
			 * Clear WGM00 bit in TCCR0 register
			 * Clear WGM01 bit in TCCR0 register
			 */
			TIMER0_CONTROL_REGIRSTER  = CLEAR_BIT(TIMER0_CONTROL_REGIRSTER , TIMER0_WAVE_FORM_GENERATION_BIT0);
    29be:	23 e5       	ldi	r18, 0x53	; 83
    29c0:	30 e0       	ldi	r19, 0x00	; 0
    29c2:	a3 e5       	ldi	r26, 0x53	; 83
    29c4:	b0 e0       	ldi	r27, 0x00	; 0
    29c6:	e3 e5       	ldi	r30, 0x53	; 83
    29c8:	f0 e0       	ldi	r31, 0x00	; 0
    29ca:	80 81       	ld	r24, Z
    29cc:	8f 7b       	andi	r24, 0xBF	; 191
    29ce:	8c 93       	st	X, r24
    29d0:	8c 91       	ld	r24, X
    29d2:	f9 01       	movw	r30, r18
    29d4:	80 83       	st	Z, r24
			TIMER0_CONTROL_REGIRSTER  = CLEAR_BIT(TIMER0_CONTROL_REGIRSTER , TIMER0_WAVE_FORM_GENERATION_BIT1);
    29d6:	23 e5       	ldi	r18, 0x53	; 83
    29d8:	30 e0       	ldi	r19, 0x00	; 0
    29da:	a3 e5       	ldi	r26, 0x53	; 83
    29dc:	b0 e0       	ldi	r27, 0x00	; 0
    29de:	e3 e5       	ldi	r30, 0x53	; 83
    29e0:	f0 e0       	ldi	r31, 0x00	; 0
    29e2:	80 81       	ld	r24, Z
    29e4:	87 7f       	andi	r24, 0xF7	; 247
    29e6:	8c 93       	st	X, r24
    29e8:	8c 91       	ld	r24, X
    29ea:	f9 01       	movw	r30, r18
    29ec:	80 83       	st	Z, r24
			 * Configure compare output mode to work with normal port operation
			 * Decide the mode of OC0 from compare output modes with non PWM
			 * Configure COM00 bit in TCCR0 register
			 * Configure COM01 bit in TCCR0 register
			 */
			TIMER0_CONTROL_REGIRSTER = (TIMER0_CONTROL_REGIRSTER & TIMER0_COM0_MASK_CLEAR ) | ((Config_Ptr->COM)<<COM0_SHIFT_VALUE);
    29ee:	a3 e5       	ldi	r26, 0x53	; 83
    29f0:	b0 e0       	ldi	r27, 0x00	; 0
    29f2:	e3 e5       	ldi	r30, 0x53	; 83
    29f4:	f0 e0       	ldi	r31, 0x00	; 0
    29f6:	80 81       	ld	r24, Z
    29f8:	28 2f       	mov	r18, r24
    29fa:	2f 7c       	andi	r18, 0xCF	; 207
    29fc:	e9 81       	ldd	r30, Y+1	; 0x01
    29fe:	fa 81       	ldd	r31, Y+2	; 0x02
    2a00:	83 85       	ldd	r24, Z+11	; 0x0b
    2a02:	88 2f       	mov	r24, r24
    2a04:	90 e0       	ldi	r25, 0x00	; 0
    2a06:	82 95       	swap	r24
    2a08:	92 95       	swap	r25
    2a0a:	90 7f       	andi	r25, 0xF0	; 240
    2a0c:	98 27       	eor	r25, r24
    2a0e:	80 7f       	andi	r24, 0xF0	; 240
    2a10:	98 27       	eor	r25, r24
    2a12:	82 2b       	or	r24, r18
    2a14:	8c 93       	st	X, r24
			/*
			 * Configure FOC0 bit in the TCCR0 register to be active
			 * As Timer0 is non-PWM
			 * Make FOC0 to be Active as it is overflow mode
			 */
			TIMER0_CONTROL_REGIRSTER = SET_BIT(TIMER0_CONTROL_REGIRSTER,TIMER0_FORCE_OUTPUT_COMPARE_BIT);
    2a16:	23 e5       	ldi	r18, 0x53	; 83
    2a18:	30 e0       	ldi	r19, 0x00	; 0
    2a1a:	a3 e5       	ldi	r26, 0x53	; 83
    2a1c:	b0 e0       	ldi	r27, 0x00	; 0
    2a1e:	e3 e5       	ldi	r30, 0x53	; 83
    2a20:	f0 e0       	ldi	r31, 0x00	; 0
    2a22:	80 81       	ld	r24, Z
    2a24:	80 68       	ori	r24, 0x80	; 128
    2a26:	8c 93       	st	X, r24
    2a28:	8c 91       	ld	r24, X
    2a2a:	f9 01       	movw	r30, r18
    2a2c:	80 83       	st	Z, r24
			 * Enable Timer0 overflow interrupt
			 * wait for: -Enable I-bit "mask bit" in the SREG register
			 *           -TOV0 bit in the TIFR register to be set
			 * Timer0 overflow mode is ready to work after that
			 */
			TIMER0_INTERRUPT_MASK_REGISTER = SET_BIT(TIMER0_INTERRUPT_MASK_REGISTER, TIMER0_OUTPUT_OVERFLOW_INTERRUPT);
    2a2e:	29 e5       	ldi	r18, 0x59	; 89
    2a30:	30 e0       	ldi	r19, 0x00	; 0
    2a32:	a9 e5       	ldi	r26, 0x59	; 89
    2a34:	b0 e0       	ldi	r27, 0x00	; 0
    2a36:	e9 e5       	ldi	r30, 0x59	; 89
    2a38:	f0 e0       	ldi	r31, 0x00	; 0
    2a3a:	80 81       	ld	r24, Z
    2a3c:	81 60       	ori	r24, 0x01	; 1
    2a3e:	8c 93       	st	X, r24
    2a40:	8c 91       	ld	r24, X
    2a42:	f9 01       	movw	r30, r18
    2a44:	80 83       	st	Z, r24
    2a46:	8f c5       	rjmp	.+2846   	; 0x3566 <Timer_init+0xc98>
			/*
			 * Configure OC0 as Output PIN
			 * the pin where the PWM signal is generated from MC
			 */

			OC0_DIRECTION_PORT = SET_BIT(OC0_DIRECTION_PORT, OC0_PIN);
    2a48:	27 e3       	ldi	r18, 0x37	; 55
    2a4a:	30 e0       	ldi	r19, 0x00	; 0
    2a4c:	a7 e3       	ldi	r26, 0x37	; 55
    2a4e:	b0 e0       	ldi	r27, 0x00	; 0
    2a50:	e7 e3       	ldi	r30, 0x37	; 55
    2a52:	f0 e0       	ldi	r31, 0x00	; 0
    2a54:	80 81       	ld	r24, Z
    2a56:	88 60       	ori	r24, 0x08	; 8
    2a58:	8c 93       	st	X, r24
    2a5a:	8c 91       	ld	r24, X
    2a5c:	f9 01       	movw	r30, r18
    2a5e:	80 83       	st	Z, r24

			/*
			 *Clear force output compare bit in Timer/Counter control register
			 *to work with pulse width modulation
			 */
			TIMER0_CONTROL_REGIRSTER = CLEAR_BIT(TIMER0_CONTROL_REGIRSTER, TIMER0_FORCE_OUTPUT_COMPARE_BIT);
    2a60:	23 e5       	ldi	r18, 0x53	; 83
    2a62:	30 e0       	ldi	r19, 0x00	; 0
    2a64:	a3 e5       	ldi	r26, 0x53	; 83
    2a66:	b0 e0       	ldi	r27, 0x00	; 0
    2a68:	e3 e5       	ldi	r30, 0x53	; 83
    2a6a:	f0 e0       	ldi	r31, 0x00	; 0
    2a6c:	80 81       	ld	r24, Z
    2a6e:	8f 77       	andi	r24, 0x7F	; 127
    2a70:	8c 93       	st	X, r24
    2a72:	8c 91       	ld	r24, X
    2a74:	f9 01       	movw	r30, r18
    2a76:	80 83       	st	Z, r24
			/*
			 * Configure wave form generation mode to work with normal mode
			 * SET WGM00 bit in TCCR0 register
			 * Clear WGM01 bit in TCCR0 register
			 */
			TIMER0_CONTROL_REGIRSTER = SET_BIT(TIMER0_CONTROL_REGIRSTER, TIMER0_WAVE_FORM_GENERATION_BIT0);
    2a78:	23 e5       	ldi	r18, 0x53	; 83
    2a7a:	30 e0       	ldi	r19, 0x00	; 0
    2a7c:	a3 e5       	ldi	r26, 0x53	; 83
    2a7e:	b0 e0       	ldi	r27, 0x00	; 0
    2a80:	e3 e5       	ldi	r30, 0x53	; 83
    2a82:	f0 e0       	ldi	r31, 0x00	; 0
    2a84:	80 81       	ld	r24, Z
    2a86:	80 64       	ori	r24, 0x40	; 64
    2a88:	8c 93       	st	X, r24
    2a8a:	8c 91       	ld	r24, X
    2a8c:	f9 01       	movw	r30, r18
    2a8e:	80 83       	st	Z, r24
			TIMER0_CONTROL_REGIRSTER = CLEAR_BIT(TIMER0_CONTROL_REGIRSTER, TIMER0_WAVE_FORM_GENERATION_BIT1);
    2a90:	23 e5       	ldi	r18, 0x53	; 83
    2a92:	30 e0       	ldi	r19, 0x00	; 0
    2a94:	a3 e5       	ldi	r26, 0x53	; 83
    2a96:	b0 e0       	ldi	r27, 0x00	; 0
    2a98:	e3 e5       	ldi	r30, 0x53	; 83
    2a9a:	f0 e0       	ldi	r31, 0x00	; 0
    2a9c:	80 81       	ld	r24, Z
    2a9e:	87 7f       	andi	r24, 0xF7	; 247
    2aa0:	8c 93       	st	X, r24
    2aa2:	8c 91       	ld	r24, X
    2aa4:	f9 01       	movw	r30, r18
    2aa6:	80 83       	st	Z, r24
			 * Configure compare output mode to work with normal port operation
			 * Decide the mode of OC0 from compare output modes with non PWM
			 * Configure COM00 bit in TCCR0 register
			 * Configure COM01 bit in TCCR0 register
			 */
			TIMER0_CONTROL_REGIRSTER = (TIMER0_CONTROL_REGIRSTER & TIMER0_COM0_MASK_CLEAR ) | ((Config_Ptr->COM)<<COM0_SHIFT_VALUE);
    2aa8:	a3 e5       	ldi	r26, 0x53	; 83
    2aaa:	b0 e0       	ldi	r27, 0x00	; 0
    2aac:	e3 e5       	ldi	r30, 0x53	; 83
    2aae:	f0 e0       	ldi	r31, 0x00	; 0
    2ab0:	80 81       	ld	r24, Z
    2ab2:	28 2f       	mov	r18, r24
    2ab4:	2f 7c       	andi	r18, 0xCF	; 207
    2ab6:	e9 81       	ldd	r30, Y+1	; 0x01
    2ab8:	fa 81       	ldd	r31, Y+2	; 0x02
    2aba:	83 85       	ldd	r24, Z+11	; 0x0b
    2abc:	88 2f       	mov	r24, r24
    2abe:	90 e0       	ldi	r25, 0x00	; 0
    2ac0:	82 95       	swap	r24
    2ac2:	92 95       	swap	r25
    2ac4:	90 7f       	andi	r25, 0xF0	; 240
    2ac6:	98 27       	eor	r25, r24
    2ac8:	80 7f       	andi	r24, 0xF0	; 240
    2aca:	98 27       	eor	r25, r24
    2acc:	82 2b       	or	r24, r18
    2ace:	8c 93       	st	X, r24
			/*
			 * Configure Compare match value for Timer0 to start count till reach it
			 * Anding with 0XFF to make sure the value won't exceed
			 * 255 as it is 8-bit Timer
			 */
			TIMER0_OUTPUT_COMPARE_REGISTER = ((Config_Ptr->timer_compare_MatchValue)) & 0XFF;
    2ad0:	2c e5       	ldi	r18, 0x5C	; 92
    2ad2:	30 e0       	ldi	r19, 0x00	; 0
    2ad4:	e9 81       	ldd	r30, Y+1	; 0x01
    2ad6:	fa 81       	ldd	r31, Y+2	; 0x02
    2ad8:	84 81       	ldd	r24, Z+4	; 0x04
    2ada:	95 81       	ldd	r25, Z+5	; 0x05
    2adc:	a6 81       	ldd	r26, Z+6	; 0x06
    2ade:	b7 81       	ldd	r27, Z+7	; 0x07
    2ae0:	f9 01       	movw	r30, r18
    2ae2:	80 83       	st	Z, r24
    2ae4:	40 c5       	rjmp	.+2688   	; 0x3566 <Timer_init+0xc98>
			/*
			 * Configure wave form generation mode to work with normal mode
			 * Clear WGM00 bit in TCCR0 register
			 * Clear WGM01 bit in TCCR0 register
			 */
			TIMER0_CONTROL_REGIRSTER = CLEAR_BIT(TIMER0_CONTROL_REGIRSTER, TIMER0_WAVE_FORM_GENERATION_BIT0);
    2ae6:	23 e5       	ldi	r18, 0x53	; 83
    2ae8:	30 e0       	ldi	r19, 0x00	; 0
    2aea:	a3 e5       	ldi	r26, 0x53	; 83
    2aec:	b0 e0       	ldi	r27, 0x00	; 0
    2aee:	e3 e5       	ldi	r30, 0x53	; 83
    2af0:	f0 e0       	ldi	r31, 0x00	; 0
    2af2:	80 81       	ld	r24, Z
    2af4:	8f 7b       	andi	r24, 0xBF	; 191
    2af6:	8c 93       	st	X, r24
    2af8:	8c 91       	ld	r24, X
    2afa:	f9 01       	movw	r30, r18
    2afc:	80 83       	st	Z, r24
			TIMER0_CONTROL_REGIRSTER = SET_BIT(TIMER0_CONTROL_REGIRSTER, TIMER0_WAVE_FORM_GENERATION_BIT1);
    2afe:	23 e5       	ldi	r18, 0x53	; 83
    2b00:	30 e0       	ldi	r19, 0x00	; 0
    2b02:	a3 e5       	ldi	r26, 0x53	; 83
    2b04:	b0 e0       	ldi	r27, 0x00	; 0
    2b06:	e3 e5       	ldi	r30, 0x53	; 83
    2b08:	f0 e0       	ldi	r31, 0x00	; 0
    2b0a:	80 81       	ld	r24, Z
    2b0c:	88 60       	ori	r24, 0x08	; 8
    2b0e:	8c 93       	st	X, r24
    2b10:	8c 91       	ld	r24, X
    2b12:	f9 01       	movw	r30, r18
    2b14:	80 83       	st	Z, r24
			 * Configure compare output mode to work with normal port operation
			 * Decide the mode of OC0 from compare output modes with non PWM
			 * Configure COM00 bit in TCCR0 register
			 * Configure COM01 bit in TCCR0 register
			 */
			TIMER0_CONTROL_REGIRSTER = (TIMER0_CONTROL_REGIRSTER & TIMER0_COM0_MASK_CLEAR ) | ((Config_Ptr->COM)<<COM0_SHIFT_VALUE);
    2b16:	a3 e5       	ldi	r26, 0x53	; 83
    2b18:	b0 e0       	ldi	r27, 0x00	; 0
    2b1a:	e3 e5       	ldi	r30, 0x53	; 83
    2b1c:	f0 e0       	ldi	r31, 0x00	; 0
    2b1e:	80 81       	ld	r24, Z
    2b20:	28 2f       	mov	r18, r24
    2b22:	2f 7c       	andi	r18, 0xCF	; 207
    2b24:	e9 81       	ldd	r30, Y+1	; 0x01
    2b26:	fa 81       	ldd	r31, Y+2	; 0x02
    2b28:	83 85       	ldd	r24, Z+11	; 0x0b
    2b2a:	88 2f       	mov	r24, r24
    2b2c:	90 e0       	ldi	r25, 0x00	; 0
    2b2e:	82 95       	swap	r24
    2b30:	92 95       	swap	r25
    2b32:	90 7f       	andi	r25, 0xF0	; 240
    2b34:	98 27       	eor	r25, r24
    2b36:	80 7f       	andi	r24, 0xF0	; 240
    2b38:	98 27       	eor	r25, r24
    2b3a:	82 2b       	or	r24, r18
    2b3c:	8c 93       	st	X, r24
			/*
			 * Configure FOC0 bit in the TCCR0 register to be active
			 * As Timer0 is non-PWM
			 * Make FOC0 to be Active as it is compare mode
			 */
			TIMER0_CONTROL_REGIRSTER = SET_BIT(TIMER0_CONTROL_REGIRSTER, TIMER0_FORCE_OUTPUT_COMPARE_BIT);
    2b3e:	23 e5       	ldi	r18, 0x53	; 83
    2b40:	30 e0       	ldi	r19, 0x00	; 0
    2b42:	a3 e5       	ldi	r26, 0x53	; 83
    2b44:	b0 e0       	ldi	r27, 0x00	; 0
    2b46:	e3 e5       	ldi	r30, 0x53	; 83
    2b48:	f0 e0       	ldi	r31, 0x00	; 0
    2b4a:	80 81       	ld	r24, Z
    2b4c:	80 68       	ori	r24, 0x80	; 128
    2b4e:	8c 93       	st	X, r24
    2b50:	8c 91       	ld	r24, X
    2b52:	f9 01       	movw	r30, r18
    2b54:	80 83       	st	Z, r24
			/*
			 * Configure Compare match value for Timer0 to start count from it
			 * Anding with 0XFF to make sure the value won't exceed
			 * 255 as it is 8-bit Timer
			 */
			TIMER0_OUTPUT_COMPARE_REGISTER = ((Config_Ptr->timer_compare_MatchValue)) & 0XFF;
    2b56:	2c e5       	ldi	r18, 0x5C	; 92
    2b58:	30 e0       	ldi	r19, 0x00	; 0
    2b5a:	e9 81       	ldd	r30, Y+1	; 0x01
    2b5c:	fa 81       	ldd	r31, Y+2	; 0x02
    2b5e:	84 81       	ldd	r24, Z+4	; 0x04
    2b60:	95 81       	ldd	r25, Z+5	; 0x05
    2b62:	a6 81       	ldd	r26, Z+6	; 0x06
    2b64:	b7 81       	ldd	r27, Z+7	; 0x07
    2b66:	f9 01       	movw	r30, r18
    2b68:	80 83       	st	Z, r24
			 * Enable Timer0 compare match interrupt
			 * wait for: -Enable I-bit "mask bit" in the SREG register
			 *           -OCF0 bit in the TIFR register to be set
			 * Timer0 compare match mode is ready to work after that
			 */
			TIMER0_INTERRUPT_MASK_REGISTER = SET_BIT(TIMER0_INTERRUPT_MASK_REGISTER, TIMER0_OUTPUT_COMPARE_MATCH_INTERRUPT);
    2b6a:	29 e5       	ldi	r18, 0x59	; 89
    2b6c:	30 e0       	ldi	r19, 0x00	; 0
    2b6e:	a9 e5       	ldi	r26, 0x59	; 89
    2b70:	b0 e0       	ldi	r27, 0x00	; 0
    2b72:	e9 e5       	ldi	r30, 0x59	; 89
    2b74:	f0 e0       	ldi	r31, 0x00	; 0
    2b76:	80 81       	ld	r24, Z
    2b78:	82 60       	ori	r24, 0x02	; 2
    2b7a:	8c 93       	st	X, r24
    2b7c:	8c 91       	ld	r24, X
    2b7e:	f9 01       	movw	r30, r18
    2b80:	80 83       	st	Z, r24
    2b82:	f1 c4       	rjmp	.+2530   	; 0x3566 <Timer_init+0xc98>
			/*
			 * Configure OC0 as Output PIN
			 * the pin where the PWM signal is generated from MC
			 */

			OC0_DIRECTION_PORT = SET_BIT(OC0_DIRECTION_PORT, OC0_PIN);
    2b84:	27 e3       	ldi	r18, 0x37	; 55
    2b86:	30 e0       	ldi	r19, 0x00	; 0
    2b88:	a7 e3       	ldi	r26, 0x37	; 55
    2b8a:	b0 e0       	ldi	r27, 0x00	; 0
    2b8c:	e7 e3       	ldi	r30, 0x37	; 55
    2b8e:	f0 e0       	ldi	r31, 0x00	; 0
    2b90:	80 81       	ld	r24, Z
    2b92:	88 60       	ori	r24, 0x08	; 8
    2b94:	8c 93       	st	X, r24
    2b96:	8c 91       	ld	r24, X
    2b98:	f9 01       	movw	r30, r18
    2b9a:	80 83       	st	Z, r24

			/*
			 *Clear force output compare bit in Timer/Counter control register
			 *to work with pulse width modulation
			 */
			TIMER0_CONTROL_REGIRSTER = CLEAR_BIT(TIMER0_CONTROL_REGIRSTER, TIMER0_FORCE_OUTPUT_COMPARE_BIT);
    2b9c:	23 e5       	ldi	r18, 0x53	; 83
    2b9e:	30 e0       	ldi	r19, 0x00	; 0
    2ba0:	a3 e5       	ldi	r26, 0x53	; 83
    2ba2:	b0 e0       	ldi	r27, 0x00	; 0
    2ba4:	e3 e5       	ldi	r30, 0x53	; 83
    2ba6:	f0 e0       	ldi	r31, 0x00	; 0
    2ba8:	80 81       	ld	r24, Z
    2baa:	8f 77       	andi	r24, 0x7F	; 127
    2bac:	8c 93       	st	X, r24
    2bae:	8c 91       	ld	r24, X
    2bb0:	f9 01       	movw	r30, r18
    2bb2:	80 83       	st	Z, r24
			/*
			 * Configure wave form generation mode to work with normal mode
			 * SET WGM00 bit in TCCR0 register
			 * SET WGM01 bit in TCCR0 register
			 */
			TIMER0_CONTROL_REGIRSTER = SET_BIT(TIMER0_CONTROL_REGIRSTER, TIMER0_WAVE_FORM_GENERATION_BIT0);
    2bb4:	23 e5       	ldi	r18, 0x53	; 83
    2bb6:	30 e0       	ldi	r19, 0x00	; 0
    2bb8:	a3 e5       	ldi	r26, 0x53	; 83
    2bba:	b0 e0       	ldi	r27, 0x00	; 0
    2bbc:	e3 e5       	ldi	r30, 0x53	; 83
    2bbe:	f0 e0       	ldi	r31, 0x00	; 0
    2bc0:	80 81       	ld	r24, Z
    2bc2:	80 64       	ori	r24, 0x40	; 64
    2bc4:	8c 93       	st	X, r24
    2bc6:	8c 91       	ld	r24, X
    2bc8:	f9 01       	movw	r30, r18
    2bca:	80 83       	st	Z, r24
			TIMER0_CONTROL_REGIRSTER = SET_BIT(TIMER0_CONTROL_REGIRSTER, TIMER0_WAVE_FORM_GENERATION_BIT1);
    2bcc:	23 e5       	ldi	r18, 0x53	; 83
    2bce:	30 e0       	ldi	r19, 0x00	; 0
    2bd0:	a3 e5       	ldi	r26, 0x53	; 83
    2bd2:	b0 e0       	ldi	r27, 0x00	; 0
    2bd4:	e3 e5       	ldi	r30, 0x53	; 83
    2bd6:	f0 e0       	ldi	r31, 0x00	; 0
    2bd8:	80 81       	ld	r24, Z
    2bda:	88 60       	ori	r24, 0x08	; 8
    2bdc:	8c 93       	st	X, r24
    2bde:	8c 91       	ld	r24, X
    2be0:	f9 01       	movw	r30, r18
    2be2:	80 83       	st	Z, r24
			 * Configure compare output mode to work with normal port operation
			 * Decide the mode of OC0 from compare output modes with non PWM
			 * Configure COM00 bit in TCCR0 register
			 * Configure COM01 bit in TCCR0 register
			 */
			TIMER0_CONTROL_REGIRSTER = (TIMER0_CONTROL_REGIRSTER & TIMER0_COM0_MASK_CLEAR ) | ((Config_Ptr->COM)<<COM0_SHIFT_VALUE);
    2be4:	a3 e5       	ldi	r26, 0x53	; 83
    2be6:	b0 e0       	ldi	r27, 0x00	; 0
    2be8:	e3 e5       	ldi	r30, 0x53	; 83
    2bea:	f0 e0       	ldi	r31, 0x00	; 0
    2bec:	80 81       	ld	r24, Z
    2bee:	28 2f       	mov	r18, r24
    2bf0:	2f 7c       	andi	r18, 0xCF	; 207
    2bf2:	e9 81       	ldd	r30, Y+1	; 0x01
    2bf4:	fa 81       	ldd	r31, Y+2	; 0x02
    2bf6:	83 85       	ldd	r24, Z+11	; 0x0b
    2bf8:	88 2f       	mov	r24, r24
    2bfa:	90 e0       	ldi	r25, 0x00	; 0
    2bfc:	82 95       	swap	r24
    2bfe:	92 95       	swap	r25
    2c00:	90 7f       	andi	r25, 0xF0	; 240
    2c02:	98 27       	eor	r25, r24
    2c04:	80 7f       	andi	r24, 0xF0	; 240
    2c06:	98 27       	eor	r25, r24
    2c08:	82 2b       	or	r24, r18
    2c0a:	8c 93       	st	X, r24
			/*
			 * Configure Compare match value for Timer0 to start count till reach it
			 * Anding with 0XFF to make sure the value won't exceed
			 * 255 as it is 8-bit Timer
			 */
			TIMER0_OUTPUT_COMPARE_REGISTER = ((Config_Ptr->timer_compare_MatchValue)) & 0XFF;
    2c0c:	2c e5       	ldi	r18, 0x5C	; 92
    2c0e:	30 e0       	ldi	r19, 0x00	; 0
    2c10:	e9 81       	ldd	r30, Y+1	; 0x01
    2c12:	fa 81       	ldd	r31, Y+2	; 0x02
    2c14:	84 81       	ldd	r24, Z+4	; 0x04
    2c16:	95 81       	ldd	r25, Z+5	; 0x05
    2c18:	a6 81       	ldd	r26, Z+6	; 0x06
    2c1a:	b7 81       	ldd	r27, Z+7	; 0x07
    2c1c:	f9 01       	movw	r30, r18
    2c1e:	80 83       	st	Z, r24
    2c20:	a2 c4       	rjmp	.+2372   	; 0x3566 <Timer_init+0xc98>
		 *                              Timer1
		 * ************************************************************************/
		case Timer1:

			/*Clear registers of Timer1 before accessing any of them*/
			TIMER1_CONTROL_REGIRSTER_A        &= 0X00;
    2c22:	ef e4       	ldi	r30, 0x4F	; 79
    2c24:	f0 e0       	ldi	r31, 0x00	; 0
    2c26:	20 81       	ld	r18, Z
    2c28:	ef e4       	ldi	r30, 0x4F	; 79
    2c2a:	f0 e0       	ldi	r31, 0x00	; 0
    2c2c:	10 82       	st	Z, r1
			TIMER1_CONTROL_REGIRSTER_B        &= 0X00;
    2c2e:	ee e4       	ldi	r30, 0x4E	; 78
    2c30:	f0 e0       	ldi	r31, 0x00	; 0
    2c32:	30 81       	ld	r19, Z
    2c34:	ee e4       	ldi	r30, 0x4E	; 78
    2c36:	f0 e0       	ldi	r31, 0x00	; 0
    2c38:	10 82       	st	Z, r1
			TIMER1_INITIAL_VALUE_REGISTER     &= 0X00;
    2c3a:	ec e4       	ldi	r30, 0x4C	; 76
    2c3c:	f0 e0       	ldi	r31, 0x00	; 0
    2c3e:	80 81       	ld	r24, Z
    2c40:	91 81       	ldd	r25, Z+1	; 0x01
    2c42:	ec e4       	ldi	r30, 0x4C	; 76
    2c44:	f0 e0       	ldi	r31, 0x00	; 0
    2c46:	11 82       	std	Z+1, r1	; 0x01
    2c48:	10 82       	st	Z, r1
			TIMER1_OUTPUT_COMPARE_REGISTER_A  &= 0X00;
    2c4a:	ea e4       	ldi	r30, 0x4A	; 74
    2c4c:	f0 e0       	ldi	r31, 0x00	; 0
    2c4e:	20 81       	ld	r18, Z
    2c50:	31 81       	ldd	r19, Z+1	; 0x01
    2c52:	ea e4       	ldi	r30, 0x4A	; 74
    2c54:	f0 e0       	ldi	r31, 0x00	; 0
    2c56:	11 82       	std	Z+1, r1	; 0x01
    2c58:	10 82       	st	Z, r1
			TIMER1_INTERRUPT_MASK_REGISTER    &= 0X00;
    2c5a:	e9 e5       	ldi	r30, 0x59	; 89
    2c5c:	f0 e0       	ldi	r31, 0x00	; 0
    2c5e:	30 81       	ld	r19, Z
    2c60:	e9 e5       	ldi	r30, 0x59	; 89
    2c62:	f0 e0       	ldi	r31, 0x00	; 0
    2c64:	10 82       	st	Z, r1
			/*
			 * Configure initial value for Timer1 to start count from it
			 * Anding with 0XFFFF to make sure the value won't exceed
			 *  0XFFFF as it is 16-bit Timer
			 */
			TIMER1_INITIAL_VALUE_REGISTER = ( (Config_Ptr->timer_InitialValue) ) & 0XFFFF;
    2c66:	2c e4       	ldi	r18, 0x4C	; 76
    2c68:	30 e0       	ldi	r19, 0x00	; 0
    2c6a:	e9 81       	ldd	r30, Y+1	; 0x01
    2c6c:	fa 81       	ldd	r31, Y+2	; 0x02
    2c6e:	80 81       	ld	r24, Z
    2c70:	91 81       	ldd	r25, Z+1	; 0x01
    2c72:	a2 81       	ldd	r26, Z+2	; 0x02
    2c74:	b3 81       	ldd	r27, Z+3	; 0x03
    2c76:	f9 01       	movw	r30, r18
    2c78:	91 83       	std	Z+1, r25	; 0x01
    2c7a:	80 83       	st	Z, r24
			 * Configure Clock Pre-scaler value for Timer0 in TCCR1B Register
			 * Anding with 0XF8 to make sure the first 3-bits in TCCR1B register=0
			 * ORing with the selected timer clock to include it in the first 3-bits
			 * and keep the other bits as they are
			 */
			TIMER1_CONTROL_REGIRSTER_B =  (TIMER1_CONTROL_REGIRSTER_B & TIMER1_CLOCK_MASK_CLEAR) | (Config_Ptr->timer_clock);
    2c7c:	ae e4       	ldi	r26, 0x4E	; 78
    2c7e:	b0 e0       	ldi	r27, 0x00	; 0
    2c80:	ee e4       	ldi	r30, 0x4E	; 78
    2c82:	f0 e0       	ldi	r31, 0x00	; 0
    2c84:	80 81       	ld	r24, Z
    2c86:	98 2f       	mov	r25, r24
    2c88:	98 7f       	andi	r25, 0xF8	; 248
    2c8a:	e9 81       	ldd	r30, Y+1	; 0x01
    2c8c:	fa 81       	ldd	r31, Y+2	; 0x02
    2c8e:	81 85       	ldd	r24, Z+9	; 0x09
    2c90:	89 2b       	or	r24, r25
    2c92:	8c 93       	st	X, r24

			switch( (Config_Ptr->timer_mode) )
    2c94:	e9 81       	ldd	r30, Y+1	; 0x01
    2c96:	fa 81       	ldd	r31, Y+2	; 0x02
    2c98:	82 85       	ldd	r24, Z+10	; 0x0a
    2c9a:	28 2f       	mov	r18, r24
    2c9c:	30 e0       	ldi	r19, 0x00	; 0
    2c9e:	3b 8b       	std	Y+19, r19	; 0x13
    2ca0:	2a 8b       	std	Y+18, r18	; 0x12
    2ca2:	8a 89       	ldd	r24, Y+18	; 0x12
    2ca4:	9b 89       	ldd	r25, Y+19	; 0x13
    2ca6:	81 30       	cpi	r24, 0x01	; 1
    2ca8:	91 05       	cpc	r25, r1
    2caa:	09 f4       	brne	.+2      	; 0x2cae <Timer_init+0x3e0>
    2cac:	aa c0       	rjmp	.+340    	; 0x2e02 <Timer_init+0x534>
    2cae:	ea 89       	ldd	r30, Y+18	; 0x12
    2cb0:	fb 89       	ldd	r31, Y+19	; 0x13
    2cb2:	e2 30       	cpi	r30, 0x02	; 2
    2cb4:	f1 05       	cpc	r31, r1
    2cb6:	34 f4       	brge	.+12     	; 0x2cc4 <Timer_init+0x3f6>
    2cb8:	2a 89       	ldd	r18, Y+18	; 0x12
    2cba:	3b 89       	ldd	r19, Y+19	; 0x13
    2cbc:	21 15       	cp	r18, r1
    2cbe:	31 05       	cpc	r19, r1
    2cc0:	71 f0       	breq	.+28     	; 0x2cde <Timer_init+0x410>
    2cc2:	51 c4       	rjmp	.+2210   	; 0x3566 <Timer_init+0xc98>
    2cc4:	8a 89       	ldd	r24, Y+18	; 0x12
    2cc6:	9b 89       	ldd	r25, Y+19	; 0x13
    2cc8:	82 30       	cpi	r24, 0x02	; 2
    2cca:	91 05       	cpc	r25, r1
    2ccc:	09 f4       	brne	.+2      	; 0x2cd0 <Timer_init+0x402>
    2cce:	4d c1       	rjmp	.+666    	; 0x2f6a <Timer_init+0x69c>
    2cd0:	ea 89       	ldd	r30, Y+18	; 0x12
    2cd2:	fb 89       	ldd	r31, Y+19	; 0x13
    2cd4:	e3 30       	cpi	r30, 0x03	; 3
    2cd6:	f1 05       	cpc	r31, r1
    2cd8:	09 f4       	brne	.+2      	; 0x2cdc <Timer_init+0x40e>
    2cda:	07 c2       	rjmp	.+1038   	; 0x30ea <Timer_init+0x81c>
    2cdc:	44 c4       	rjmp	.+2184   	; 0x3566 <Timer_init+0xc98>
			{
			case Overflow:

				switch((Config_Ptr->compare_register))
    2cde:	e9 81       	ldd	r30, Y+1	; 0x01
    2ce0:	fa 81       	ldd	r31, Y+2	; 0x02
    2ce2:	84 85       	ldd	r24, Z+12	; 0x0c
    2ce4:	28 2f       	mov	r18, r24
    2ce6:	30 e0       	ldi	r19, 0x00	; 0
    2ce8:	39 8b       	std	Y+17, r19	; 0x11
    2cea:	28 8b       	std	Y+16, r18	; 0x10
    2cec:	88 89       	ldd	r24, Y+16	; 0x10
    2cee:	99 89       	ldd	r25, Y+17	; 0x11
    2cf0:	00 97       	sbiw	r24, 0x00	; 0
    2cf2:	31 f0       	breq	.+12     	; 0x2d00 <Timer_init+0x432>
    2cf4:	e8 89       	ldd	r30, Y+16	; 0x10
    2cf6:	f9 89       	ldd	r31, Y+17	; 0x11
    2cf8:	e1 30       	cpi	r30, 0x01	; 1
    2cfa:	f1 05       	cpc	r31, r1
    2cfc:	29 f1       	breq	.+74     	; 0x2d48 <Timer_init+0x47a>
    2cfe:	44 c0       	rjmp	.+136    	; 0x2d88 <Timer_init+0x4ba>
					/*
					 * Configure compare output mode to work with Timer1
					 * with one mode from 4 modes in TCCR1A
					 * Configure COM1A0/COM1A1 bits in TCCR1A register
					 */
					TIMER1_CONTROL_REGIRSTER_A = (TIMER1_CONTROL_REGIRSTER_A & TIMER1_COM1A_MASK_CLEAR) | ((Config_Ptr->COM)<<COM1A_SHIFT_VALUE);
    2d00:	af e4       	ldi	r26, 0x4F	; 79
    2d02:	b0 e0       	ldi	r27, 0x00	; 0
    2d04:	ef e4       	ldi	r30, 0x4F	; 79
    2d06:	f0 e0       	ldi	r31, 0x00	; 0
    2d08:	80 81       	ld	r24, Z
    2d0a:	28 2f       	mov	r18, r24
    2d0c:	2f 73       	andi	r18, 0x3F	; 63
    2d0e:	e9 81       	ldd	r30, Y+1	; 0x01
    2d10:	fa 81       	ldd	r31, Y+2	; 0x02
    2d12:	83 85       	ldd	r24, Z+11	; 0x0b
    2d14:	88 2f       	mov	r24, r24
    2d16:	90 e0       	ldi	r25, 0x00	; 0
    2d18:	00 24       	eor	r0, r0
    2d1a:	96 95       	lsr	r25
    2d1c:	87 95       	ror	r24
    2d1e:	07 94       	ror	r0
    2d20:	96 95       	lsr	r25
    2d22:	87 95       	ror	r24
    2d24:	07 94       	ror	r0
    2d26:	98 2f       	mov	r25, r24
    2d28:	80 2d       	mov	r24, r0
    2d2a:	82 2b       	or	r24, r18
    2d2c:	8c 93       	st	X, r24
					/*
					 * Configure FOC1A bit in the TCCR1 register to be active
					 * As Timer1 is non-PWM
					 * Make FOC1A to be Active as it is overflow mode
					 */
					TIMER1_CONTROL_REGIRSTER_A =  SET_BIT(TIMER1_CONTROL_REGIRSTER_A, TIMER1_FORCE_OUTPUT_COMPARE_BIT_A);
    2d2e:	2f e4       	ldi	r18, 0x4F	; 79
    2d30:	30 e0       	ldi	r19, 0x00	; 0
    2d32:	af e4       	ldi	r26, 0x4F	; 79
    2d34:	b0 e0       	ldi	r27, 0x00	; 0
    2d36:	ef e4       	ldi	r30, 0x4F	; 79
    2d38:	f0 e0       	ldi	r31, 0x00	; 0
    2d3a:	80 81       	ld	r24, Z
    2d3c:	88 60       	ori	r24, 0x08	; 8
    2d3e:	8c 93       	st	X, r24
    2d40:	8c 91       	ld	r24, X
    2d42:	f9 01       	movw	r30, r18
    2d44:	80 83       	st	Z, r24
    2d46:	20 c0       	rjmp	.+64     	; 0x2d88 <Timer_init+0x4ba>
					/*
					 * Configure compare output mode to work with Timer1
					 * with one mode from 4 modes in TCCR1A
					 * Configure COM1B0/COM1B1 bits in TCCR1A register
					 */
					TIMER1_CONTROL_REGIRSTER_A = (TIMER1_CONTROL_REGIRSTER_A & TIMER1_COM1B_MASK_CLEAR) | ((Config_Ptr->COM)<<COM1B_SHIFT_VALUE);
    2d48:	af e4       	ldi	r26, 0x4F	; 79
    2d4a:	b0 e0       	ldi	r27, 0x00	; 0
    2d4c:	ef e4       	ldi	r30, 0x4F	; 79
    2d4e:	f0 e0       	ldi	r31, 0x00	; 0
    2d50:	80 81       	ld	r24, Z
    2d52:	28 2f       	mov	r18, r24
    2d54:	2f 7c       	andi	r18, 0xCF	; 207
    2d56:	e9 81       	ldd	r30, Y+1	; 0x01
    2d58:	fa 81       	ldd	r31, Y+2	; 0x02
    2d5a:	83 85       	ldd	r24, Z+11	; 0x0b
    2d5c:	88 2f       	mov	r24, r24
    2d5e:	90 e0       	ldi	r25, 0x00	; 0
    2d60:	82 95       	swap	r24
    2d62:	92 95       	swap	r25
    2d64:	90 7f       	andi	r25, 0xF0	; 240
    2d66:	98 27       	eor	r25, r24
    2d68:	80 7f       	andi	r24, 0xF0	; 240
    2d6a:	98 27       	eor	r25, r24
    2d6c:	82 2b       	or	r24, r18
    2d6e:	8c 93       	st	X, r24
					/*
					 * Configure FOC1B bit in the TCCR1 register to be active
					 * As Timer1 is non-PWM
					 * Make FOC1B to be Active as it is overflow mode
					 */
					TIMER1_CONTROL_REGIRSTER_A =  SET_BIT(TIMER1_CONTROL_REGIRSTER_A, TIMER1_FORCE_OUTPUT_COMPARE_BIT_B);
    2d70:	2f e4       	ldi	r18, 0x4F	; 79
    2d72:	30 e0       	ldi	r19, 0x00	; 0
    2d74:	af e4       	ldi	r26, 0x4F	; 79
    2d76:	b0 e0       	ldi	r27, 0x00	; 0
    2d78:	ef e4       	ldi	r30, 0x4F	; 79
    2d7a:	f0 e0       	ldi	r31, 0x00	; 0
    2d7c:	80 81       	ld	r24, Z
    2d7e:	84 60       	ori	r24, 0x04	; 4
    2d80:	8c 93       	st	X, r24
    2d82:	8c 91       	ld	r24, X
    2d84:	f9 01       	movw	r30, r18
    2d86:	80 83       	st	Z, r24

				/*
				 * Configure wave form generation mode to work with normal mode
				 * Clear WGM10/WMG11 bit in TCCR1A register
				 */
				TIMER1_CONTROL_REGIRSTER_A =  CLEAR_BIT(TIMER1_CONTROL_REGIRSTER_A, TIMER1_WAVE_FORM_GENERATION_BIT10);
    2d88:	2f e4       	ldi	r18, 0x4F	; 79
    2d8a:	30 e0       	ldi	r19, 0x00	; 0
    2d8c:	af e4       	ldi	r26, 0x4F	; 79
    2d8e:	b0 e0       	ldi	r27, 0x00	; 0
    2d90:	ef e4       	ldi	r30, 0x4F	; 79
    2d92:	f0 e0       	ldi	r31, 0x00	; 0
    2d94:	80 81       	ld	r24, Z
    2d96:	8e 7f       	andi	r24, 0xFE	; 254
    2d98:	8c 93       	st	X, r24
    2d9a:	8c 91       	ld	r24, X
    2d9c:	f9 01       	movw	r30, r18
    2d9e:	80 83       	st	Z, r24
				TIMER1_CONTROL_REGIRSTER_A =  CLEAR_BIT(TIMER1_CONTROL_REGIRSTER_A, TIMER1_WAVE_FORM_GENERATION_BIT11);
    2da0:	2f e4       	ldi	r18, 0x4F	; 79
    2da2:	30 e0       	ldi	r19, 0x00	; 0
    2da4:	af e4       	ldi	r26, 0x4F	; 79
    2da6:	b0 e0       	ldi	r27, 0x00	; 0
    2da8:	ef e4       	ldi	r30, 0x4F	; 79
    2daa:	f0 e0       	ldi	r31, 0x00	; 0
    2dac:	80 81       	ld	r24, Z
    2dae:	8d 7f       	andi	r24, 0xFD	; 253
    2db0:	8c 93       	st	X, r24
    2db2:	8c 91       	ld	r24, X
    2db4:	f9 01       	movw	r30, r18
    2db6:	80 83       	st	Z, r24

				/*
				 * Configure wave form generation mode to work with normal mode
				 * Clear WGM12/WMG13 bit in TCCR1B register
				 */
				TIMER1_CONTROL_REGIRSTER_B =  CLEAR_BIT(TIMER1_CONTROL_REGIRSTER_B, TIMER1_WAVE_FORM_GENERATION_BIT12);
    2db8:	2e e4       	ldi	r18, 0x4E	; 78
    2dba:	30 e0       	ldi	r19, 0x00	; 0
    2dbc:	ae e4       	ldi	r26, 0x4E	; 78
    2dbe:	b0 e0       	ldi	r27, 0x00	; 0
    2dc0:	ee e4       	ldi	r30, 0x4E	; 78
    2dc2:	f0 e0       	ldi	r31, 0x00	; 0
    2dc4:	80 81       	ld	r24, Z
    2dc6:	87 7f       	andi	r24, 0xF7	; 247
    2dc8:	8c 93       	st	X, r24
    2dca:	8c 91       	ld	r24, X
    2dcc:	f9 01       	movw	r30, r18
    2dce:	80 83       	st	Z, r24
				TIMER1_CONTROL_REGIRSTER_B =  CLEAR_BIT(TIMER1_CONTROL_REGIRSTER_B, TIMER1_WAVE_FORM_GENERATION_BIT13);
    2dd0:	2e e4       	ldi	r18, 0x4E	; 78
    2dd2:	30 e0       	ldi	r19, 0x00	; 0
    2dd4:	ae e4       	ldi	r26, 0x4E	; 78
    2dd6:	b0 e0       	ldi	r27, 0x00	; 0
    2dd8:	ee e4       	ldi	r30, 0x4E	; 78
    2dda:	f0 e0       	ldi	r31, 0x00	; 0
    2ddc:	80 81       	ld	r24, Z
    2dde:	8f 7e       	andi	r24, 0xEF	; 239
    2de0:	8c 93       	st	X, r24
    2de2:	8c 91       	ld	r24, X
    2de4:	f9 01       	movw	r30, r18
    2de6:	80 83       	st	Z, r24
				 * Enable Timer1 overflow interrupt
				 * wait for: -Enable I-bit "mask bit" in the SREG register
				 *           -TOV1 bit in the TIFR register to be set
				 * Timer1 overflow mode is ready to work after that
				 */
				TIMER1_INTERRUPT_MASK_REGISTER = SET_BIT(TIMER1_INTERRUPT_MASK_REGISTER,TIMER1_OUTPUT_OVERFLOW_INTERRUPT);
    2de8:	29 e5       	ldi	r18, 0x59	; 89
    2dea:	30 e0       	ldi	r19, 0x00	; 0
    2dec:	a9 e5       	ldi	r26, 0x59	; 89
    2dee:	b0 e0       	ldi	r27, 0x00	; 0
    2df0:	e9 e5       	ldi	r30, 0x59	; 89
    2df2:	f0 e0       	ldi	r31, 0x00	; 0
    2df4:	80 81       	ld	r24, Z
    2df6:	84 60       	ori	r24, 0x04	; 4
    2df8:	8c 93       	st	X, r24
    2dfa:	8c 91       	ld	r24, X
    2dfc:	f9 01       	movw	r30, r18
    2dfe:	80 83       	st	Z, r24
    2e00:	b2 c3       	rjmp	.+1892   	; 0x3566 <Timer_init+0xc98>
					/*
					 * Configure wave form generation mode to work with PWM_PhaseCorrect TOP in ICR1
					 * Clear WGM10 bit in TCCR1A register
					 * Set WGM11 bit in TCCR1A register
					 */
					TIMER1_CONTROL_REGIRSTER_A =  CLEAR_BIT(TIMER1_CONTROL_REGIRSTER_A, TIMER1_WAVE_FORM_GENERATION_BIT10);
    2e02:	2f e4       	ldi	r18, 0x4F	; 79
    2e04:	30 e0       	ldi	r19, 0x00	; 0
    2e06:	af e4       	ldi	r26, 0x4F	; 79
    2e08:	b0 e0       	ldi	r27, 0x00	; 0
    2e0a:	ef e4       	ldi	r30, 0x4F	; 79
    2e0c:	f0 e0       	ldi	r31, 0x00	; 0
    2e0e:	80 81       	ld	r24, Z
    2e10:	8e 7f       	andi	r24, 0xFE	; 254
    2e12:	8c 93       	st	X, r24
    2e14:	8c 91       	ld	r24, X
    2e16:	f9 01       	movw	r30, r18
    2e18:	80 83       	st	Z, r24
					TIMER1_CONTROL_REGIRSTER_A =  SET_BIT(TIMER1_CONTROL_REGIRSTER_A, TIMER1_WAVE_FORM_GENERATION_BIT11);
    2e1a:	2f e4       	ldi	r18, 0x4F	; 79
    2e1c:	30 e0       	ldi	r19, 0x00	; 0
    2e1e:	af e4       	ldi	r26, 0x4F	; 79
    2e20:	b0 e0       	ldi	r27, 0x00	; 0
    2e22:	ef e4       	ldi	r30, 0x4F	; 79
    2e24:	f0 e0       	ldi	r31, 0x00	; 0
    2e26:	80 81       	ld	r24, Z
    2e28:	82 60       	ori	r24, 0x02	; 2
    2e2a:	8c 93       	st	X, r24
    2e2c:	8c 91       	ld	r24, X
    2e2e:	f9 01       	movw	r30, r18
    2e30:	80 83       	st	Z, r24
					/*
					 * Configure wave form generation mode to work with normal mode
					 * Set WMG13 bit in TCCR1B register
					 * Clear WMG12 bit in TCCR1B register
					 */
					TIMER1_CONTROL_REGIRSTER_B =  CLEAR_BIT(TIMER1_CONTROL_REGIRSTER_B, TIMER1_WAVE_FORM_GENERATION_BIT12);
    2e32:	2e e4       	ldi	r18, 0x4E	; 78
    2e34:	30 e0       	ldi	r19, 0x00	; 0
    2e36:	ae e4       	ldi	r26, 0x4E	; 78
    2e38:	b0 e0       	ldi	r27, 0x00	; 0
    2e3a:	ee e4       	ldi	r30, 0x4E	; 78
    2e3c:	f0 e0       	ldi	r31, 0x00	; 0
    2e3e:	80 81       	ld	r24, Z
    2e40:	87 7f       	andi	r24, 0xF7	; 247
    2e42:	8c 93       	st	X, r24
    2e44:	8c 91       	ld	r24, X
    2e46:	f9 01       	movw	r30, r18
    2e48:	80 83       	st	Z, r24
					TIMER1_CONTROL_REGIRSTER_B =  SET_BIT(TIMER1_CONTROL_REGIRSTER_B, TIMER1_WAVE_FORM_GENERATION_BIT13);
    2e4a:	2e e4       	ldi	r18, 0x4E	; 78
    2e4c:	30 e0       	ldi	r19, 0x00	; 0
    2e4e:	ae e4       	ldi	r26, 0x4E	; 78
    2e50:	b0 e0       	ldi	r27, 0x00	; 0
    2e52:	ee e4       	ldi	r30, 0x4E	; 78
    2e54:	f0 e0       	ldi	r31, 0x00	; 0
    2e56:	80 81       	ld	r24, Z
    2e58:	80 61       	ori	r24, 0x10	; 16
    2e5a:	8c 93       	st	X, r24
    2e5c:	8c 91       	ld	r24, X
    2e5e:	f9 01       	movw	r30, r18
    2e60:	80 83       	st	Z, r24


				switch((Config_Ptr->compare_register))
    2e62:	e9 81       	ldd	r30, Y+1	; 0x01
    2e64:	fa 81       	ldd	r31, Y+2	; 0x02
    2e66:	84 85       	ldd	r24, Z+12	; 0x0c
    2e68:	28 2f       	mov	r18, r24
    2e6a:	30 e0       	ldi	r19, 0x00	; 0
    2e6c:	3f 87       	std	Y+15, r19	; 0x0f
    2e6e:	2e 87       	std	Y+14, r18	; 0x0e
    2e70:	8e 85       	ldd	r24, Y+14	; 0x0e
    2e72:	9f 85       	ldd	r25, Y+15	; 0x0f
    2e74:	00 97       	sbiw	r24, 0x00	; 0
    2e76:	31 f0       	breq	.+12     	; 0x2e84 <Timer_init+0x5b6>
    2e78:	ee 85       	ldd	r30, Y+14	; 0x0e
    2e7a:	ff 85       	ldd	r31, Y+15	; 0x0f
    2e7c:	e1 30       	cpi	r30, 0x01	; 1
    2e7e:	f1 05       	cpc	r31, r1
    2e80:	e1 f1       	breq	.+120    	; 0x2efa <Timer_init+0x62c>
    2e82:	71 c3       	rjmp	.+1762   	; 0x3566 <Timer_init+0xc98>

					/*
					 * Configure OC1A as Output PIN
					 * the pin where the PWM signal is generated from MC
					 */
					OC1A_DIRECTION_PORT = SET_BIT(OC1A_DIRECTION_PORT, OC1A_PIN);
    2e84:	21 e3       	ldi	r18, 0x31	; 49
    2e86:	30 e0       	ldi	r19, 0x00	; 0
    2e88:	a1 e3       	ldi	r26, 0x31	; 49
    2e8a:	b0 e0       	ldi	r27, 0x00	; 0
    2e8c:	e1 e3       	ldi	r30, 0x31	; 49
    2e8e:	f0 e0       	ldi	r31, 0x00	; 0
    2e90:	80 81       	ld	r24, Z
    2e92:	80 62       	ori	r24, 0x20	; 32
    2e94:	8c 93       	st	X, r24
    2e96:	8c 91       	ld	r24, X
    2e98:	f9 01       	movw	r30, r18
    2e9a:	80 83       	st	Z, r24
					/*
					 * Configure FOC1A bit in the TCCR1 register to be active
					 * As Timer1 is PWM
					 * Make FOC1A to be Active as it is Fast PWM mode
					 */
					TIMER1_CONTROL_REGIRSTER_A =  CLEAR_BIT(TIMER1_CONTROL_REGIRSTER_A,TIMER1_FORCE_OUTPUT_COMPARE_BIT_A);
    2e9c:	2f e4       	ldi	r18, 0x4F	; 79
    2e9e:	30 e0       	ldi	r19, 0x00	; 0
    2ea0:	af e4       	ldi	r26, 0x4F	; 79
    2ea2:	b0 e0       	ldi	r27, 0x00	; 0
    2ea4:	ef e4       	ldi	r30, 0x4F	; 79
    2ea6:	f0 e0       	ldi	r31, 0x00	; 0
    2ea8:	80 81       	ld	r24, Z
    2eaa:	87 7f       	andi	r24, 0xF7	; 247
    2eac:	8c 93       	st	X, r24
    2eae:	8c 91       	ld	r24, X
    2eb0:	f9 01       	movw	r30, r18
    2eb2:	80 83       	st	Z, r24
					/*
					 * Configure compare output mode to work with Timer1
					 * with one mode from 4 modes in TCCR1A
					 * Configure COM1A0/COM1A1 bits in TCCR1A register
					 */
					TIMER1_CONTROL_REGIRSTER_A = (TIMER1_CONTROL_REGIRSTER_A & TIMER1_COM1A_MASK_CLEAR) | ((Config_Ptr->COM)<<COM1A_SHIFT_VALUE);
    2eb4:	af e4       	ldi	r26, 0x4F	; 79
    2eb6:	b0 e0       	ldi	r27, 0x00	; 0
    2eb8:	ef e4       	ldi	r30, 0x4F	; 79
    2eba:	f0 e0       	ldi	r31, 0x00	; 0
    2ebc:	80 81       	ld	r24, Z
    2ebe:	28 2f       	mov	r18, r24
    2ec0:	2f 73       	andi	r18, 0x3F	; 63
    2ec2:	e9 81       	ldd	r30, Y+1	; 0x01
    2ec4:	fa 81       	ldd	r31, Y+2	; 0x02
    2ec6:	83 85       	ldd	r24, Z+11	; 0x0b
    2ec8:	88 2f       	mov	r24, r24
    2eca:	90 e0       	ldi	r25, 0x00	; 0
    2ecc:	00 24       	eor	r0, r0
    2ece:	96 95       	lsr	r25
    2ed0:	87 95       	ror	r24
    2ed2:	07 94       	ror	r0
    2ed4:	96 95       	lsr	r25
    2ed6:	87 95       	ror	r24
    2ed8:	07 94       	ror	r0
    2eda:	98 2f       	mov	r25, r24
    2edc:	80 2d       	mov	r24, r0
    2ede:	82 2b       	or	r24, r18
    2ee0:	8c 93       	st	X, r24
					/*
					 * Configure Compare match value for Timer1 to start count till reach it
					 * Anding with 0XFFFF to make sure the value won't exceed
					 * OXFFFF as it is 16-bit Timer
					 */
					INPUT_CAPTURE_REGISRTER1 = ((Config_Ptr->timer_compare_MatchValue)) & 0XFFFF;
    2ee2:	26 e4       	ldi	r18, 0x46	; 70
    2ee4:	30 e0       	ldi	r19, 0x00	; 0
    2ee6:	e9 81       	ldd	r30, Y+1	; 0x01
    2ee8:	fa 81       	ldd	r31, Y+2	; 0x02
    2eea:	84 81       	ldd	r24, Z+4	; 0x04
    2eec:	95 81       	ldd	r25, Z+5	; 0x05
    2eee:	a6 81       	ldd	r26, Z+6	; 0x06
    2ef0:	b7 81       	ldd	r27, Z+7	; 0x07
    2ef2:	f9 01       	movw	r30, r18
    2ef4:	91 83       	std	Z+1, r25	; 0x01
    2ef6:	80 83       	st	Z, r24
    2ef8:	36 c3       	rjmp	.+1644   	; 0x3566 <Timer_init+0xc98>
				case ChannelB:
					/*
					 * Configure OC1A as Output PIN
					 * the pin where the PWM signal is generated from MC
					 */
					OC1B_DIRECTION_PORT = SET_BIT(OC1B_DIRECTION_PORT, OC1A_PIN);
    2efa:	21 e3       	ldi	r18, 0x31	; 49
    2efc:	30 e0       	ldi	r19, 0x00	; 0
    2efe:	a1 e3       	ldi	r26, 0x31	; 49
    2f00:	b0 e0       	ldi	r27, 0x00	; 0
    2f02:	e1 e3       	ldi	r30, 0x31	; 49
    2f04:	f0 e0       	ldi	r31, 0x00	; 0
    2f06:	80 81       	ld	r24, Z
    2f08:	80 62       	ori	r24, 0x20	; 32
    2f0a:	8c 93       	st	X, r24
    2f0c:	8c 91       	ld	r24, X
    2f0e:	f9 01       	movw	r30, r18
    2f10:	80 83       	st	Z, r24
					/*
					 * Configure FOC1A bit in the TCCR1 register to be active
					 * As Timer1 is PWM
					 * Make FOC1A to be Active as it is Fast PWM mode
					 */
					TIMER1_CONTROL_REGIRSTER_A =  CLEAR_BIT(TIMER1_CONTROL_REGIRSTER_A,TIMER1_FORCE_OUTPUT_COMPARE_BIT_B);
    2f12:	2f e4       	ldi	r18, 0x4F	; 79
    2f14:	30 e0       	ldi	r19, 0x00	; 0
    2f16:	af e4       	ldi	r26, 0x4F	; 79
    2f18:	b0 e0       	ldi	r27, 0x00	; 0
    2f1a:	ef e4       	ldi	r30, 0x4F	; 79
    2f1c:	f0 e0       	ldi	r31, 0x00	; 0
    2f1e:	80 81       	ld	r24, Z
    2f20:	8b 7f       	andi	r24, 0xFB	; 251
    2f22:	8c 93       	st	X, r24
    2f24:	8c 91       	ld	r24, X
    2f26:	f9 01       	movw	r30, r18
    2f28:	80 83       	st	Z, r24
					/*
					 * Configure compare output mode to work with Timer1
					 * with one mode from 4 modes in TCCR1A
					 * Configure COM1B0/COM1B1 bits in TCCR1A register
					 */
					TIMER1_CONTROL_REGIRSTER_A = (TIMER1_CONTROL_REGIRSTER_A & TIMER1_COM1B_MASK_CLEAR) | ((Config_Ptr->COM)<<COM1B_SHIFT_VALUE);
    2f2a:	af e4       	ldi	r26, 0x4F	; 79
    2f2c:	b0 e0       	ldi	r27, 0x00	; 0
    2f2e:	ef e4       	ldi	r30, 0x4F	; 79
    2f30:	f0 e0       	ldi	r31, 0x00	; 0
    2f32:	80 81       	ld	r24, Z
    2f34:	28 2f       	mov	r18, r24
    2f36:	2f 7c       	andi	r18, 0xCF	; 207
    2f38:	e9 81       	ldd	r30, Y+1	; 0x01
    2f3a:	fa 81       	ldd	r31, Y+2	; 0x02
    2f3c:	83 85       	ldd	r24, Z+11	; 0x0b
    2f3e:	88 2f       	mov	r24, r24
    2f40:	90 e0       	ldi	r25, 0x00	; 0
    2f42:	82 95       	swap	r24
    2f44:	92 95       	swap	r25
    2f46:	90 7f       	andi	r25, 0xF0	; 240
    2f48:	98 27       	eor	r25, r24
    2f4a:	80 7f       	andi	r24, 0xF0	; 240
    2f4c:	98 27       	eor	r25, r24
    2f4e:	82 2b       	or	r24, r18
    2f50:	8c 93       	st	X, r24
					/*
					 * Configure Compare match value for Timer1 to start count till reach it
					 * Anding with 0XFFFF to make sure the value won't exceed
					 * OXFFFF as it is 16-bit Timer
					 */
					INPUT_CAPTURE_REGISRTER1 = ((Config_Ptr->timer_compare_MatchValue)) & 0XFFFF;
    2f52:	26 e4       	ldi	r18, 0x46	; 70
    2f54:	30 e0       	ldi	r19, 0x00	; 0
    2f56:	e9 81       	ldd	r30, Y+1	; 0x01
    2f58:	fa 81       	ldd	r31, Y+2	; 0x02
    2f5a:	84 81       	ldd	r24, Z+4	; 0x04
    2f5c:	95 81       	ldd	r25, Z+5	; 0x05
    2f5e:	a6 81       	ldd	r26, Z+6	; 0x06
    2f60:	b7 81       	ldd	r27, Z+7	; 0x07
    2f62:	f9 01       	movw	r30, r18
    2f64:	91 83       	std	Z+1, r25	; 0x01
    2f66:	80 83       	st	Z, r24
    2f68:	fe c2       	rjmp	.+1532   	; 0x3566 <Timer_init+0xc98>

					/*
					 * Configure wave form generation mode to work with normal mode
					 * Clear WGM10/WMG11 bit in TCCR1A register
					 */
					TIMER1_CONTROL_REGIRSTER_A =  CLEAR_BIT(TIMER1_CONTROL_REGIRSTER_A, TIMER1_WAVE_FORM_GENERATION_BIT10);
    2f6a:	2f e4       	ldi	r18, 0x4F	; 79
    2f6c:	30 e0       	ldi	r19, 0x00	; 0
    2f6e:	af e4       	ldi	r26, 0x4F	; 79
    2f70:	b0 e0       	ldi	r27, 0x00	; 0
    2f72:	ef e4       	ldi	r30, 0x4F	; 79
    2f74:	f0 e0       	ldi	r31, 0x00	; 0
    2f76:	80 81       	ld	r24, Z
    2f78:	8e 7f       	andi	r24, 0xFE	; 254
    2f7a:	8c 93       	st	X, r24
    2f7c:	8c 91       	ld	r24, X
    2f7e:	f9 01       	movw	r30, r18
    2f80:	80 83       	st	Z, r24
					TIMER1_CONTROL_REGIRSTER_A =  CLEAR_BIT(TIMER1_CONTROL_REGIRSTER_A, TIMER1_WAVE_FORM_GENERATION_BIT11);
    2f82:	2f e4       	ldi	r18, 0x4F	; 79
    2f84:	30 e0       	ldi	r19, 0x00	; 0
    2f86:	af e4       	ldi	r26, 0x4F	; 79
    2f88:	b0 e0       	ldi	r27, 0x00	; 0
    2f8a:	ef e4       	ldi	r30, 0x4F	; 79
    2f8c:	f0 e0       	ldi	r31, 0x00	; 0
    2f8e:	80 81       	ld	r24, Z
    2f90:	8d 7f       	andi	r24, 0xFD	; 253
    2f92:	8c 93       	st	X, r24
    2f94:	8c 91       	ld	r24, X
    2f96:	f9 01       	movw	r30, r18
    2f98:	80 83       	st	Z, r24
					/*
					 * Configure wave form generation mode to work with normal mode
					 * Clear WMG13 bit in TCCR1B register
					 * Set WMG12 bit in TCCR1B register
					 */
					TIMER1_CONTROL_REGIRSTER_B =  SET_BIT(TIMER1_CONTROL_REGIRSTER_B, TIMER1_WAVE_FORM_GENERATION_BIT12);
    2f9a:	2e e4       	ldi	r18, 0x4E	; 78
    2f9c:	30 e0       	ldi	r19, 0x00	; 0
    2f9e:	ae e4       	ldi	r26, 0x4E	; 78
    2fa0:	b0 e0       	ldi	r27, 0x00	; 0
    2fa2:	ee e4       	ldi	r30, 0x4E	; 78
    2fa4:	f0 e0       	ldi	r31, 0x00	; 0
    2fa6:	80 81       	ld	r24, Z
    2fa8:	88 60       	ori	r24, 0x08	; 8
    2faa:	8c 93       	st	X, r24
    2fac:	8c 91       	ld	r24, X
    2fae:	f9 01       	movw	r30, r18
    2fb0:	80 83       	st	Z, r24
					TIMER1_CONTROL_REGIRSTER_B =  CLEAR_BIT(TIMER1_CONTROL_REGIRSTER_B, TIMER1_WAVE_FORM_GENERATION_BIT13);
    2fb2:	2e e4       	ldi	r18, 0x4E	; 78
    2fb4:	30 e0       	ldi	r19, 0x00	; 0
    2fb6:	ae e4       	ldi	r26, 0x4E	; 78
    2fb8:	b0 e0       	ldi	r27, 0x00	; 0
    2fba:	ee e4       	ldi	r30, 0x4E	; 78
    2fbc:	f0 e0       	ldi	r31, 0x00	; 0
    2fbe:	80 81       	ld	r24, Z
    2fc0:	8f 7e       	andi	r24, 0xEF	; 239
    2fc2:	8c 93       	st	X, r24
    2fc4:	8c 91       	ld	r24, X
    2fc6:	f9 01       	movw	r30, r18
    2fc8:	80 83       	st	Z, r24

					switch(Config_Ptr->compare_register)
    2fca:	e9 81       	ldd	r30, Y+1	; 0x01
    2fcc:	fa 81       	ldd	r31, Y+2	; 0x02
    2fce:	84 85       	ldd	r24, Z+12	; 0x0c
    2fd0:	28 2f       	mov	r18, r24
    2fd2:	30 e0       	ldi	r19, 0x00	; 0
    2fd4:	3d 87       	std	Y+13, r19	; 0x0d
    2fd6:	2c 87       	std	Y+12, r18	; 0x0c
    2fd8:	8c 85       	ldd	r24, Y+12	; 0x0c
    2fda:	9d 85       	ldd	r25, Y+13	; 0x0d
    2fdc:	00 97       	sbiw	r24, 0x00	; 0
    2fde:	31 f0       	breq	.+12     	; 0x2fec <Timer_init+0x71e>
    2fe0:	ec 85       	ldd	r30, Y+12	; 0x0c
    2fe2:	fd 85       	ldd	r31, Y+13	; 0x0d
    2fe4:	e1 30       	cpi	r30, 0x01	; 1
    2fe6:	f1 05       	cpc	r31, r1
    2fe8:	e1 f1       	breq	.+120    	; 0x3062 <Timer_init+0x794>
    2fea:	bd c2       	rjmp	.+1402   	; 0x3566 <Timer_init+0xc98>
						/*
						 * Configure FOC1A bit in the TCCR1 register to be active
						 * As Timer1 is non-PWM
						 * Make FOC1A to be Active as it is compare mode
						 */
						TIMER1_CONTROL_REGIRSTER_A =  SET_BIT(TIMER1_CONTROL_REGIRSTER_A,TIMER1_FORCE_OUTPUT_COMPARE_BIT_A);
    2fec:	2f e4       	ldi	r18, 0x4F	; 79
    2fee:	30 e0       	ldi	r19, 0x00	; 0
    2ff0:	af e4       	ldi	r26, 0x4F	; 79
    2ff2:	b0 e0       	ldi	r27, 0x00	; 0
    2ff4:	ef e4       	ldi	r30, 0x4F	; 79
    2ff6:	f0 e0       	ldi	r31, 0x00	; 0
    2ff8:	80 81       	ld	r24, Z
    2ffa:	88 60       	ori	r24, 0x08	; 8
    2ffc:	8c 93       	st	X, r24
    2ffe:	8c 91       	ld	r24, X
    3000:	f9 01       	movw	r30, r18
    3002:	80 83       	st	Z, r24
						/*
						 * Configure compare output mode to work with Timer1
						 * with one mode from 4 modes in TCCR1A
						 * Configure COM1A0/COM1A1 bits in TCCR1A register
						 */
						TIMER1_CONTROL_REGIRSTER_A = (TIMER1_CONTROL_REGIRSTER_A & TIMER1_COM1A_MASK_CLEAR) | ((Config_Ptr->COM)<<COM1A_SHIFT_VALUE);
    3004:	af e4       	ldi	r26, 0x4F	; 79
    3006:	b0 e0       	ldi	r27, 0x00	; 0
    3008:	ef e4       	ldi	r30, 0x4F	; 79
    300a:	f0 e0       	ldi	r31, 0x00	; 0
    300c:	80 81       	ld	r24, Z
    300e:	28 2f       	mov	r18, r24
    3010:	2f 73       	andi	r18, 0x3F	; 63
    3012:	e9 81       	ldd	r30, Y+1	; 0x01
    3014:	fa 81       	ldd	r31, Y+2	; 0x02
    3016:	83 85       	ldd	r24, Z+11	; 0x0b
    3018:	88 2f       	mov	r24, r24
    301a:	90 e0       	ldi	r25, 0x00	; 0
    301c:	00 24       	eor	r0, r0
    301e:	96 95       	lsr	r25
    3020:	87 95       	ror	r24
    3022:	07 94       	ror	r0
    3024:	96 95       	lsr	r25
    3026:	87 95       	ror	r24
    3028:	07 94       	ror	r0
    302a:	98 2f       	mov	r25, r24
    302c:	80 2d       	mov	r24, r0
    302e:	82 2b       	or	r24, r18
    3030:	8c 93       	st	X, r24
						/*
						 * Configure Compare match value for Timer1 to start count from it
						 * Anding with 0XFFFF to make sure the value won't exceed
						 * OXFFFF as it is 16-bit Timer
						 */
						TIMER1_OUTPUT_COMPARE_REGISTER_A = ((Config_Ptr->timer_compare_MatchValue)) & 0XFFFF;
    3032:	2a e4       	ldi	r18, 0x4A	; 74
    3034:	30 e0       	ldi	r19, 0x00	; 0
    3036:	e9 81       	ldd	r30, Y+1	; 0x01
    3038:	fa 81       	ldd	r31, Y+2	; 0x02
    303a:	84 81       	ldd	r24, Z+4	; 0x04
    303c:	95 81       	ldd	r25, Z+5	; 0x05
    303e:	a6 81       	ldd	r26, Z+6	; 0x06
    3040:	b7 81       	ldd	r27, Z+7	; 0x07
    3042:	f9 01       	movw	r30, r18
    3044:	91 83       	std	Z+1, r25	; 0x01
    3046:	80 83       	st	Z, r24
						 * Enable Timer1 compare match interrupt
						 * wait for: -Enable I-bit "mask bit" in the SREG register
						 *           -OCF1 bit in the TIFR register to be set
						 * Timer1 compare match mode is ready to work after that
						 */
						TIMER1_INTERRUPT_MASK_REGISTER = SET_BIT(TIMER1_INTERRUPT_MASK_REGISTER,TIMER1_OUTPUT_COMPARE_MATCH_INTERRUPT_A);
    3048:	29 e5       	ldi	r18, 0x59	; 89
    304a:	30 e0       	ldi	r19, 0x00	; 0
    304c:	a9 e5       	ldi	r26, 0x59	; 89
    304e:	b0 e0       	ldi	r27, 0x00	; 0
    3050:	e9 e5       	ldi	r30, 0x59	; 89
    3052:	f0 e0       	ldi	r31, 0x00	; 0
    3054:	80 81       	ld	r24, Z
    3056:	80 61       	ori	r24, 0x10	; 16
    3058:	8c 93       	st	X, r24
    305a:	8c 91       	ld	r24, X
    305c:	f9 01       	movw	r30, r18
    305e:	80 83       	st	Z, r24
    3060:	82 c2       	rjmp	.+1284   	; 0x3566 <Timer_init+0xc98>
						/*
						 * Configure FOC1B bit in the TCCR1 register to be active
						 * As Timer1 is non-PWM
						 * Make FOC1B to be Active as it is compare mode
						 */
						TIMER1_CONTROL_REGIRSTER_A =  SET_BIT(TIMER1_CONTROL_REGIRSTER_A,TIMER1_FORCE_OUTPUT_COMPARE_BIT_B);
    3062:	2f e4       	ldi	r18, 0x4F	; 79
    3064:	30 e0       	ldi	r19, 0x00	; 0
    3066:	af e4       	ldi	r26, 0x4F	; 79
    3068:	b0 e0       	ldi	r27, 0x00	; 0
    306a:	ef e4       	ldi	r30, 0x4F	; 79
    306c:	f0 e0       	ldi	r31, 0x00	; 0
    306e:	80 81       	ld	r24, Z
    3070:	84 60       	ori	r24, 0x04	; 4
    3072:	8c 93       	st	X, r24
    3074:	8c 91       	ld	r24, X
    3076:	f9 01       	movw	r30, r18
    3078:	80 83       	st	Z, r24
						/*
						 * Configure compare output mode to work with Timer1
						 * with one mode from 4 modes in TCCR1A
						 * Configure COM1B0/COM1B1 bits in TCCR1A register
						 */
						TIMER1_CONTROL_REGIRSTER_A = (TIMER1_CONTROL_REGIRSTER_A & TIMER1_COM1B_MASK_CLEAR) | ((Config_Ptr->COM)<<COM1B_SHIFT_VALUE);
    307a:	af e4       	ldi	r26, 0x4F	; 79
    307c:	b0 e0       	ldi	r27, 0x00	; 0
    307e:	ef e4       	ldi	r30, 0x4F	; 79
    3080:	f0 e0       	ldi	r31, 0x00	; 0
    3082:	80 81       	ld	r24, Z
    3084:	28 2f       	mov	r18, r24
    3086:	2f 7c       	andi	r18, 0xCF	; 207
    3088:	e9 81       	ldd	r30, Y+1	; 0x01
    308a:	fa 81       	ldd	r31, Y+2	; 0x02
    308c:	83 85       	ldd	r24, Z+11	; 0x0b
    308e:	88 2f       	mov	r24, r24
    3090:	90 e0       	ldi	r25, 0x00	; 0
    3092:	82 95       	swap	r24
    3094:	92 95       	swap	r25
    3096:	90 7f       	andi	r25, 0xF0	; 240
    3098:	98 27       	eor	r25, r24
    309a:	80 7f       	andi	r24, 0xF0	; 240
    309c:	98 27       	eor	r25, r24
    309e:	82 2b       	or	r24, r18
    30a0:	8c 93       	st	X, r24
						 * Configure Compare match value for Timer1 to start count from it
						 * Anding with 0XFFFF to make sure the value won't exceed
						 * OXFFFF as it is 16-bit Timer
						 * to make it count right put OCR1A  greater than the value in OCR1B by 1
						 */
						TIMER1_OUTPUT_COMPARE_REGISTER_A = (((Config_Ptr->timer_compare_MatchValue)) & 0XFFFF) + 1;
    30a2:	2a e4       	ldi	r18, 0x4A	; 74
    30a4:	30 e0       	ldi	r19, 0x00	; 0
    30a6:	e9 81       	ldd	r30, Y+1	; 0x01
    30a8:	fa 81       	ldd	r31, Y+2	; 0x02
    30aa:	84 81       	ldd	r24, Z+4	; 0x04
    30ac:	95 81       	ldd	r25, Z+5	; 0x05
    30ae:	a6 81       	ldd	r26, Z+6	; 0x06
    30b0:	b7 81       	ldd	r27, Z+7	; 0x07
    30b2:	01 96       	adiw	r24, 0x01	; 1
    30b4:	f9 01       	movw	r30, r18
    30b6:	91 83       	std	Z+1, r25	; 0x01
    30b8:	80 83       	st	Z, r24
						TIMER1_OUTPUT_COMPARE_REGISTER_B = ((Config_Ptr->timer_compare_MatchValue)) & 0XFFFF;
    30ba:	28 e4       	ldi	r18, 0x48	; 72
    30bc:	30 e0       	ldi	r19, 0x00	; 0
    30be:	e9 81       	ldd	r30, Y+1	; 0x01
    30c0:	fa 81       	ldd	r31, Y+2	; 0x02
    30c2:	84 81       	ldd	r24, Z+4	; 0x04
    30c4:	95 81       	ldd	r25, Z+5	; 0x05
    30c6:	a6 81       	ldd	r26, Z+6	; 0x06
    30c8:	b7 81       	ldd	r27, Z+7	; 0x07
    30ca:	f9 01       	movw	r30, r18
    30cc:	91 83       	std	Z+1, r25	; 0x01
    30ce:	80 83       	st	Z, r24
						 * Enable Timer1 compare match interrupt
						 * wait for: -Enable I-bit "mask bit" in the SREG register
						 *           -OCF1 bit in the TIFR register to be set
						 * Timer1 compare match mode is ready to work after that
						 */
						TIMER1_INTERRUPT_MASK_REGISTER = SET_BIT(TIMER1_INTERRUPT_MASK_REGISTER,TIMER1_OUTPUT_COMPARE_MATCH_INTERRUPT_B);
    30d0:	29 e5       	ldi	r18, 0x59	; 89
    30d2:	30 e0       	ldi	r19, 0x00	; 0
    30d4:	a9 e5       	ldi	r26, 0x59	; 89
    30d6:	b0 e0       	ldi	r27, 0x00	; 0
    30d8:	e9 e5       	ldi	r30, 0x59	; 89
    30da:	f0 e0       	ldi	r31, 0x00	; 0
    30dc:	80 81       	ld	r24, Z
    30de:	88 60       	ori	r24, 0x08	; 8
    30e0:	8c 93       	st	X, r24
    30e2:	8c 91       	ld	r24, X
    30e4:	f9 01       	movw	r30, r18
    30e6:	80 83       	st	Z, r24
    30e8:	3e c2       	rjmp	.+1148   	; 0x3566 <Timer_init+0xc98>
						/*
						 * Configure wave form generation mode to work with Fast PWM TOP in ICR1
						 * Clear WGM10 bit in TCCR1A register
						 * SET WGM11 bit in TCCR1A register
						 */
						TIMER1_CONTROL_REGIRSTER_A =  CLEAR_BIT(TIMER1_CONTROL_REGIRSTER_A, TIMER1_WAVE_FORM_GENERATION_BIT10);
    30ea:	2f e4       	ldi	r18, 0x4F	; 79
    30ec:	30 e0       	ldi	r19, 0x00	; 0
    30ee:	af e4       	ldi	r26, 0x4F	; 79
    30f0:	b0 e0       	ldi	r27, 0x00	; 0
    30f2:	ef e4       	ldi	r30, 0x4F	; 79
    30f4:	f0 e0       	ldi	r31, 0x00	; 0
    30f6:	80 81       	ld	r24, Z
    30f8:	8e 7f       	andi	r24, 0xFE	; 254
    30fa:	8c 93       	st	X, r24
    30fc:	8c 91       	ld	r24, X
    30fe:	f9 01       	movw	r30, r18
    3100:	80 83       	st	Z, r24
						TIMER1_CONTROL_REGIRSTER_A =  SET_BIT(TIMER1_CONTROL_REGIRSTER_A, TIMER1_WAVE_FORM_GENERATION_BIT11);
    3102:	2f e4       	ldi	r18, 0x4F	; 79
    3104:	30 e0       	ldi	r19, 0x00	; 0
    3106:	af e4       	ldi	r26, 0x4F	; 79
    3108:	b0 e0       	ldi	r27, 0x00	; 0
    310a:	ef e4       	ldi	r30, 0x4F	; 79
    310c:	f0 e0       	ldi	r31, 0x00	; 0
    310e:	80 81       	ld	r24, Z
    3110:	82 60       	ori	r24, 0x02	; 2
    3112:	8c 93       	st	X, r24
    3114:	8c 91       	ld	r24, X
    3116:	f9 01       	movw	r30, r18
    3118:	80 83       	st	Z, r24
						/*
						 * Configure wave form generation mode to work with normal mode
						 * SET WMG13 bit in TCCR1B register
						 * Set WMG12 bit in TCCR1B register
						 */
						TIMER1_CONTROL_REGIRSTER_B =  SET_BIT(TIMER1_CONTROL_REGIRSTER_B, TIMER1_WAVE_FORM_GENERATION_BIT12);
    311a:	2e e4       	ldi	r18, 0x4E	; 78
    311c:	30 e0       	ldi	r19, 0x00	; 0
    311e:	ae e4       	ldi	r26, 0x4E	; 78
    3120:	b0 e0       	ldi	r27, 0x00	; 0
    3122:	ee e4       	ldi	r30, 0x4E	; 78
    3124:	f0 e0       	ldi	r31, 0x00	; 0
    3126:	80 81       	ld	r24, Z
    3128:	88 60       	ori	r24, 0x08	; 8
    312a:	8c 93       	st	X, r24
    312c:	8c 91       	ld	r24, X
    312e:	f9 01       	movw	r30, r18
    3130:	80 83       	st	Z, r24
						TIMER1_CONTROL_REGIRSTER_B =  SET_BIT(TIMER1_CONTROL_REGIRSTER_B, TIMER1_WAVE_FORM_GENERATION_BIT13);
    3132:	2e e4       	ldi	r18, 0x4E	; 78
    3134:	30 e0       	ldi	r19, 0x00	; 0
    3136:	ae e4       	ldi	r26, 0x4E	; 78
    3138:	b0 e0       	ldi	r27, 0x00	; 0
    313a:	ee e4       	ldi	r30, 0x4E	; 78
    313c:	f0 e0       	ldi	r31, 0x00	; 0
    313e:	80 81       	ld	r24, Z
    3140:	80 61       	ori	r24, 0x10	; 16
    3142:	8c 93       	st	X, r24
    3144:	8c 91       	ld	r24, X
    3146:	f9 01       	movw	r30, r18
    3148:	80 83       	st	Z, r24


					switch((Config_Ptr->compare_register))
    314a:	e9 81       	ldd	r30, Y+1	; 0x01
    314c:	fa 81       	ldd	r31, Y+2	; 0x02
    314e:	84 85       	ldd	r24, Z+12	; 0x0c
    3150:	28 2f       	mov	r18, r24
    3152:	30 e0       	ldi	r19, 0x00	; 0
    3154:	3b 87       	std	Y+11, r19	; 0x0b
    3156:	2a 87       	std	Y+10, r18	; 0x0a
    3158:	8a 85       	ldd	r24, Y+10	; 0x0a
    315a:	9b 85       	ldd	r25, Y+11	; 0x0b
    315c:	00 97       	sbiw	r24, 0x00	; 0
    315e:	31 f0       	breq	.+12     	; 0x316c <Timer_init+0x89e>
    3160:	ea 85       	ldd	r30, Y+10	; 0x0a
    3162:	fb 85       	ldd	r31, Y+11	; 0x0b
    3164:	e1 30       	cpi	r30, 0x01	; 1
    3166:	f1 05       	cpc	r31, r1
    3168:	e1 f1       	breq	.+120    	; 0x31e2 <Timer_init+0x914>
    316a:	fd c1       	rjmp	.+1018   	; 0x3566 <Timer_init+0xc98>

						/*
						 * Configure OC1A as Output PIN
						 * the pin where the PWM signal is generated from MC
						 */
						OC1A_DIRECTION_PORT = SET_BIT(OC1A_DIRECTION_PORT, OC1A_PIN);
    316c:	21 e3       	ldi	r18, 0x31	; 49
    316e:	30 e0       	ldi	r19, 0x00	; 0
    3170:	a1 e3       	ldi	r26, 0x31	; 49
    3172:	b0 e0       	ldi	r27, 0x00	; 0
    3174:	e1 e3       	ldi	r30, 0x31	; 49
    3176:	f0 e0       	ldi	r31, 0x00	; 0
    3178:	80 81       	ld	r24, Z
    317a:	80 62       	ori	r24, 0x20	; 32
    317c:	8c 93       	st	X, r24
    317e:	8c 91       	ld	r24, X
    3180:	f9 01       	movw	r30, r18
    3182:	80 83       	st	Z, r24
						/*
						 * Configure FOC1A bit in the TCCR1 register to be active
						 * As Timer1 is PWM
						 * Make FOC1A to be Active as it is Fast PWM mode
						 */
						TIMER1_CONTROL_REGIRSTER_A =  CLEAR_BIT(TIMER1_CONTROL_REGIRSTER_A,TIMER1_FORCE_OUTPUT_COMPARE_BIT_A);
    3184:	2f e4       	ldi	r18, 0x4F	; 79
    3186:	30 e0       	ldi	r19, 0x00	; 0
    3188:	af e4       	ldi	r26, 0x4F	; 79
    318a:	b0 e0       	ldi	r27, 0x00	; 0
    318c:	ef e4       	ldi	r30, 0x4F	; 79
    318e:	f0 e0       	ldi	r31, 0x00	; 0
    3190:	80 81       	ld	r24, Z
    3192:	87 7f       	andi	r24, 0xF7	; 247
    3194:	8c 93       	st	X, r24
    3196:	8c 91       	ld	r24, X
    3198:	f9 01       	movw	r30, r18
    319a:	80 83       	st	Z, r24
						/*
						 * Configure compare output mode to work with Timer1
						 * with one mode from 4 modes in TCCR1A
						 * Configure COM1A0/COM1A1 bits in TCCR1A register
						 */
						TIMER1_CONTROL_REGIRSTER_A = (TIMER1_CONTROL_REGIRSTER_A & TIMER1_COM1A_MASK_CLEAR) | ((Config_Ptr->COM)<<COM1A_SHIFT_VALUE);
    319c:	af e4       	ldi	r26, 0x4F	; 79
    319e:	b0 e0       	ldi	r27, 0x00	; 0
    31a0:	ef e4       	ldi	r30, 0x4F	; 79
    31a2:	f0 e0       	ldi	r31, 0x00	; 0
    31a4:	80 81       	ld	r24, Z
    31a6:	28 2f       	mov	r18, r24
    31a8:	2f 73       	andi	r18, 0x3F	; 63
    31aa:	e9 81       	ldd	r30, Y+1	; 0x01
    31ac:	fa 81       	ldd	r31, Y+2	; 0x02
    31ae:	83 85       	ldd	r24, Z+11	; 0x0b
    31b0:	88 2f       	mov	r24, r24
    31b2:	90 e0       	ldi	r25, 0x00	; 0
    31b4:	00 24       	eor	r0, r0
    31b6:	96 95       	lsr	r25
    31b8:	87 95       	ror	r24
    31ba:	07 94       	ror	r0
    31bc:	96 95       	lsr	r25
    31be:	87 95       	ror	r24
    31c0:	07 94       	ror	r0
    31c2:	98 2f       	mov	r25, r24
    31c4:	80 2d       	mov	r24, r0
    31c6:	82 2b       	or	r24, r18
    31c8:	8c 93       	st	X, r24
						/*
						 * Configure Compare match value for Timer1 to start count till reach it
						 * Anding with 0XFFFF to make sure the value won't exceed
						 * OXFFFF as it is 16-bit Timer
						 */
						INPUT_CAPTURE_REGISRTER1 = ((Config_Ptr->timer_compare_MatchValue)) & 0XFFFF;
    31ca:	26 e4       	ldi	r18, 0x46	; 70
    31cc:	30 e0       	ldi	r19, 0x00	; 0
    31ce:	e9 81       	ldd	r30, Y+1	; 0x01
    31d0:	fa 81       	ldd	r31, Y+2	; 0x02
    31d2:	84 81       	ldd	r24, Z+4	; 0x04
    31d4:	95 81       	ldd	r25, Z+5	; 0x05
    31d6:	a6 81       	ldd	r26, Z+6	; 0x06
    31d8:	b7 81       	ldd	r27, Z+7	; 0x07
    31da:	f9 01       	movw	r30, r18
    31dc:	91 83       	std	Z+1, r25	; 0x01
    31de:	80 83       	st	Z, r24
    31e0:	c2 c1       	rjmp	.+900    	; 0x3566 <Timer_init+0xc98>
					case ChannelB:
						/*
						 * Configure OC1B as Output PIN
						 * the pin where the PWM signal is generated from MC
						 */
						OC1B_DIRECTION_PORT = SET_BIT(OC1B_DIRECTION_PORT, OC1B_PIN);
    31e2:	21 e3       	ldi	r18, 0x31	; 49
    31e4:	30 e0       	ldi	r19, 0x00	; 0
    31e6:	a1 e3       	ldi	r26, 0x31	; 49
    31e8:	b0 e0       	ldi	r27, 0x00	; 0
    31ea:	e1 e3       	ldi	r30, 0x31	; 49
    31ec:	f0 e0       	ldi	r31, 0x00	; 0
    31ee:	80 81       	ld	r24, Z
    31f0:	80 61       	ori	r24, 0x10	; 16
    31f2:	8c 93       	st	X, r24
    31f4:	8c 91       	ld	r24, X
    31f6:	f9 01       	movw	r30, r18
    31f8:	80 83       	st	Z, r24
						/*
						 * Configure FOC1A bit in the TCCR1 register to be active
						 * As Timer1 is PWM
						 * Make FOC1A to be Active as it is Fast PWM mode
						 */
						TIMER1_CONTROL_REGIRSTER_A =  CLEAR_BIT(TIMER1_CONTROL_REGIRSTER_A,TIMER1_FORCE_OUTPUT_COMPARE_BIT_B);
    31fa:	2f e4       	ldi	r18, 0x4F	; 79
    31fc:	30 e0       	ldi	r19, 0x00	; 0
    31fe:	af e4       	ldi	r26, 0x4F	; 79
    3200:	b0 e0       	ldi	r27, 0x00	; 0
    3202:	ef e4       	ldi	r30, 0x4F	; 79
    3204:	f0 e0       	ldi	r31, 0x00	; 0
    3206:	80 81       	ld	r24, Z
    3208:	8b 7f       	andi	r24, 0xFB	; 251
    320a:	8c 93       	st	X, r24
    320c:	8c 91       	ld	r24, X
    320e:	f9 01       	movw	r30, r18
    3210:	80 83       	st	Z, r24
						/*
						 * Configure compare output mode to work with Timer1
						 * with one mode from 4 modes in TCCR1A
						 * Configure COM1A0/COM1A1 bits in TCCR1A register
						 */
						TIMER1_CONTROL_REGIRSTER_A = (TIMER1_CONTROL_REGIRSTER_A & TIMER1_COM1B_MASK_CLEAR) | ((Config_Ptr->COM)<<COM1B_SHIFT_VALUE);
    3212:	af e4       	ldi	r26, 0x4F	; 79
    3214:	b0 e0       	ldi	r27, 0x00	; 0
    3216:	ef e4       	ldi	r30, 0x4F	; 79
    3218:	f0 e0       	ldi	r31, 0x00	; 0
    321a:	80 81       	ld	r24, Z
    321c:	28 2f       	mov	r18, r24
    321e:	2f 7c       	andi	r18, 0xCF	; 207
    3220:	e9 81       	ldd	r30, Y+1	; 0x01
    3222:	fa 81       	ldd	r31, Y+2	; 0x02
    3224:	83 85       	ldd	r24, Z+11	; 0x0b
    3226:	88 2f       	mov	r24, r24
    3228:	90 e0       	ldi	r25, 0x00	; 0
    322a:	82 95       	swap	r24
    322c:	92 95       	swap	r25
    322e:	90 7f       	andi	r25, 0xF0	; 240
    3230:	98 27       	eor	r25, r24
    3232:	80 7f       	andi	r24, 0xF0	; 240
    3234:	98 27       	eor	r25, r24
    3236:	82 2b       	or	r24, r18
    3238:	8c 93       	st	X, r24
						/*
						 * Configure Compare match value for Timer1 to start count till reach it
						 * Anding with 0XFFFF to make sure the value won't exceed
						 * OXFFFF as it is 16-bit Timer
						 */
						INPUT_CAPTURE_REGISRTER1 = ((Config_Ptr->timer_compare_MatchValue)) & 0XFFFF;
    323a:	26 e4       	ldi	r18, 0x46	; 70
    323c:	30 e0       	ldi	r19, 0x00	; 0
    323e:	e9 81       	ldd	r30, Y+1	; 0x01
    3240:	fa 81       	ldd	r31, Y+2	; 0x02
    3242:	84 81       	ldd	r24, Z+4	; 0x04
    3244:	95 81       	ldd	r25, Z+5	; 0x05
    3246:	a6 81       	ldd	r26, Z+6	; 0x06
    3248:	b7 81       	ldd	r27, Z+7	; 0x07
    324a:	f9 01       	movw	r30, r18
    324c:	91 83       	std	Z+1, r25	; 0x01
    324e:	80 83       	st	Z, r24
    3250:	8a c1       	rjmp	.+788    	; 0x3566 <Timer_init+0xc98>
			 *                              Timer2
			 * ************************************************************************/
			case Timer2:

				/*Clear registers of Timer0 before accessing any of them*/
				TIMER2_CONTROL_REGIRSTER        &= 0X00;
    3252:	e5 e4       	ldi	r30, 0x45	; 69
    3254:	f0 e0       	ldi	r31, 0x00	; 0
    3256:	20 81       	ld	r18, Z
    3258:	e5 e4       	ldi	r30, 0x45	; 69
    325a:	f0 e0       	ldi	r31, 0x00	; 0
    325c:	10 82       	st	Z, r1
				TIMER2_INITIAL_VALUE_REGISTER   &= 0X00;
    325e:	e4 e4       	ldi	r30, 0x44	; 68
    3260:	f0 e0       	ldi	r31, 0x00	; 0
    3262:	30 81       	ld	r19, Z
    3264:	e4 e4       	ldi	r30, 0x44	; 68
    3266:	f0 e0       	ldi	r31, 0x00	; 0
    3268:	10 82       	st	Z, r1
				TIMER2_OUTPUT_COMPARE_REGISTER  &= 0X00;
    326a:	e3 e4       	ldi	r30, 0x43	; 67
    326c:	f0 e0       	ldi	r31, 0x00	; 0
    326e:	80 81       	ld	r24, Z
    3270:	e3 e4       	ldi	r30, 0x43	; 67
    3272:	f0 e0       	ldi	r31, 0x00	; 0
    3274:	10 82       	st	Z, r1
				TIMER2_INTERRUPT_MASK_REGISTER  &= 0X00;
    3276:	e9 e5       	ldi	r30, 0x59	; 89
    3278:	f0 e0       	ldi	r31, 0x00	; 0
    327a:	90 81       	ld	r25, Z
    327c:	e9 e5       	ldi	r30, 0x59	; 89
    327e:	f0 e0       	ldi	r31, 0x00	; 0
    3280:	10 82       	st	Z, r1
				/*************************************************************************/
				ASSR  &= 0X00;
    3282:	e2 e4       	ldi	r30, 0x42	; 66
    3284:	f0 e0       	ldi	r31, 0x00	; 0
    3286:	20 81       	ld	r18, Z
    3288:	e2 e4       	ldi	r30, 0x42	; 66
    328a:	f0 e0       	ldi	r31, 0x00	; 0
    328c:	10 82       	st	Z, r1
				 * Configure initial value for Timer2 to start count from it
				 * Anding with 0XFF to make sure the value won't exceed
				 * 255 as it is 8-bit Timer
				 */

				TIMER2_INITIAL_VALUE_REGISTER = ( (Config_Ptr->timer_InitialValue) ) & 0XFF;
    328e:	24 e4       	ldi	r18, 0x44	; 68
    3290:	30 e0       	ldi	r19, 0x00	; 0
    3292:	e9 81       	ldd	r30, Y+1	; 0x01
    3294:	fa 81       	ldd	r31, Y+2	; 0x02
    3296:	80 81       	ld	r24, Z
    3298:	91 81       	ldd	r25, Z+1	; 0x01
    329a:	a2 81       	ldd	r26, Z+2	; 0x02
    329c:	b3 81       	ldd	r27, Z+3	; 0x03
    329e:	f9 01       	movw	r30, r18
    32a0:	80 83       	st	Z, r24
				 * Anding with 0XF8 to make sure the first 3-bits in TCCR2 register=0
				 * ORing with the selected timer clock to include it in the first 3-bits
				 * and keep the other bits as they are
				 */

				TIMER2_CONTROL_REGIRSTER = (TIMER2_CONTROL_REGIRSTER  & TIMER2_CLOCK_MASK_CLEAR) | (Config_Ptr->timer_clock);
    32a2:	a5 e4       	ldi	r26, 0x45	; 69
    32a4:	b0 e0       	ldi	r27, 0x00	; 0
    32a6:	e5 e4       	ldi	r30, 0x45	; 69
    32a8:	f0 e0       	ldi	r31, 0x00	; 0
    32aa:	80 81       	ld	r24, Z
    32ac:	98 2f       	mov	r25, r24
    32ae:	98 7f       	andi	r25, 0xF8	; 248
    32b0:	e9 81       	ldd	r30, Y+1	; 0x01
    32b2:	fa 81       	ldd	r31, Y+2	; 0x02
    32b4:	81 85       	ldd	r24, Z+9	; 0x09
    32b6:	89 2b       	or	r24, r25
    32b8:	8c 93       	st	X, r24


				switch(Config_Ptr->timer_mode)
    32ba:	e9 81       	ldd	r30, Y+1	; 0x01
    32bc:	fa 81       	ldd	r31, Y+2	; 0x02
    32be:	82 85       	ldd	r24, Z+10	; 0x0a
    32c0:	28 2f       	mov	r18, r24
    32c2:	30 e0       	ldi	r19, 0x00	; 0
    32c4:	3c 83       	std	Y+4, r19	; 0x04
    32c6:	2b 83       	std	Y+3, r18	; 0x03
    32c8:	8b 81       	ldd	r24, Y+3	; 0x03
    32ca:	9c 81       	ldd	r25, Y+4	; 0x04
    32cc:	81 30       	cpi	r24, 0x01	; 1
    32ce:	91 05       	cpc	r25, r1
    32d0:	09 f4       	brne	.+2      	; 0x32d4 <Timer_init+0xa06>
    32d2:	5d c0       	rjmp	.+186    	; 0x338e <Timer_init+0xac0>
    32d4:	eb 81       	ldd	r30, Y+3	; 0x03
    32d6:	fc 81       	ldd	r31, Y+4	; 0x04
    32d8:	e2 30       	cpi	r30, 0x02	; 2
    32da:	f1 05       	cpc	r31, r1
    32dc:	34 f4       	brge	.+12     	; 0x32ea <Timer_init+0xa1c>
    32de:	2b 81       	ldd	r18, Y+3	; 0x03
    32e0:	3c 81       	ldd	r19, Y+4	; 0x04
    32e2:	21 15       	cp	r18, r1
    32e4:	31 05       	cpc	r19, r1
    32e6:	71 f0       	breq	.+28     	; 0x3304 <Timer_init+0xa36>
    32e8:	3e c1       	rjmp	.+636    	; 0x3566 <Timer_init+0xc98>
    32ea:	8b 81       	ldd	r24, Y+3	; 0x03
    32ec:	9c 81       	ldd	r25, Y+4	; 0x04
    32ee:	82 30       	cpi	r24, 0x02	; 2
    32f0:	91 05       	cpc	r25, r1
    32f2:	09 f4       	brne	.+2      	; 0x32f6 <Timer_init+0xa28>
    32f4:	9b c0       	rjmp	.+310    	; 0x342c <Timer_init+0xb5e>
    32f6:	eb 81       	ldd	r30, Y+3	; 0x03
    32f8:	fc 81       	ldd	r31, Y+4	; 0x04
    32fa:	e3 30       	cpi	r30, 0x03	; 3
    32fc:	f1 05       	cpc	r31, r1
    32fe:	09 f4       	brne	.+2      	; 0x3302 <Timer_init+0xa34>
    3300:	e4 c0       	rjmp	.+456    	; 0x34ca <Timer_init+0xbfc>
    3302:	31 c1       	rjmp	.+610    	; 0x3566 <Timer_init+0xc98>
					/*
					 * Configure wave form generation mode to work with normal mode
					 * Clear WGM00 bit in TCCR0 register
					 * Clear WGM01 bit in TCCR0 register
					 */
					TIMER2_CONTROL_REGIRSTER  = CLEAR_BIT(TIMER2_CONTROL_REGIRSTER , TIMER2_WAVE_FORM_GENERATION_BIT0);
    3304:	25 e4       	ldi	r18, 0x45	; 69
    3306:	30 e0       	ldi	r19, 0x00	; 0
    3308:	a5 e4       	ldi	r26, 0x45	; 69
    330a:	b0 e0       	ldi	r27, 0x00	; 0
    330c:	e5 e4       	ldi	r30, 0x45	; 69
    330e:	f0 e0       	ldi	r31, 0x00	; 0
    3310:	80 81       	ld	r24, Z
    3312:	8f 7b       	andi	r24, 0xBF	; 191
    3314:	8c 93       	st	X, r24
    3316:	8c 91       	ld	r24, X
    3318:	f9 01       	movw	r30, r18
    331a:	80 83       	st	Z, r24
					TIMER2_CONTROL_REGIRSTER  = CLEAR_BIT(TIMER2_CONTROL_REGIRSTER , TIMER2_WAVE_FORM_GENERATION_BIT1);
    331c:	25 e4       	ldi	r18, 0x45	; 69
    331e:	30 e0       	ldi	r19, 0x00	; 0
    3320:	a5 e4       	ldi	r26, 0x45	; 69
    3322:	b0 e0       	ldi	r27, 0x00	; 0
    3324:	e5 e4       	ldi	r30, 0x45	; 69
    3326:	f0 e0       	ldi	r31, 0x00	; 0
    3328:	80 81       	ld	r24, Z
    332a:	87 7f       	andi	r24, 0xF7	; 247
    332c:	8c 93       	st	X, r24
    332e:	8c 91       	ld	r24, X
    3330:	f9 01       	movw	r30, r18
    3332:	80 83       	st	Z, r24
					 * Configure compare output mode to work with normal port operation
					 * configure OC2
					 * Configure COM20 bit in TCCR2 register
					 * Configure COM21 bit in TCCR2 register
					 */
					TIMER2_CONTROL_REGIRSTER = (TIMER2_CONTROL_REGIRSTER & TIMER2_CLEAR_COMPARE_OUTPUT_MODE_BITS_VALUE ) | ((Config_Ptr->COM)<<COM2_SHIFT_VALUE);
    3334:	a5 e4       	ldi	r26, 0x45	; 69
    3336:	b0 e0       	ldi	r27, 0x00	; 0
    3338:	e5 e4       	ldi	r30, 0x45	; 69
    333a:	f0 e0       	ldi	r31, 0x00	; 0
    333c:	80 81       	ld	r24, Z
    333e:	28 2f       	mov	r18, r24
    3340:	2f 7c       	andi	r18, 0xCF	; 207
    3342:	e9 81       	ldd	r30, Y+1	; 0x01
    3344:	fa 81       	ldd	r31, Y+2	; 0x02
    3346:	83 85       	ldd	r24, Z+11	; 0x0b
    3348:	88 2f       	mov	r24, r24
    334a:	90 e0       	ldi	r25, 0x00	; 0
    334c:	82 95       	swap	r24
    334e:	92 95       	swap	r25
    3350:	90 7f       	andi	r25, 0xF0	; 240
    3352:	98 27       	eor	r25, r24
    3354:	80 7f       	andi	r24, 0xF0	; 240
    3356:	98 27       	eor	r25, r24
    3358:	82 2b       	or	r24, r18
    335a:	8c 93       	st	X, r24
					/*
					 * Configure FOC2 bit in the TCCR2 register to be active
					 * As Timer2 is non-PWM
					 * Make FOC2 to be Active as it is overflow mode
					 */
					TIMER2_CONTROL_REGIRSTER =  SET_BIT(TIMER2_CONTROL_REGIRSTER ,TIMER2_FORCE_OUTPUT_COMPARE_BIT);
    335c:	25 e4       	ldi	r18, 0x45	; 69
    335e:	30 e0       	ldi	r19, 0x00	; 0
    3360:	a5 e4       	ldi	r26, 0x45	; 69
    3362:	b0 e0       	ldi	r27, 0x00	; 0
    3364:	e5 e4       	ldi	r30, 0x45	; 69
    3366:	f0 e0       	ldi	r31, 0x00	; 0
    3368:	80 81       	ld	r24, Z
    336a:	80 68       	ori	r24, 0x80	; 128
    336c:	8c 93       	st	X, r24
    336e:	8c 91       	ld	r24, X
    3370:	f9 01       	movw	r30, r18
    3372:	80 83       	st	Z, r24
					 * Enable Timer0 overflow interrupt
					 * wait for: -Enable I-bit "mask bit" in the SREG register
					 *           -TOV0 bit in the TIFR register to be set
					 * Timer0 overflow mode is ready to work after that
					 */
					TIMER2_INTERRUPT_MASK_REGISTER = SET_BIT(TIMER2_INTERRUPT_MASK_REGISTER,TIMER2_OUTPUT_OVERFLOW_INTERRUPT);
    3374:	29 e5       	ldi	r18, 0x59	; 89
    3376:	30 e0       	ldi	r19, 0x00	; 0
    3378:	a9 e5       	ldi	r26, 0x59	; 89
    337a:	b0 e0       	ldi	r27, 0x00	; 0
    337c:	e9 e5       	ldi	r30, 0x59	; 89
    337e:	f0 e0       	ldi	r31, 0x00	; 0
    3380:	80 81       	ld	r24, Z
    3382:	80 64       	ori	r24, 0x40	; 64
    3384:	8c 93       	st	X, r24
    3386:	8c 91       	ld	r24, X
    3388:	f9 01       	movw	r30, r18
    338a:	80 83       	st	Z, r24
    338c:	ec c0       	rjmp	.+472    	; 0x3566 <Timer_init+0xc98>
					/*
					 * Configure OC0 as Output PIN
					 * the pin where the PWM signal is generated from MC
					 */

					OC2_DIRECTION_PORT = SET_BIT(OC2_DIRECTION_PORT, OC2_PIN);
    338e:	21 e3       	ldi	r18, 0x31	; 49
    3390:	30 e0       	ldi	r19, 0x00	; 0
    3392:	a1 e3       	ldi	r26, 0x31	; 49
    3394:	b0 e0       	ldi	r27, 0x00	; 0
    3396:	e1 e3       	ldi	r30, 0x31	; 49
    3398:	f0 e0       	ldi	r31, 0x00	; 0
    339a:	80 81       	ld	r24, Z
    339c:	80 68       	ori	r24, 0x80	; 128
    339e:	8c 93       	st	X, r24
    33a0:	8c 91       	ld	r24, X
    33a2:	f9 01       	movw	r30, r18
    33a4:	80 83       	st	Z, r24

					/*
					 *Clear force output compare bit in Timer/Counter control register
					 *to work with pulse width modulation
					 */
					TIMER2_CONTROL_REGIRSTER = CLEAR_BIT(TIMER2_CONTROL_REGIRSTER, TIMER2_FORCE_OUTPUT_COMPARE_BIT);
    33a6:	25 e4       	ldi	r18, 0x45	; 69
    33a8:	30 e0       	ldi	r19, 0x00	; 0
    33aa:	a5 e4       	ldi	r26, 0x45	; 69
    33ac:	b0 e0       	ldi	r27, 0x00	; 0
    33ae:	e5 e4       	ldi	r30, 0x45	; 69
    33b0:	f0 e0       	ldi	r31, 0x00	; 0
    33b2:	80 81       	ld	r24, Z
    33b4:	8f 77       	andi	r24, 0x7F	; 127
    33b6:	8c 93       	st	X, r24
    33b8:	8c 91       	ld	r24, X
    33ba:	f9 01       	movw	r30, r18
    33bc:	80 83       	st	Z, r24
					/*
					 * Configure wave form generation mode to work with normal mode
					 * SET WGM00 bit in TCCR0 register
					 * Clear WGM01 bit in TCCR0 register
					 */
					TIMER2_CONTROL_REGIRSTER = SET_BIT(TIMER2_CONTROL_REGIRSTER, TIMER2_WAVE_FORM_GENERATION_BIT0);
    33be:	25 e4       	ldi	r18, 0x45	; 69
    33c0:	30 e0       	ldi	r19, 0x00	; 0
    33c2:	a5 e4       	ldi	r26, 0x45	; 69
    33c4:	b0 e0       	ldi	r27, 0x00	; 0
    33c6:	e5 e4       	ldi	r30, 0x45	; 69
    33c8:	f0 e0       	ldi	r31, 0x00	; 0
    33ca:	80 81       	ld	r24, Z
    33cc:	80 64       	ori	r24, 0x40	; 64
    33ce:	8c 93       	st	X, r24
    33d0:	8c 91       	ld	r24, X
    33d2:	f9 01       	movw	r30, r18
    33d4:	80 83       	st	Z, r24
					TIMER2_CONTROL_REGIRSTER = CLEAR_BIT(TIMER2_CONTROL_REGIRSTER, TIMER2_WAVE_FORM_GENERATION_BIT1);
    33d6:	25 e4       	ldi	r18, 0x45	; 69
    33d8:	30 e0       	ldi	r19, 0x00	; 0
    33da:	a5 e4       	ldi	r26, 0x45	; 69
    33dc:	b0 e0       	ldi	r27, 0x00	; 0
    33de:	e5 e4       	ldi	r30, 0x45	; 69
    33e0:	f0 e0       	ldi	r31, 0x00	; 0
    33e2:	80 81       	ld	r24, Z
    33e4:	87 7f       	andi	r24, 0xF7	; 247
    33e6:	8c 93       	st	X, r24
    33e8:	8c 91       	ld	r24, X
    33ea:	f9 01       	movw	r30, r18
    33ec:	80 83       	st	Z, r24
					 * Configure compare output mode to work with normal port operation
					 * Decide the mode of OC0 from compare output modes with non PWM
					 * Configure COM00 bit in TCCR0 register
					 * Configure COM01 bit in TCCR0 register
					 */
					TIMER2_CONTROL_REGIRSTER = (TIMER2_CONTROL_REGIRSTER & TIMER2_CLEAR_COMPARE_OUTPUT_MODE_BITS_VALUE ) | ((Config_Ptr->COM)<<COM2_SHIFT_VALUE);
    33ee:	a5 e4       	ldi	r26, 0x45	; 69
    33f0:	b0 e0       	ldi	r27, 0x00	; 0
    33f2:	e5 e4       	ldi	r30, 0x45	; 69
    33f4:	f0 e0       	ldi	r31, 0x00	; 0
    33f6:	80 81       	ld	r24, Z
    33f8:	28 2f       	mov	r18, r24
    33fa:	2f 7c       	andi	r18, 0xCF	; 207
    33fc:	e9 81       	ldd	r30, Y+1	; 0x01
    33fe:	fa 81       	ldd	r31, Y+2	; 0x02
    3400:	83 85       	ldd	r24, Z+11	; 0x0b
    3402:	88 2f       	mov	r24, r24
    3404:	90 e0       	ldi	r25, 0x00	; 0
    3406:	82 95       	swap	r24
    3408:	92 95       	swap	r25
    340a:	90 7f       	andi	r25, 0xF0	; 240
    340c:	98 27       	eor	r25, r24
    340e:	80 7f       	andi	r24, 0xF0	; 240
    3410:	98 27       	eor	r25, r24
    3412:	82 2b       	or	r24, r18
    3414:	8c 93       	st	X, r24
					/*
					 * Configure Compare match value for Timer0 to start count till reach it
					 * Anding with 0XFF to make sure the value won't exceed
					 * 255 as it is 8-bit Timer
					 */
					TIMER2_OUTPUT_COMPARE_REGISTER = ((Config_Ptr->timer_compare_MatchValue)) & 0XFF;
    3416:	23 e4       	ldi	r18, 0x43	; 67
    3418:	30 e0       	ldi	r19, 0x00	; 0
    341a:	e9 81       	ldd	r30, Y+1	; 0x01
    341c:	fa 81       	ldd	r31, Y+2	; 0x02
    341e:	84 81       	ldd	r24, Z+4	; 0x04
    3420:	95 81       	ldd	r25, Z+5	; 0x05
    3422:	a6 81       	ldd	r26, Z+6	; 0x06
    3424:	b7 81       	ldd	r27, Z+7	; 0x07
    3426:	f9 01       	movw	r30, r18
    3428:	80 83       	st	Z, r24
    342a:	9d c0       	rjmp	.+314    	; 0x3566 <Timer_init+0xc98>
					/*
					 * Configure wave form generation mode to work with normal mode
					 * Clear WGM20 bit in TCCR2 register
					 * Clear WGM21 bit in TCCR2 register
					 */
					TIMER2_CONTROL_REGIRSTER  = CLEAR_BIT(TIMER2_CONTROL_REGIRSTER , TIMER2_WAVE_FORM_GENERATION_BIT0);
    342c:	25 e4       	ldi	r18, 0x45	; 69
    342e:	30 e0       	ldi	r19, 0x00	; 0
    3430:	a5 e4       	ldi	r26, 0x45	; 69
    3432:	b0 e0       	ldi	r27, 0x00	; 0
    3434:	e5 e4       	ldi	r30, 0x45	; 69
    3436:	f0 e0       	ldi	r31, 0x00	; 0
    3438:	80 81       	ld	r24, Z
    343a:	8f 7b       	andi	r24, 0xBF	; 191
    343c:	8c 93       	st	X, r24
    343e:	8c 91       	ld	r24, X
    3440:	f9 01       	movw	r30, r18
    3442:	80 83       	st	Z, r24
					TIMER2_CONTROL_REGIRSTER  = SET_BIT(TIMER2_CONTROL_REGIRSTER , TIMER2_WAVE_FORM_GENERATION_BIT1);
    3444:	25 e4       	ldi	r18, 0x45	; 69
    3446:	30 e0       	ldi	r19, 0x00	; 0
    3448:	a5 e4       	ldi	r26, 0x45	; 69
    344a:	b0 e0       	ldi	r27, 0x00	; 0
    344c:	e5 e4       	ldi	r30, 0x45	; 69
    344e:	f0 e0       	ldi	r31, 0x00	; 0
    3450:	80 81       	ld	r24, Z
    3452:	88 60       	ori	r24, 0x08	; 8
    3454:	8c 93       	st	X, r24
    3456:	8c 91       	ld	r24, X
    3458:	f9 01       	movw	r30, r18
    345a:	80 83       	st	Z, r24
					 * Configure compare output mode to work with normal port operation
					 * configure OC2
					 * Configure COM20 bit in TCCR2 register
					 * Configure COM21 bit in TCCR2 register
					 */
					TIMER2_CONTROL_REGIRSTER = (TIMER2_CONTROL_REGIRSTER & TIMER2_CLEAR_COMPARE_OUTPUT_MODE_BITS_VALUE ) | ((Config_Ptr->COM)<<COM2_SHIFT_VALUE);
    345c:	a5 e4       	ldi	r26, 0x45	; 69
    345e:	b0 e0       	ldi	r27, 0x00	; 0
    3460:	e5 e4       	ldi	r30, 0x45	; 69
    3462:	f0 e0       	ldi	r31, 0x00	; 0
    3464:	80 81       	ld	r24, Z
    3466:	28 2f       	mov	r18, r24
    3468:	2f 7c       	andi	r18, 0xCF	; 207
    346a:	e9 81       	ldd	r30, Y+1	; 0x01
    346c:	fa 81       	ldd	r31, Y+2	; 0x02
    346e:	83 85       	ldd	r24, Z+11	; 0x0b
    3470:	88 2f       	mov	r24, r24
    3472:	90 e0       	ldi	r25, 0x00	; 0
    3474:	82 95       	swap	r24
    3476:	92 95       	swap	r25
    3478:	90 7f       	andi	r25, 0xF0	; 240
    347a:	98 27       	eor	r25, r24
    347c:	80 7f       	andi	r24, 0xF0	; 240
    347e:	98 27       	eor	r25, r24
    3480:	82 2b       	or	r24, r18
    3482:	8c 93       	st	X, r24
					/*
					 * Configure FOC2 bit in the TCCR2 register to be active
					 * As Timer2 is non-PWM
					 * Make FOC2 to be Active as it is compare mode
					 */
					TIMER2_CONTROL_REGIRSTER =  SET_BIT(TIMER2_CONTROL_REGIRSTER , TIMER2_FORCE_OUTPUT_COMPARE_BIT);
    3484:	25 e4       	ldi	r18, 0x45	; 69
    3486:	30 e0       	ldi	r19, 0x00	; 0
    3488:	a5 e4       	ldi	r26, 0x45	; 69
    348a:	b0 e0       	ldi	r27, 0x00	; 0
    348c:	e5 e4       	ldi	r30, 0x45	; 69
    348e:	f0 e0       	ldi	r31, 0x00	; 0
    3490:	80 81       	ld	r24, Z
    3492:	80 68       	ori	r24, 0x80	; 128
    3494:	8c 93       	st	X, r24
    3496:	8c 91       	ld	r24, X
    3498:	f9 01       	movw	r30, r18
    349a:	80 83       	st	Z, r24
					/*
					 * Configure Compare match value for Timer2 to start count from it
					 * Anding with 0XFF to make sure the value won't exceed
					 * 255 as it is 8-bit Timer
					 */
					TIMER2_OUTPUT_COMPARE_REGISTER = ((Config_Ptr->timer_compare_MatchValue)) & 0XFF;
    349c:	23 e4       	ldi	r18, 0x43	; 67
    349e:	30 e0       	ldi	r19, 0x00	; 0
    34a0:	e9 81       	ldd	r30, Y+1	; 0x01
    34a2:	fa 81       	ldd	r31, Y+2	; 0x02
    34a4:	84 81       	ldd	r24, Z+4	; 0x04
    34a6:	95 81       	ldd	r25, Z+5	; 0x05
    34a8:	a6 81       	ldd	r26, Z+6	; 0x06
    34aa:	b7 81       	ldd	r27, Z+7	; 0x07
    34ac:	f9 01       	movw	r30, r18
    34ae:	80 83       	st	Z, r24
					 * Enable Timer2 compare match interrupt
					 * wait for: -Enable I-bit "mask bit" in the SREG register
					 *           -OCF2 bit in the TIFR register to be set
					 * Timer2 compare match mode is ready to work after that
					 */
					TIMER2_INTERRUPT_MASK_REGISTER = SET_BIT(TIMER2_INTERRUPT_MASK_REGISTER, TIMER2_OUTPUT_COMPARE_MATCH_INTERRUPT);
    34b0:	29 e5       	ldi	r18, 0x59	; 89
    34b2:	30 e0       	ldi	r19, 0x00	; 0
    34b4:	a9 e5       	ldi	r26, 0x59	; 89
    34b6:	b0 e0       	ldi	r27, 0x00	; 0
    34b8:	e9 e5       	ldi	r30, 0x59	; 89
    34ba:	f0 e0       	ldi	r31, 0x00	; 0
    34bc:	80 81       	ld	r24, Z
    34be:	80 68       	ori	r24, 0x80	; 128
    34c0:	8c 93       	st	X, r24
    34c2:	8c 91       	ld	r24, X
    34c4:	f9 01       	movw	r30, r18
    34c6:	80 83       	st	Z, r24
    34c8:	4e c0       	rjmp	.+156    	; 0x3566 <Timer_init+0xc98>
					/*
					 * Configure OC0 as Output PIN
					 * the pin where the PWM signal is generated from MC
					 */

					OC2_DIRECTION_PORT = SET_BIT(OC2_DIRECTION_PORT, OC2_PIN);
    34ca:	21 e3       	ldi	r18, 0x31	; 49
    34cc:	30 e0       	ldi	r19, 0x00	; 0
    34ce:	a1 e3       	ldi	r26, 0x31	; 49
    34d0:	b0 e0       	ldi	r27, 0x00	; 0
    34d2:	e1 e3       	ldi	r30, 0x31	; 49
    34d4:	f0 e0       	ldi	r31, 0x00	; 0
    34d6:	80 81       	ld	r24, Z
    34d8:	80 68       	ori	r24, 0x80	; 128
    34da:	8c 93       	st	X, r24
    34dc:	8c 91       	ld	r24, X
    34de:	f9 01       	movw	r30, r18
    34e0:	80 83       	st	Z, r24

					/*
					 *Clear force output compare bit in Timer/Counter control register
					 *to work with pulse width modulation
					 */
					TIMER2_CONTROL_REGIRSTER = CLEAR_BIT(TIMER2_CONTROL_REGIRSTER, TIMER2_FORCE_OUTPUT_COMPARE_BIT);
    34e2:	25 e4       	ldi	r18, 0x45	; 69
    34e4:	30 e0       	ldi	r19, 0x00	; 0
    34e6:	a5 e4       	ldi	r26, 0x45	; 69
    34e8:	b0 e0       	ldi	r27, 0x00	; 0
    34ea:	e5 e4       	ldi	r30, 0x45	; 69
    34ec:	f0 e0       	ldi	r31, 0x00	; 0
    34ee:	80 81       	ld	r24, Z
    34f0:	8f 77       	andi	r24, 0x7F	; 127
    34f2:	8c 93       	st	X, r24
    34f4:	8c 91       	ld	r24, X
    34f6:	f9 01       	movw	r30, r18
    34f8:	80 83       	st	Z, r24
					/*
					 * Configure wave form generation mode to work with normal mode
					 * SET WGM00 bit in TCCR0 register
					 * SET WGM01 bit in TCCR0 register
					 */
					TIMER2_CONTROL_REGIRSTER = SET_BIT(TIMER2_CONTROL_REGIRSTER, TIMER2_WAVE_FORM_GENERATION_BIT0);
    34fa:	25 e4       	ldi	r18, 0x45	; 69
    34fc:	30 e0       	ldi	r19, 0x00	; 0
    34fe:	a5 e4       	ldi	r26, 0x45	; 69
    3500:	b0 e0       	ldi	r27, 0x00	; 0
    3502:	e5 e4       	ldi	r30, 0x45	; 69
    3504:	f0 e0       	ldi	r31, 0x00	; 0
    3506:	80 81       	ld	r24, Z
    3508:	80 64       	ori	r24, 0x40	; 64
    350a:	8c 93       	st	X, r24
    350c:	8c 91       	ld	r24, X
    350e:	f9 01       	movw	r30, r18
    3510:	80 83       	st	Z, r24
					TIMER2_CONTROL_REGIRSTER = SET_BIT(TIMER2_CONTROL_REGIRSTER, TIMER2_WAVE_FORM_GENERATION_BIT1);
    3512:	25 e4       	ldi	r18, 0x45	; 69
    3514:	30 e0       	ldi	r19, 0x00	; 0
    3516:	a5 e4       	ldi	r26, 0x45	; 69
    3518:	b0 e0       	ldi	r27, 0x00	; 0
    351a:	e5 e4       	ldi	r30, 0x45	; 69
    351c:	f0 e0       	ldi	r31, 0x00	; 0
    351e:	80 81       	ld	r24, Z
    3520:	88 60       	ori	r24, 0x08	; 8
    3522:	8c 93       	st	X, r24
    3524:	8c 91       	ld	r24, X
    3526:	f9 01       	movw	r30, r18
    3528:	80 83       	st	Z, r24
					 * Configure compare output mode to work with normal port operation
					 * Decide the mode of OC0 from compare output modes with non PWM
					 * Configure COM00 bit in TCCR0 register
					 * Configure COM01 bit in TCCR0 register
					 */
					TIMER2_CONTROL_REGIRSTER = (TIMER2_CONTROL_REGIRSTER & TIMER2_CLEAR_COMPARE_OUTPUT_MODE_BITS_VALUE ) | ((Config_Ptr->COM)<<COM2_SHIFT_VALUE);
    352a:	a5 e4       	ldi	r26, 0x45	; 69
    352c:	b0 e0       	ldi	r27, 0x00	; 0
    352e:	e5 e4       	ldi	r30, 0x45	; 69
    3530:	f0 e0       	ldi	r31, 0x00	; 0
    3532:	80 81       	ld	r24, Z
    3534:	28 2f       	mov	r18, r24
    3536:	2f 7c       	andi	r18, 0xCF	; 207
    3538:	e9 81       	ldd	r30, Y+1	; 0x01
    353a:	fa 81       	ldd	r31, Y+2	; 0x02
    353c:	83 85       	ldd	r24, Z+11	; 0x0b
    353e:	88 2f       	mov	r24, r24
    3540:	90 e0       	ldi	r25, 0x00	; 0
    3542:	82 95       	swap	r24
    3544:	92 95       	swap	r25
    3546:	90 7f       	andi	r25, 0xF0	; 240
    3548:	98 27       	eor	r25, r24
    354a:	80 7f       	andi	r24, 0xF0	; 240
    354c:	98 27       	eor	r25, r24
    354e:	82 2b       	or	r24, r18
    3550:	8c 93       	st	X, r24
					/*
					 * Configure Compare match value for Timer0 to start count till reach it
					 * Anding with 0XFF to make sure the value won't exceed
					 * 255 as it is 8-bit Timer
					 */
					TIMER2_OUTPUT_COMPARE_REGISTER = ((Config_Ptr->timer_compare_MatchValue)) & 0XFF;
    3552:	23 e4       	ldi	r18, 0x43	; 67
    3554:	30 e0       	ldi	r19, 0x00	; 0
    3556:	e9 81       	ldd	r30, Y+1	; 0x01
    3558:	fa 81       	ldd	r31, Y+2	; 0x02
    355a:	84 81       	ldd	r24, Z+4	; 0x04
    355c:	95 81       	ldd	r25, Z+5	; 0x05
    355e:	a6 81       	ldd	r26, Z+6	; 0x06
    3560:	b7 81       	ldd	r27, Z+7	; 0x07
    3562:	f9 01       	movw	r30, r18
    3564:	80 83       	st	Z, r24

				break; /*End of Timer2*/

	}/*End of Super switch case*/

}/*End of the Timer_init*/
    3566:	a2 96       	adiw	r28, 0x22	; 34
    3568:	0f b6       	in	r0, 0x3f	; 63
    356a:	f8 94       	cli
    356c:	de bf       	out	0x3e, r29	; 62
    356e:	0f be       	out	0x3f, r0	; 63
    3570:	cd bf       	out	0x3d, r28	; 61
    3572:	cf 91       	pop	r28
    3574:	df 91       	pop	r29
    3576:	08 95       	ret

00003578 <Timer_setCallBack>:
 * [Out]           NONE
 *
 * [Returns]:      NONE
 ***************************************************************************************************/
void Timer_setCallBack(void(*a_ptr)(void), Timer_Type timer_type )
{
    3578:	df 93       	push	r29
    357a:	cf 93       	push	r28
    357c:	00 d0       	rcall	.+0      	; 0x357e <Timer_setCallBack+0x6>
    357e:	00 d0       	rcall	.+0      	; 0x3580 <Timer_setCallBack+0x8>
    3580:	0f 92       	push	r0
    3582:	cd b7       	in	r28, 0x3d	; 61
    3584:	de b7       	in	r29, 0x3e	; 62
    3586:	9a 83       	std	Y+2, r25	; 0x02
    3588:	89 83       	std	Y+1, r24	; 0x01
    358a:	6b 83       	std	Y+3, r22	; 0x03

	switch(timer_type)
    358c:	8b 81       	ldd	r24, Y+3	; 0x03
    358e:	28 2f       	mov	r18, r24
    3590:	30 e0       	ldi	r19, 0x00	; 0
    3592:	3d 83       	std	Y+5, r19	; 0x05
    3594:	2c 83       	std	Y+4, r18	; 0x04
    3596:	8c 81       	ldd	r24, Y+4	; 0x04
    3598:	9d 81       	ldd	r25, Y+5	; 0x05
    359a:	81 30       	cpi	r24, 0x01	; 1
    359c:	91 05       	cpc	r25, r1
    359e:	81 f0       	breq	.+32     	; 0x35c0 <Timer_setCallBack+0x48>
    35a0:	2c 81       	ldd	r18, Y+4	; 0x04
    35a2:	3d 81       	ldd	r19, Y+5	; 0x05
    35a4:	22 30       	cpi	r18, 0x02	; 2
    35a6:	31 05       	cpc	r19, r1
    35a8:	91 f0       	breq	.+36     	; 0x35ce <Timer_setCallBack+0x56>
    35aa:	8c 81       	ldd	r24, Y+4	; 0x04
    35ac:	9d 81       	ldd	r25, Y+5	; 0x05
    35ae:	00 97       	sbiw	r24, 0x00	; 0
    35b0:	a1 f4       	brne	.+40     	; 0x35da <Timer_setCallBack+0x62>
	{
	case Timer0:
		/* Save the address of the Call back function in a global variable */
		g_Timer0_callBackPtr = a_ptr;
    35b2:	89 81       	ldd	r24, Y+1	; 0x01
    35b4:	9a 81       	ldd	r25, Y+2	; 0x02
    35b6:	90 93 87 01 	sts	0x0187, r25
    35ba:	80 93 86 01 	sts	0x0186, r24
    35be:	0d c0       	rjmp	.+26     	; 0x35da <Timer_setCallBack+0x62>
		break;

	case Timer1:
		/* Save the address of the Call back function in a global variable */
		g_Timer1_callBackPtr = a_ptr;
    35c0:	89 81       	ldd	r24, Y+1	; 0x01
    35c2:	9a 81       	ldd	r25, Y+2	; 0x02
    35c4:	90 93 89 01 	sts	0x0189, r25
    35c8:	80 93 88 01 	sts	0x0188, r24
    35cc:	06 c0       	rjmp	.+12     	; 0x35da <Timer_setCallBack+0x62>
		break;

	case Timer2:
		/* Save the address of the Call back function in a global variable */
		g_Timer2_callBackPtr = a_ptr;
    35ce:	89 81       	ldd	r24, Y+1	; 0x01
    35d0:	9a 81       	ldd	r25, Y+2	; 0x02
    35d2:	90 93 8b 01 	sts	0x018B, r25
    35d6:	80 93 8a 01 	sts	0x018A, r24
		break;
	} /*End of the switch case*/

}/*End of the setCallBack function*/
    35da:	0f 90       	pop	r0
    35dc:	0f 90       	pop	r0
    35de:	0f 90       	pop	r0
    35e0:	0f 90       	pop	r0
    35e2:	0f 90       	pop	r0
    35e4:	cf 91       	pop	r28
    35e6:	df 91       	pop	r29
    35e8:	08 95       	ret

000035ea <Timer_stop>:
 * [Out]           NONE
 *
 * [Returns]:      NONE
 ***************************************************************************************************/
void Timer_stop(Timer_Type timer_type)
{
    35ea:	df 93       	push	r29
    35ec:	cf 93       	push	r28
    35ee:	00 d0       	rcall	.+0      	; 0x35f0 <Timer_stop+0x6>
    35f0:	0f 92       	push	r0
    35f2:	cd b7       	in	r28, 0x3d	; 61
    35f4:	de b7       	in	r29, 0x3e	; 62
    35f6:	89 83       	std	Y+1, r24	; 0x01

	switch(timer_type)
    35f8:	89 81       	ldd	r24, Y+1	; 0x01
    35fa:	28 2f       	mov	r18, r24
    35fc:	30 e0       	ldi	r19, 0x00	; 0
    35fe:	3b 83       	std	Y+3, r19	; 0x03
    3600:	2a 83       	std	Y+2, r18	; 0x02
    3602:	8a 81       	ldd	r24, Y+2	; 0x02
    3604:	9b 81       	ldd	r25, Y+3	; 0x03
    3606:	81 30       	cpi	r24, 0x01	; 1
    3608:	91 05       	cpc	r25, r1
    360a:	89 f0       	breq	.+34     	; 0x362e <Timer_stop+0x44>
    360c:	2a 81       	ldd	r18, Y+2	; 0x02
    360e:	3b 81       	ldd	r19, Y+3	; 0x03
    3610:	22 30       	cpi	r18, 0x02	; 2
    3612:	31 05       	cpc	r19, r1
    3614:	a1 f0       	breq	.+40     	; 0x363e <Timer_stop+0x54>
    3616:	8a 81       	ldd	r24, Y+2	; 0x02
    3618:	9b 81       	ldd	r25, Y+3	; 0x03
    361a:	00 97       	sbiw	r24, 0x00	; 0
    361c:	b9 f4       	brne	.+46     	; 0x364c <Timer_stop+0x62>
		/*
		 * Clear the first 3-bits in TCCR0 register
		 * stop the clock of the timer
		 * timer0 will stop incrementing
		 */
		TIMER0_CONTROL_REGIRSTER = (TIMER0_CONTROL_REGIRSTER  & TIMER0_CLOCK_MASK_CLEAR) ;
    361e:	a3 e5       	ldi	r26, 0x53	; 83
    3620:	b0 e0       	ldi	r27, 0x00	; 0
    3622:	e3 e5       	ldi	r30, 0x53	; 83
    3624:	f0 e0       	ldi	r31, 0x00	; 0
    3626:	80 81       	ld	r24, Z
    3628:	88 7f       	andi	r24, 0xF8	; 248
    362a:	8c 93       	st	X, r24
    362c:	0f c0       	rjmp	.+30     	; 0x364c <Timer_stop+0x62>
		/*
		 * Clear the first 3-bits in TCCR1B register
		 * stop the clock of the timer
		 * timer1 will stop incrementing
		 */
		TIMER1_CONTROL_REGIRSTER_B  =  (TIMER1_CONTROL_REGIRSTER_B  & TIMER1_CLOCK_MASK_CLEAR) ;
    362e:	ae e4       	ldi	r26, 0x4E	; 78
    3630:	b0 e0       	ldi	r27, 0x00	; 0
    3632:	ee e4       	ldi	r30, 0x4E	; 78
    3634:	f0 e0       	ldi	r31, 0x00	; 0
    3636:	80 81       	ld	r24, Z
    3638:	88 7f       	andi	r24, 0xF8	; 248
    363a:	8c 93       	st	X, r24
    363c:	07 c0       	rjmp	.+14     	; 0x364c <Timer_stop+0x62>
		/*
		 * Clear the first 3-bits in TCCR2 register
		 * stop the clock of the timer
		 * timer2 will stop incrementing
		 */
		TIMER2_CONTROL_REGIRSTER = (TIMER2_CONTROL_REGIRSTER  & TIMER2_CLOCK_MASK_CLEAR) ;
    363e:	a5 e4       	ldi	r26, 0x45	; 69
    3640:	b0 e0       	ldi	r27, 0x00	; 0
    3642:	e5 e4       	ldi	r30, 0x45	; 69
    3644:	f0 e0       	ldi	r31, 0x00	; 0
    3646:	80 81       	ld	r24, Z
    3648:	88 7f       	andi	r24, 0xF8	; 248
    364a:	8c 93       	st	X, r24
		break;

	} /*End of the switch case*/


}/*End of the Timer_stop function*/
    364c:	0f 90       	pop	r0
    364e:	0f 90       	pop	r0
    3650:	0f 90       	pop	r0
    3652:	cf 91       	pop	r28
    3654:	df 91       	pop	r29
    3656:	08 95       	ret

00003658 <Timer_start>:
 * [Out]           NONE
 *
 * [Returns]:      NONE
 ***************************************************************************************************/
void Timer_start(Timer_Type timer_type, Timer_Clock CLK)
{
    3658:	df 93       	push	r29
    365a:	cf 93       	push	r28
    365c:	00 d0       	rcall	.+0      	; 0x365e <Timer_start+0x6>
    365e:	00 d0       	rcall	.+0      	; 0x3660 <Timer_start+0x8>
    3660:	cd b7       	in	r28, 0x3d	; 61
    3662:	de b7       	in	r29, 0x3e	; 62
    3664:	89 83       	std	Y+1, r24	; 0x01
    3666:	6a 83       	std	Y+2, r22	; 0x02

	switch(timer_type)
    3668:	89 81       	ldd	r24, Y+1	; 0x01
    366a:	28 2f       	mov	r18, r24
    366c:	30 e0       	ldi	r19, 0x00	; 0
    366e:	3c 83       	std	Y+4, r19	; 0x04
    3670:	2b 83       	std	Y+3, r18	; 0x03
    3672:	8b 81       	ldd	r24, Y+3	; 0x03
    3674:	9c 81       	ldd	r25, Y+4	; 0x04
    3676:	81 30       	cpi	r24, 0x01	; 1
    3678:	91 05       	cpc	r25, r1
    367a:	a1 f0       	breq	.+40     	; 0x36a4 <Timer_start+0x4c>
    367c:	2b 81       	ldd	r18, Y+3	; 0x03
    367e:	3c 81       	ldd	r19, Y+4	; 0x04
    3680:	22 30       	cpi	r18, 0x02	; 2
    3682:	31 05       	cpc	r19, r1
    3684:	d1 f0       	breq	.+52     	; 0x36ba <Timer_start+0x62>
    3686:	8b 81       	ldd	r24, Y+3	; 0x03
    3688:	9c 81       	ldd	r25, Y+4	; 0x04
    368a:	00 97       	sbiw	r24, 0x00	; 0
    368c:	01 f5       	brne	.+64     	; 0x36ce <Timer_start+0x76>
		/*
		 * Clear the first 3-bits in TCCR0 register
		 * stop the clock of the timer
		 * timer0 will stop incrementing
		 */
		TIMER0_CONTROL_REGIRSTER = (TIMER0_CONTROL_REGIRSTER  & TIMER0_CLOCK_MASK_CLEAR) | CLK ;
    368e:	a3 e5       	ldi	r26, 0x53	; 83
    3690:	b0 e0       	ldi	r27, 0x00	; 0
    3692:	e3 e5       	ldi	r30, 0x53	; 83
    3694:	f0 e0       	ldi	r31, 0x00	; 0
    3696:	80 81       	ld	r24, Z
    3698:	98 2f       	mov	r25, r24
    369a:	98 7f       	andi	r25, 0xF8	; 248
    369c:	8a 81       	ldd	r24, Y+2	; 0x02
    369e:	89 2b       	or	r24, r25
    36a0:	8c 93       	st	X, r24
    36a2:	15 c0       	rjmp	.+42     	; 0x36ce <Timer_start+0x76>
		/*
		 * Clear the first 3-bits in TCCR1B register
		 * stop the clock of the timer
		 * timer1 will stop incrementing
		 */
		TIMER1_CONTROL_REGIRSTER_B  =  (TIMER1_CONTROL_REGIRSTER_B  & TIMER1_CLOCK_MASK_CLEAR) | CLK;
    36a4:	ae e4       	ldi	r26, 0x4E	; 78
    36a6:	b0 e0       	ldi	r27, 0x00	; 0
    36a8:	ee e4       	ldi	r30, 0x4E	; 78
    36aa:	f0 e0       	ldi	r31, 0x00	; 0
    36ac:	80 81       	ld	r24, Z
    36ae:	98 2f       	mov	r25, r24
    36b0:	98 7f       	andi	r25, 0xF8	; 248
    36b2:	8a 81       	ldd	r24, Y+2	; 0x02
    36b4:	89 2b       	or	r24, r25
    36b6:	8c 93       	st	X, r24
    36b8:	0a c0       	rjmp	.+20     	; 0x36ce <Timer_start+0x76>
		/*
		 * Clear the first 3-bits in TCCR2 register
		 * stop the clock of the timer
		 * timer2 will stop incrementing
		 */
		TIMER2_CONTROL_REGIRSTER = (TIMER2_CONTROL_REGIRSTER  & TIMER2_CLOCK_MASK_CLEAR) | CLK;
    36ba:	a5 e4       	ldi	r26, 0x45	; 69
    36bc:	b0 e0       	ldi	r27, 0x00	; 0
    36be:	e5 e4       	ldi	r30, 0x45	; 69
    36c0:	f0 e0       	ldi	r31, 0x00	; 0
    36c2:	80 81       	ld	r24, Z
    36c4:	98 2f       	mov	r25, r24
    36c6:	98 7f       	andi	r25, 0xF8	; 248
    36c8:	8a 81       	ldd	r24, Y+2	; 0x02
    36ca:	89 2b       	or	r24, r25
    36cc:	8c 93       	st	X, r24
		break;

	} /*End of the switch case*/


}/*End of the Timer_stop function*/
    36ce:	0f 90       	pop	r0
    36d0:	0f 90       	pop	r0
    36d2:	0f 90       	pop	r0
    36d4:	0f 90       	pop	r0
    36d6:	cf 91       	pop	r28
    36d8:	df 91       	pop	r29
    36da:	08 95       	ret

000036dc <Timer_DeInit>:
 *
 * [Returns]:      NONE
 ***************************************************************************************************/

void Timer_DeInit(Timer_Type timer_type)
{
    36dc:	df 93       	push	r29
    36de:	cf 93       	push	r28
    36e0:	cd b7       	in	r28, 0x3d	; 61
    36e2:	de b7       	in	r29, 0x3e	; 62
    36e4:	66 97       	sbiw	r28, 0x16	; 22
    36e6:	0f b6       	in	r0, 0x3f	; 63
    36e8:	f8 94       	cli
    36ea:	de bf       	out	0x3e, r29	; 62
    36ec:	0f be       	out	0x3f, r0	; 63
    36ee:	cd bf       	out	0x3d, r28	; 61
    36f0:	89 83       	std	Y+1, r24	; 0x01
	switch(timer_type)
    36f2:	89 81       	ldd	r24, Y+1	; 0x01
    36f4:	28 2f       	mov	r18, r24
    36f6:	30 e0       	ldi	r19, 0x00	; 0
    36f8:	3e 8b       	std	Y+22, r19	; 0x16
    36fa:	2d 8b       	std	Y+21, r18	; 0x15
    36fc:	8d 89       	ldd	r24, Y+21	; 0x15
    36fe:	9e 89       	ldd	r25, Y+22	; 0x16
    3700:	81 30       	cpi	r24, 0x01	; 1
    3702:	91 05       	cpc	r25, r1
    3704:	21 f1       	breq	.+72     	; 0x374e <Timer_DeInit+0x72>
    3706:	2d 89       	ldd	r18, Y+21	; 0x15
    3708:	3e 89       	ldd	r19, Y+22	; 0x16
    370a:	22 30       	cpi	r18, 0x02	; 2
    370c:	31 05       	cpc	r19, r1
    370e:	09 f4       	brne	.+2      	; 0x3712 <Timer_DeInit+0x36>
    3710:	51 c0       	rjmp	.+162    	; 0x37b4 <Timer_DeInit+0xd8>
    3712:	8d 89       	ldd	r24, Y+21	; 0x15
    3714:	9e 89       	ldd	r25, Y+22	; 0x16
    3716:	00 97       	sbiw	r24, 0x00	; 0
    3718:	09 f0       	breq	.+2      	; 0x371c <Timer_DeInit+0x40>
    371a:	64 c0       	rjmp	.+200    	; 0x37e4 <Timer_DeInit+0x108>
	{
	case Timer0:

		/*Clear all register in Timer0*/
		TIMER0_CONTROL_REGIRSTER        &= 0X00;
    371c:	e3 e5       	ldi	r30, 0x53	; 83
    371e:	f0 e0       	ldi	r31, 0x00	; 0
    3720:	90 81       	ld	r25, Z
    3722:	e3 e5       	ldi	r30, 0x53	; 83
    3724:	f0 e0       	ldi	r31, 0x00	; 0
    3726:	10 82       	st	Z, r1
		TIMER0_INITIAL_VALUE_REGISTER   &= 0X00;
    3728:	e2 e5       	ldi	r30, 0x52	; 82
    372a:	f0 e0       	ldi	r31, 0x00	; 0
    372c:	20 81       	ld	r18, Z
    372e:	e2 e5       	ldi	r30, 0x52	; 82
    3730:	f0 e0       	ldi	r31, 0x00	; 0
    3732:	10 82       	st	Z, r1
		TIMER0_OUTPUT_COMPARE_REGISTER  &= 0X00;
    3734:	ec e5       	ldi	r30, 0x5C	; 92
    3736:	f0 e0       	ldi	r31, 0x00	; 0
    3738:	30 81       	ld	r19, Z
    373a:	ec e5       	ldi	r30, 0x5C	; 92
    373c:	f0 e0       	ldi	r31, 0x00	; 0
    373e:	10 82       	st	Z, r1
		TIMER0_INTERRUPT_MASK_REGISTER  &= 0X00;
    3740:	e9 e5       	ldi	r30, 0x59	; 89
    3742:	f0 e0       	ldi	r31, 0x00	; 0
    3744:	80 81       	ld	r24, Z
    3746:	e9 e5       	ldi	r30, 0x59	; 89
    3748:	f0 e0       	ldi	r31, 0x00	; 0
    374a:	10 82       	st	Z, r1
    374c:	4b c0       	rjmp	.+150    	; 0x37e4 <Timer_DeInit+0x108>
		break;

	case Timer1:

		/*Clear all register in Timer1*/
		TIMER1_CONTROL_REGIRSTER_A         &= 0X00;
    374e:	ef e4       	ldi	r30, 0x4F	; 79
    3750:	f0 e0       	ldi	r31, 0x00	; 0
    3752:	90 81       	ld	r25, Z
    3754:	ef e4       	ldi	r30, 0x4F	; 79
    3756:	f0 e0       	ldi	r31, 0x00	; 0
    3758:	10 82       	st	Z, r1
		TIMER1_CONTROL_REGIRSTER_B         &= 0X00;
    375a:	ee e4       	ldi	r30, 0x4E	; 78
    375c:	f0 e0       	ldi	r31, 0x00	; 0
    375e:	20 81       	ld	r18, Z
    3760:	ee e4       	ldi	r30, 0x4E	; 78
    3762:	f0 e0       	ldi	r31, 0x00	; 0
    3764:	10 82       	st	Z, r1
		TIMER1_INITIAL_VALUE_REGISTER      &= 0X00;
    3766:	ec e4       	ldi	r30, 0x4C	; 76
    3768:	f0 e0       	ldi	r31, 0x00	; 0
    376a:	80 81       	ld	r24, Z
    376c:	91 81       	ldd	r25, Z+1	; 0x01
    376e:	ec e4       	ldi	r30, 0x4C	; 76
    3770:	f0 e0       	ldi	r31, 0x00	; 0
    3772:	11 82       	std	Z+1, r1	; 0x01
    3774:	10 82       	st	Z, r1
		TIMER1_OUTPUT_COMPARE_REGISTER_A   &= 0X00;
    3776:	ea e4       	ldi	r30, 0x4A	; 74
    3778:	f0 e0       	ldi	r31, 0x00	; 0
    377a:	20 81       	ld	r18, Z
    377c:	31 81       	ldd	r19, Z+1	; 0x01
    377e:	ea e4       	ldi	r30, 0x4A	; 74
    3780:	f0 e0       	ldi	r31, 0x00	; 0
    3782:	11 82       	std	Z+1, r1	; 0x01
    3784:	10 82       	st	Z, r1
		TIMER1_OUTPUT_COMPARE_REGISTER_B   &= 0X00;
    3786:	e8 e4       	ldi	r30, 0x48	; 72
    3788:	f0 e0       	ldi	r31, 0x00	; 0
    378a:	80 81       	ld	r24, Z
    378c:	91 81       	ldd	r25, Z+1	; 0x01
    378e:	e8 e4       	ldi	r30, 0x48	; 72
    3790:	f0 e0       	ldi	r31, 0x00	; 0
    3792:	11 82       	std	Z+1, r1	; 0x01
    3794:	10 82       	st	Z, r1
		TIMER1_INTERRUPT_MASK_REGISTER     &= 0X00;
    3796:	e9 e5       	ldi	r30, 0x59	; 89
    3798:	f0 e0       	ldi	r31, 0x00	; 0
    379a:	90 81       	ld	r25, Z
    379c:	e9 e5       	ldi	r30, 0x59	; 89
    379e:	f0 e0       	ldi	r31, 0x00	; 0
    37a0:	10 82       	st	Z, r1
		INPUT_CAPTURE_REGISRTER1           &= 0X00;
    37a2:	e6 e4       	ldi	r30, 0x46	; 70
    37a4:	f0 e0       	ldi	r31, 0x00	; 0
    37a6:	20 81       	ld	r18, Z
    37a8:	31 81       	ldd	r19, Z+1	; 0x01
    37aa:	e6 e4       	ldi	r30, 0x46	; 70
    37ac:	f0 e0       	ldi	r31, 0x00	; 0
    37ae:	11 82       	std	Z+1, r1	; 0x01
    37b0:	10 82       	st	Z, r1
    37b2:	18 c0       	rjmp	.+48     	; 0x37e4 <Timer_DeInit+0x108>


	case Timer2:

		/*Clear all register in Timer2*/
		TIMER2_CONTROL_REGIRSTER        &= 0X00;
    37b4:	e5 e4       	ldi	r30, 0x45	; 69
    37b6:	f0 e0       	ldi	r31, 0x00	; 0
    37b8:	30 81       	ld	r19, Z
    37ba:	e5 e4       	ldi	r30, 0x45	; 69
    37bc:	f0 e0       	ldi	r31, 0x00	; 0
    37be:	10 82       	st	Z, r1
		TIMER2_INITIAL_VALUE_REGISTER   &= 0X00;
    37c0:	e4 e4       	ldi	r30, 0x44	; 68
    37c2:	f0 e0       	ldi	r31, 0x00	; 0
    37c4:	80 81       	ld	r24, Z
    37c6:	e4 e4       	ldi	r30, 0x44	; 68
    37c8:	f0 e0       	ldi	r31, 0x00	; 0
    37ca:	10 82       	st	Z, r1
		TIMER2_OUTPUT_COMPARE_REGISTER  &= 0X00;
    37cc:	e3 e4       	ldi	r30, 0x43	; 67
    37ce:	f0 e0       	ldi	r31, 0x00	; 0
    37d0:	90 81       	ld	r25, Z
    37d2:	e3 e4       	ldi	r30, 0x43	; 67
    37d4:	f0 e0       	ldi	r31, 0x00	; 0
    37d6:	10 82       	st	Z, r1
		TIMER2_INTERRUPT_MASK_REGISTER  &= 0X00;
    37d8:	e9 e5       	ldi	r30, 0x59	; 89
    37da:	f0 e0       	ldi	r31, 0x00	; 0
    37dc:	20 81       	ld	r18, Z
    37de:	e9 e5       	ldi	r30, 0x59	; 89
    37e0:	f0 e0       	ldi	r31, 0x00	; 0
    37e2:	10 82       	st	Z, r1
		break;

	} /*End of the switch case*/


}/*end of the Timer_DeInit function*/
    37e4:	66 96       	adiw	r28, 0x16	; 22
    37e6:	0f b6       	in	r0, 0x3f	; 63
    37e8:	f8 94       	cli
    37ea:	de bf       	out	0x3e, r29	; 62
    37ec:	0f be       	out	0x3f, r0	; 63
    37ee:	cd bf       	out	0x3d, r28	; 61
    37f0:	cf 91       	pop	r28
    37f2:	df 91       	pop	r29
    37f4:	08 95       	ret

000037f6 <__mulsi3>:
    37f6:	62 9f       	mul	r22, r18
    37f8:	d0 01       	movw	r26, r0
    37fa:	73 9f       	mul	r23, r19
    37fc:	f0 01       	movw	r30, r0
    37fe:	82 9f       	mul	r24, r18
    3800:	e0 0d       	add	r30, r0
    3802:	f1 1d       	adc	r31, r1
    3804:	64 9f       	mul	r22, r20
    3806:	e0 0d       	add	r30, r0
    3808:	f1 1d       	adc	r31, r1
    380a:	92 9f       	mul	r25, r18
    380c:	f0 0d       	add	r31, r0
    380e:	83 9f       	mul	r24, r19
    3810:	f0 0d       	add	r31, r0
    3812:	74 9f       	mul	r23, r20
    3814:	f0 0d       	add	r31, r0
    3816:	65 9f       	mul	r22, r21
    3818:	f0 0d       	add	r31, r0
    381a:	99 27       	eor	r25, r25
    381c:	72 9f       	mul	r23, r18
    381e:	b0 0d       	add	r27, r0
    3820:	e1 1d       	adc	r30, r1
    3822:	f9 1f       	adc	r31, r25
    3824:	63 9f       	mul	r22, r19
    3826:	b0 0d       	add	r27, r0
    3828:	e1 1d       	adc	r30, r1
    382a:	f9 1f       	adc	r31, r25
    382c:	bd 01       	movw	r22, r26
    382e:	cf 01       	movw	r24, r30
    3830:	11 24       	eor	r1, r1
    3832:	08 95       	ret

00003834 <__udivmodsi4>:
    3834:	a1 e2       	ldi	r26, 0x21	; 33
    3836:	1a 2e       	mov	r1, r26
    3838:	aa 1b       	sub	r26, r26
    383a:	bb 1b       	sub	r27, r27
    383c:	fd 01       	movw	r30, r26
    383e:	0d c0       	rjmp	.+26     	; 0x385a <__udivmodsi4_ep>

00003840 <__udivmodsi4_loop>:
    3840:	aa 1f       	adc	r26, r26
    3842:	bb 1f       	adc	r27, r27
    3844:	ee 1f       	adc	r30, r30
    3846:	ff 1f       	adc	r31, r31
    3848:	a2 17       	cp	r26, r18
    384a:	b3 07       	cpc	r27, r19
    384c:	e4 07       	cpc	r30, r20
    384e:	f5 07       	cpc	r31, r21
    3850:	20 f0       	brcs	.+8      	; 0x385a <__udivmodsi4_ep>
    3852:	a2 1b       	sub	r26, r18
    3854:	b3 0b       	sbc	r27, r19
    3856:	e4 0b       	sbc	r30, r20
    3858:	f5 0b       	sbc	r31, r21

0000385a <__udivmodsi4_ep>:
    385a:	66 1f       	adc	r22, r22
    385c:	77 1f       	adc	r23, r23
    385e:	88 1f       	adc	r24, r24
    3860:	99 1f       	adc	r25, r25
    3862:	1a 94       	dec	r1
    3864:	69 f7       	brne	.-38     	; 0x3840 <__udivmodsi4_loop>
    3866:	60 95       	com	r22
    3868:	70 95       	com	r23
    386a:	80 95       	com	r24
    386c:	90 95       	com	r25
    386e:	9b 01       	movw	r18, r22
    3870:	ac 01       	movw	r20, r24
    3872:	bd 01       	movw	r22, r26
    3874:	cf 01       	movw	r24, r30
    3876:	08 95       	ret

00003878 <__prologue_saves__>:
    3878:	2f 92       	push	r2
    387a:	3f 92       	push	r3
    387c:	4f 92       	push	r4
    387e:	5f 92       	push	r5
    3880:	6f 92       	push	r6
    3882:	7f 92       	push	r7
    3884:	8f 92       	push	r8
    3886:	9f 92       	push	r9
    3888:	af 92       	push	r10
    388a:	bf 92       	push	r11
    388c:	cf 92       	push	r12
    388e:	df 92       	push	r13
    3890:	ef 92       	push	r14
    3892:	ff 92       	push	r15
    3894:	0f 93       	push	r16
    3896:	1f 93       	push	r17
    3898:	cf 93       	push	r28
    389a:	df 93       	push	r29
    389c:	cd b7       	in	r28, 0x3d	; 61
    389e:	de b7       	in	r29, 0x3e	; 62
    38a0:	ca 1b       	sub	r28, r26
    38a2:	db 0b       	sbc	r29, r27
    38a4:	0f b6       	in	r0, 0x3f	; 63
    38a6:	f8 94       	cli
    38a8:	de bf       	out	0x3e, r29	; 62
    38aa:	0f be       	out	0x3f, r0	; 63
    38ac:	cd bf       	out	0x3d, r28	; 61
    38ae:	09 94       	ijmp

000038b0 <__epilogue_restores__>:
    38b0:	2a 88       	ldd	r2, Y+18	; 0x12
    38b2:	39 88       	ldd	r3, Y+17	; 0x11
    38b4:	48 88       	ldd	r4, Y+16	; 0x10
    38b6:	5f 84       	ldd	r5, Y+15	; 0x0f
    38b8:	6e 84       	ldd	r6, Y+14	; 0x0e
    38ba:	7d 84       	ldd	r7, Y+13	; 0x0d
    38bc:	8c 84       	ldd	r8, Y+12	; 0x0c
    38be:	9b 84       	ldd	r9, Y+11	; 0x0b
    38c0:	aa 84       	ldd	r10, Y+10	; 0x0a
    38c2:	b9 84       	ldd	r11, Y+9	; 0x09
    38c4:	c8 84       	ldd	r12, Y+8	; 0x08
    38c6:	df 80       	ldd	r13, Y+7	; 0x07
    38c8:	ee 80       	ldd	r14, Y+6	; 0x06
    38ca:	fd 80       	ldd	r15, Y+5	; 0x05
    38cc:	0c 81       	ldd	r16, Y+4	; 0x04
    38ce:	1b 81       	ldd	r17, Y+3	; 0x03
    38d0:	aa 81       	ldd	r26, Y+2	; 0x02
    38d2:	b9 81       	ldd	r27, Y+1	; 0x01
    38d4:	ce 0f       	add	r28, r30
    38d6:	d1 1d       	adc	r29, r1
    38d8:	0f b6       	in	r0, 0x3f	; 63
    38da:	f8 94       	cli
    38dc:	de bf       	out	0x3e, r29	; 62
    38de:	0f be       	out	0x3f, r0	; 63
    38e0:	cd bf       	out	0x3d, r28	; 61
    38e2:	ed 01       	movw	r28, r26
    38e4:	08 95       	ret

000038e6 <_exit>:
    38e6:	f8 94       	cli

000038e8 <__stop_program>:
    38e8:	ff cf       	rjmp	.-2      	; 0x38e8 <__stop_program>
